# พื้นฐาน R

เมื่อผู้อ่านดาวน์โหลดและติดตั้งโปรแกรม R รวมทั้ง RStudio หรือ Positron แล้ว บทเรียนนี้จะกล่าวถึงการใช้ภาษาเบื้องต้น ได้แก่ การคำนวณทางคณิตศาสตร์พื้นฐาน ฟังก์ชัน มโนทัศน์เกี่ยวกับตัวแปรในภาษา R ประเภทของตัวแปรและการสร้างตัวแปร และการอ้างอิงค่าหรือสมาชิกภายในตัวแปรที่สร้างขึ้น ในการเรียนรู้และประมวลผลคำสั่งตามเนื้อหาในบทเรียนนี้ ผู้อ่านสามารถพิมพ์คำสั่งบนเอกสาร Script โดยหากใช้ RStudio ผู้อ่านสามารถเปิดเอกสาร Script ได้โดยคลิกที่แถบเมนูด้านบน File --> New File --> R Script สำหรับใน Positron ให้สร้างไฟล์เอกสาร .R โดยบนแถบเมนูให้คลิกที่ File --> New File --> R File R ดังรูป 2.1



::: {#fig-IDE layout-ncol=2}

![Rstudio](img/02Rscript.png){width="100%"}

![Positron](img/02.R_positron.png){width="88%"}

การเปิดหน้าต่าง Editor หรือ Script ใน IDE 
:::


รายละเอียดมีดังนี้

## การคำนวณทางคณิตศาสตร์พื้นฐาน

ภาษา R มีฟังก์ชันพื้นฐานสำหรับการคำนวณทางคณิตศาสตร์จำนวนมาก เช่น การ
ดำเนินการพีชคณิตพื้นฐานได้แก่ การบวก (+) ลบ (-) คูณ (*) หาร (/) ยกกำลัง (^) และ รากที่
สอง (`sqrt()`) รวมทั้งการคำนวณผลลัพธ์จากฟังก์ชันอดิศัย (implicit function) ต่าง ๆ เช่น
ฟังก์ชันตรีโกณมิติ `sin()`, `cos()`, `tan()` ฟังก์ชันลอการิทึมธรรมชาติ `log()` ฟังก์ชันเอกซ์
โพเนนเซียล `exp()` และ วงเล็บ `( )` เป็นต้น ชุดคำสั่งด้านล่างแสดงตัวอย่างการดำเนินการทาง
คณิตศาสตร์ใน R ผู้อ่านลองพิมพ์คำสั่งดังกล่างลงในเครื่องคอมพิวเตอร์ของตนเอง จากนั้นสังเกต
ผลลัพธ์ที่ได้

```{r eval = F}
1+1; 3-2; 4*5; 10/2
3^3; sqrt(625); 81^(1/3)
5%%3; (3^3+5-1)
log(10); exp(5)
```


## ฟังก์ชัน (functions)

ในหัวข้อที่ผ่านมาจะเห็นว่ามีการใช้งานฟังก์ชันในโปรแกรม R ไปบางตัวทั้งฟังก์ชันทาง
คณิตศาสตร์ เช่น `sqrt()`, `exp()` และ `log()` และฟังก์ชันกราฟิกคือ `hist()` เป็นต้น ผู้
อ่านจะสังเกตว่าการใช้ฟังก์ชันดังกล่าวในการทำงานช่วยให้ผู้ใช้ลดขั้นตอนในการทำงานที่ไม่
จำเป็นไปได้ นอกจากนี้ยังช่วยให้ syntax ของผู้เขียนโปรแกรมสั้นลง ทำงานได้ไวขึ้นและมี
ประสิทธิภาพสูงขึ้น เช่นหากต้องการหาค่าสัมบูรณ์ของ -10 ในกรณีที่ไม่ได้ฟังก์ชันเข้ามาช่วยใน
การประมวลผล ผู้วิเคราะห์จำเป็นต้องเขียนอัลกอริทึมเพื่อหาค่าสัมบูรณ์เองโดยอาจใช้คำสั่ง IF,
ELSE เพื่อควบคุมเงื่อนไขการทำงานของ R ดังตัวอย่างคำสั่งด้านล่าง ซึ่งจะได้ผลลัพธ์เท่ากับ 10

```{r}
x<-(-10)
## เขียนกระบวนการเพื่อหา absolute ของ x
if(x<0){-(x)} else {x}
```


อย่างไรก็ตามเมื่อเปรียบเทียบกับการใช้ฟังก์ชันเข้ามาช่วยในการทำงาน โดยในกรณีนี้นำ
เอาฟังก์ชัน abs() เข้ามาช่วยคำนวณค่าสัมบูรณ์ ผู้อ่านจะเห็นว่าการเขียนคำสั่งลดลงเหลือเพียง
บรรทัดเดียวเท่านั้น ดังนี้

```{r}
abs(-10)
```

จากตัวอย่างในข้างต้นผู้อ่านจะสังเกตเห็นว่าการใช้ฟังก์ชันในการดำเนินงานช่วยลดขั้น
ตอนและประหยัดเวลาในการทำงานได้อย่างมาก ในสภาพแวดล้อมการทำงานบนโปรแกรม R
**ฟังก์ชัน (function)** คือชุดคำสั่งสำเร็จรูปที่ถูกพัฒนาขึ้นสำหรับการทำงานเฉพาะด้าน การใช้
ฟังก์ชันในการดำเนินงานจะช่วยให้ผู้ใช้ประหยัดเวลา ลดความผิดพลาดในการทำงาน และทำให้
กระบวนการทำงานมีประสิทธิภาพมากยิ่งขึ้น ฟังก์ชันในโปรแกรม R ไม่ได้จำกัดการใช้งานแต่ด้าน
การคำนวณทางคณิตศาสตร์เท่านั้น แต่ยังมีฟังก์ชันที่สามารถใช้ดำเนินงานลักษณะอื่นได้อีกหลาย
ประเภท เช่น การคัดเลือกตัวแปร การคัดกรองข้อมูล การสร้างแผนภาพหรือกราฟทางสถิติ และ
การประมวลผลเพื่อหาคำตอบในทางสถิติ เป็นต้น

ฟังก์ชันแต่ละตัวมีส่วนประกอบจำนวน 3 ส่วนหลัก ได้แก่ (1) ส่วนข้อมูลนำเข้า (input)
ส่วนนี้เป็นส่วนที่ผู้ใช้โปรแกรมต้องกำหนดหรือกรอกเข้าไปในฟังก์ชันเพื่อควบคุมการทำงานให้เป็น
ไปตามที่ต้องการ (2) ส่วนประมวลผล (process) ส่วนนี้เป็นส่วนการทำงานเบื้องหลัง ปกติแล้วผู้
ใช้มักจะไม่เห็นการทำงานในส่วนนี้ของฟังก์ชัน การประมวลผลนี้จะดำเนินการโดยขึ้นกับชุดคำสั่งที่
ผู้พัฒนาได้กำหนดไว้ และข้อมูลนำเข้าที่ผู้ใช้ระบุ และ (3) ส่วนผลลัพธ์ (output) เป็นผลลัพธ์หรือ
คำตอบที่ได้จากฟังก์ชัน ซึ่งอาจรายงานให้ผู้ใช้ทราบในหน้าต่าง Console ในทันที่ที่ประมวลผล
เสร็จสิ้น หรืออาจเก็บผลลัพธ์ดังกล่าวเอาไว้ในตัวแปร ซึ่งผู้ใช้จะต้องเรียกดูด้วยตนเองอีกครั้งหนึ่ง
โดยปกติการเรียกใช้ฟังก์ชันใน R มีรูปแบบคำสั่งดังนี้

```{r eval = F}
function_name(arg1, arg2, ...)
```

โดยที่ `function_name` คือชื่อของฟังก์ชัน และ `arg1` กับ `arg2, ...` เป็นส่วนข้อมูลนำเข้าของ
ฟังก์ชันเรียกว่า อาร์กิวเมนท์ (argument) ใช้สำหรับป้อนข้อมูลที่จำเป็นและควบคุมการทำงานของ
ฟังก์ชันเพื่อให้ผลลัพธ์เป็นไปตามที่ผู้ใช้ต้องการ ทั้งนี้ฟังก์ชันสามารถมีอาร์กิวเมนท์ได้มากกว่าหนึ่ง ตัวขึ้นอยู่กับลักษณะงานของแต่ละฟังก์ชัน ยกตัวอย่างเช่น ฟังก์ชัน `log(x, base=exp(1))` ที่
มีอาร์กิวเมนท์ 2 ตัวได้แก่ `x` และ `base` เมื่อกำหนดค่าทั้งสองฟังก์ชันจะหาค่า logarithm ของ
ค่า `x` เมื่อกำหนดฐานของ logarithm ให้มีค่าเท่ากับ `base` โดยในคำสั่งข้างต้นกำหนดให้ `base = exp(1)` ซึ่งมีค่าเท่ากับ $e \approx 2.71828...$ เรียกว่า natural logarithm ตัวอย่างด้านล่าง แสดงการหา ค่า natural logarithm ของ 10 ด้วยการใช้ฟังก์ชัน `log()` ข้างต้น


```{r}
log(x = 10, base = exp(1))
log(10)
```

จากตัวอย่างข้างต้นผู้อ่านจะสังเกตเห็นว่าการเรียกใช้ฟังก์ชันใน R สามารถลดทอนการ
เขียนอาร์กิวเมนท์บางตัวได้ ในกรณีที่อาร์กิวเมนท์นั้นถูกกำหนดค่าเริ่มต้น (default value) เอาไว้
จากตัวอย่างที่ผ่านมาจะเห็นว่า อาร์กิวเมนท์ base ถูกกำหนดค่าเริ่มต้น (default) ให้มีค่าเท่ากับ
`exp(1)` ระหว่างการเขียนคำสั่ง `log(x, base=exp(1))` กับ `log(x)` จึงได้คำตอบเดียวกัน
ดังนั้นอาร์กิวเมนท์ `base` จึงเป็นอาร์กิวเมนท์ที่สามารถละการเขียนได้

## การเรียกคู่มือการใช้งานฟังก์ชัน

R เป็นโปรแกรมที่มีฟังก์ชันให้เลือกใช้งานจำนวนมากในทางปฏิบัติจึงยากที่จะจำวิธีการใช้
ฟังก์ชันทั้งหมด การทำงานบนโปรแกรม R โดยปกติจึงมักมีการเรียกดูคู่มือการใช้ฟังก์ชันที่ใช้เป็น
ประจำ โดยผู้ใช้ R สามารถเรียกดูคู่มือของฟังก์ชันที่ต้องการได้โดยพิมพ์คำสั่ง ? ตามด้วยชื่อฟังก์ชัน หรือใช้ฟังก์ชัน `help()` เพื่อเรียกดูคู่มือดังกล่าว เช่น หากต้องการเรียกดู คู่มือการใช้
ฟังก์ชัน `log()` ข้างต้นสามารถพิมพ์คำสั่งได้ดังนี้

```{r eval = F}
?log()
help(log)
```

ตัวอย่างด้านล่างแสดงคู่มือการใช้งานฟังก์ชัน `log()` ข้างต้น เ

::: {#fig-Help layout-ncol=1}

![](img/02loghelp.png)

คู่มือการใช้งานฟังก์ชัน `log()` ที่ได้จากการพิมพ์คำสั่ง `?log()`
:::

 R มีฟังก์ชันจำนวนมากจากหลาย library สำหรับการทำงานในด้านวิทยาการข้อมูล ในหนังสือเล่มนี้ผู้อ่านจะได้รู้จักและเรียนรู้การประยุกต์ใช้ฟังก์ชันต่าง ๆ ที่จำเป็นในกระบวนการวิเคราะห์ข้อมูล ตั้งแต่การทำความสะอาดข้อมูล การตรวจสอบข้อมูลที่ขาดหายไป การรวมและแยกข้อมูล การสร้างทัศนภาพข้อมูล ไปจนถึงการคำนวณทางสถิติต่าง ๆ นอกจากการใช้ฟังก์ชันที่ผู้อื่นได้สร้างเอาไว้ ในบางกรณีผู้วิเคราะห์อาจจำเป็นจะต้องสร้างฟังก์ชันของตนเองเพื่อใช้ในการทำงานหรือเพื่อแก้ปัญหาต่าง ๆ ซึ่งจะกล่าวถึงในประเด็นนี้อีกครั้งในส่วนท้ายของบทเรียนนี้ เนื้อหาส่วนถัดไปจะกล่าวถึงมโนทัศน์ของตัวแปรในภาษา R ซึ่งพื้นฐานที่มีความสำคัญมากในการทำงานด้านสถิติและวิทยาการข้อมูล

 

