---
title: "7. Local Node-Level Measures"
bibliography: bib.bib
author: "Assistant Prof. Dr. Siwachoat Srisuttiyakorn"
institute: "Department of Educational Research and Psychology <br> Faculty of Education Chulalongkorn University"
date: today
format:
  revealjs:
    auto-animate-easing: ease-in
    auto-animate-unmatched: false
    auto-animate-duration: 0.8
    slide-number: c/t
    footer: "Assistant Prof. Dr. Siwachoat Srisuttiyakorn <br> Department of Educational Research and Psychology <br> Faculty of Education Chulalongkorn University"
    logo: https://github.com/ssiwacho/picture/blob/main/datakruroo.png?raw=true
    theme: theme.scss
    css: my_css.css
    scrollable: true
    transition: fade
    background-transition: fade
    highlight-style: github
    embed-resources: true
code-link: true
execute:
  echo: false
  freeze: auto
  progress: true
include-in-header:
  - text: |
      <style>
      #title-slide .title {
        font-size: 2em;
        color:  #C5705D;
      }
      </style>
---

```{r}
library(KruRooSocNet)
```

## Outline {.smaller}

บทเรียนนี้จะกล่าวถึงตัวชี้วัดคุณลักษณะของเครือข่ายระดับบุคคล (local-level measures)

-   **Ego-network measures (local measures)** -- ทำความเข้าใจคุณลักษณะของเครือข่ายรอบโหนด/บุคคล

-   Centrality measures -- การวัดตำแหน่งของโหนดเชิงศูนย์กลาง

## 1. Ego-network measures {.smaller}

-   Social Capital -- คุณลักษณะของโหนดหรือความสัมพันธ์ในเครือข่ายช่วยสร้างโอกาสหรือความได้เปรียบในการประสบความสำเร็จ อย่างไร

-   Social Influence -- โหนดแต่ละโหนดได้รับอิทธิพลจาก Alters อย่างไรในเชิงของความเชื่อ ทัศนคติ บรรทัดฐานทางสังคม พฤติกรรม แนวปฏิบัติ หรือเงื่อนไขต่าง ๆ

ตัวชี้วัด local node-level ทำหน้าที่เป็นได้ทั้ง ตัวแปรอิสระเพื่อทำนายผลลัพธ์ที่สนใจ และถูกวิเคราะห์เป็นตัวแปรตามก็ได้ เพื่ออธิบาย/ค้นหาตัวแปรอิสระที่มีความสัมพันธ์หรือเป็นสาเหตุของคุณลักษณะของเครือข่ายระดับโหนดนี้

-   โหนดที่มีเครือข่ายกว้างขวาง (popularity สูง) —\> ประสบความสำเร็จสูง

-   มีปัจจัยใดที่ทำให้บุคคล/โหนดมีความ popularity สูง?

## 1. Ego-network measures {.smaller}

-   Egonet – เครือข่ายย่อยที่เป็นส่วนหนึ่งของเครือข่ายทั้งหมด ประกอบด้วย โหนดที่เรียกว่า ego และโหนดอื่น ๆ ที่เชื่อมโยงกับ ego โดยตรง เรียกว่า alters

-   การเก็บรวบรวมข้อมูลของ egonet สามารถทำได้ 2 ลักษณะ

    -   personal-network research design

    -   whole-network research design

```{r echo = F}
# ติดตั้งและโหลดแพ็กเกจที่จำเป็น
library(igraph)

# สร้างกราฟตัวอย่าง (Graph)
set.seed(42)  # กำหนดค่า seed เพื่อให้ผลลัพธ์เหมือนกันทุกครั้ง
g <- erdos.renyi.game(10, p = 0.3, directed = FALSE)  # สร้างกราฟแบบสุ่ม (Erdős-Rényi model)

# กำหนดชื่อโหนด (Label)
V(g)$name <- paste("Node", 1:vcount(g))

par(mfrow=c(1,2))
# แสดงโครงสร้างของเครือข่ายเต็ม (Whole Network)
plot(g, vertex.size = 30, vertex.label.cex = 0.8, main = "Whole Network")

# เลือกโหนดเป้าหมาย (Ego)
ego_node <- 3  # กำหนดให้ Node 3 เป็น Ego

# ดึงเครือข่ายอีโก้ของโหนดที่เลือก
ego_net <- make_ego_graph(g, order = 1, nodes = ego_node)[[1]]

# เปลี่ยนสีของโหนดเพื่อให้เห็นความแตกต่างระหว่าง Ego และ Alters
V(ego_net)$color <- ifelse(V(ego_net)$name == V(g)$name[ego_node], "skyblue", "steelblue")

# แสดงเครือข่ายอีโก้
plot(ego_net, vertex.size = 30, vertex.label.cex = 0.8, 
     main = paste("Ego Network of", V(g)$name[ego_node]))
```

## 1. Ego-network measures {.smaller}

-   **Tie composition** — ลักษณะความสัมพันธ์ที่ ego มีกับ alters

    -   จำนวน/สัดส่วนของความสัมพันธ์แต่ละประเภทของ ego

    -   ค่าเฉลี่ย/ค่าสูงสุด/มัธยฐานของระดับความสัมพันธ์/ระยะเวลาความสัมพันธ์

-   **Alter composition** — คุณลักษณะของ alters ที่ ego ไปมีความสัมพันธ์ด้วย

    -   จำนวน/สัดส่วนของ alter แต่ละประเภทที่ ego มี

    -   ค่าเฉลี่ย/ค่าสูงสุด/มัธยฐานของคุณลักษณะเชิงปริมาณของ alter

## 1. Ego-network measures {.smaller}

-   **Ego-alter similarity** — ความคล้ายคลึงระหว่าง ego กับ alter ในเชิงของคุณลักษณะที่สนใจ

    -   selection: ego สร้างความสัมพันธ์กับบุคลที่มีคุณลักษณะคล้ายกับตัวเองตั้งแต่แรก

    -   inflluence: ego มีปฏิสัมพันธ์กับ alter ไประยะเวลาหนึ่งทำให้เกิดการเปลี่ยนแปลงตนเองให้คล้ายกับ alter มากขึ้น

        -   เพศ สาขาวิชา กิจกรรมที่ชอบเข้าร่วม รายวิชาเลือกที่ลงทะเบียน/ชอบ —\> แนวโน้ม/จำนวนของ ties ของ ego กับ alters ที่มีคุณลักษณะเหมือนกัน

        -   ค่าเฉลี่ย/summary stat ของความคล้ายคลึงระหว่างคุณลักษณะของ ego กับ alters เช่น ค่าเฉลี่ยความแตกต่างของอายุ /จำนวนชั่วโมงการอ่านหนังสือ ระหว่าง ego กับ alter

        -   correlation ระหว่างการมี/ไม่มี ties กับความคล้ายคลึงหรือความแตกต่างของคุณลักษณะ

## 1. Ego-network measures {.smaller}

-   **Ego-network structure** — เน้นอธิบายรูปร่าง (shape) และความเชื่อมโยงกัน (cohesiveness) ของเครือข่ายรอบ ego

    -   structural hole

    -   bridging between alters

    -   ตัวชี้วัดสำหรับ whole network หลายตัวก็สามารถนำมาประยุกต์ใช้ได้ เช่น density, centralization, number of components, average distance

## 2. Tie Composition: Degree {.smaller}

-   ประเภทและระดับความสัมพันธ์ระหว่าง ego กับ alters

-   Binary network data: กำหนดให้ $x_{ijq}$ แทนความสัมพันธ์ q ระหว่าง ego ที่ i กับ alter ที่ j โดยที่ $x_{ijq} = 1$ หมายถึงมีความสัมพันธ์ จำนวนความสัมพันธ์แต่ละประเภทที่ ego i มี สามารถเขียนได้ดังนี้ **(จำนวนความสัมพันธ์ของ node นี้เรียกว่า degree ของ ego)**

$$
d_{iq} = \sum_{j} x_{ijq}
$$

```{r}
library(tidyverse)
library(xUCINET)
library(igraph)
library(DT)

load("Hawthorne_BankWiring_list.Rdata")


degree_df <- data.frame(
outdegree_game = Hawthorne_BankWiring$Game %>% 
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_conflict = Hawthorne_BankWiring$Conflict %>% 
  graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_friendship = Hawthorne_BankWiring$Friendship %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_antagonistic = Hawthorne_BankWiring$Antagonistic %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_help = Hawthorne_BankWiring$Help %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_trade = Hawthorne_BankWiring$TradeJobs %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out")

) 



degree_df %>% 
  rownames_to_column("node") %>% 
  mutate_at(vars(-node), scale) %>% 
  pivot_longer(cols = -node, names_to = "Tie", values_to = "Outdegree") %>% 
  ggplot(aes(x = Tie, y= reorder(node, Outdegree), fill = Outdegree)) +
  geom_tile()+
  ylab("")+
  xlab("")+
  scale_fill_viridis_c(option = "A")
  
```

## 2. Tie Composition: Agresti's index {.smaller}

-   วัดระดับของความแตกต่าง (heterogeneity) ของความสัมพันธ์ที่แต่ละ ego มี

-   มีค่าอยู่ในช่วง 0-1 ใกล้ 1 แสดงว่าเครือข่ายของ ego มีความหลากหลายสูง

$$
IQV = \frac{1-\sum_{q=1}^{Q} p_{iq}^{2}}{1-\frac{1}{Q}}
$$ 

โดยที่ $p_{iq}$ คือ สัดส่วนของความสัมพันธ์แบบ q ที่ ego i มี กล่าวคือเท่ากับ จำนวน degree หารด้วยผลรวมของ degree ทั้งหมดของ ego i ในทุกความสัมพันธ์ ส่วน $Q$ คือจำนวนประเภทของความสัมพันธ์ทั้งหมด

```{r echo=T}
### calculate ego IQV: รับ data.frame ของ degree
### คอลัมน์แรกต้องเป็น node name
### คอลัมน์ที่เหลือเป็น degree ของ ego แต่ละประเภท
ego_iqv <- function(degree_df) {
  degree_df %>%
    pivot_longer(cols = -1, names_to = "Tie", values_to = "Outdegree") %>%
    group_by(node) %>%
    mutate(Q = length(Outdegree),
           p = Outdegree / sum(Outdegree),
           ) %>% 
    reframe(
              IQV = (1 - sum(p^2)) / (1 - 1/Q)) %>%
    ungroup() %>% 
    unique()
}

degree_df %>% 
  rownames_to_column("node") %>% 
  ego_iqv() %>% 
  bind_cols(degree_df)
```

## 2. Tie Composition: Agresti's index {.smaller}

::::: columns
```{r echo = T}
degree_df <- data.frame(
outdegree_game = Hawthorne_BankWiring$Game %>% 
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_conflict = Hawthorne_BankWiring$Conflict %>% 
  graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_friendship = Hawthorne_BankWiring$Friendship %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_antagonistic = Hawthorne_BankWiring$Antagonistic %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_help = Hawthorne_BankWiring$Help %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out"),

outdeg_trade = Hawthorne_BankWiring$TradeJobs %>%
   graph_from_adjacency_matrix(mode = "directed") %>% 
  igraph::degree(mode = "out")

)
```

::: {.column width="30%"}
```{r}
degree_df %>% 
  rownames_to_column("node") %>% 
  ego_iqv()
  
```
:::

::: {.column width="70%"}
```{r}
degree_df %>% 
  rownames_to_column("node") %>% 
  ego_iqv() %>% 
  ggplot(aes(x = IQV))+
  geom_histogram(bins = 10, fill = "black", col = "white")+
  theme_light()
  
```
:::
:::::

## 3. Valued Tie Composition {.smaller}

-   กรณีที่เรามีข้อมูลความสัมพันธ์ที่มีค่าเชิงปริมาณ (valued tie data) ตัวชี้วัดระดับ/ความแข็งแรงของความสัมพันธ์ที่ ego มีต่อ alters สามารถทำได้โดยใช้ summary stat ของค่าความสัมพันธ์ดังกล่าว เช่น ค่าเฉลี่ย หรือมัธยฐาน หรือปริมาณอื่น ๆ ที่สะท้อนความสัมพันธ์หรือการสื่อสารทั้งหมดที่ ego มีกับ alters

```{r echo = T}
# ฟังก์ชันสร้างตารางสรุปสำหรับแต่ละโหนด
### ข้อมูลนำเข้า `graph` ต้องเป็น weight igraph object
create_summary_table <- function(graph) {
  # ดึงค่าทั้งหมดของ strength (น้ำหนักรวมของเส้นเชื่อมแต่ละโหนด)
  node_strengths <- strength(graph, mode = "all", weights = E(graph)$weight)
  
  # ดึง alter ของแต่ละโหนด (degree)
  num_alters <- degree(graph, mode = "all")

  # ดึงน้ำหนักของเส้นเชื่อม (tie strengths) เป็นรายการของแต่ละโหนด
  tie_strength_list <- lapply(V(graph), function(v) {
    incident_edges <- E(graph)[incident(graph, v, mode = "all")]
    edge_weights <- incident_edges$weight
    if (length(edge_weights) == 0) return(NA) # กรณีโหนดไม่มี edge
    return(edge_weights)
  })
  
  # สร้าง DataFrame
  summary_df <- data.frame(
    Node = V(graph)$name,  
    Number_of_alters = num_alters,
    Sum_of_tie_strengths = node_strengths,
    Average_tie_strength = sapply(tie_strength_list, mean, na.rm = TRUE),
    SD_tie_strength = sapply(tie_strength_list, sd, na.rm = TRUE),
    Median_tie_strength = sapply(tie_strength_list, median, na.rm = TRUE),
    Minimum_tie_strength = sapply(tie_strength_list, min, na.rm = TRUE),
    Maximum_tie_strength = sapply(tie_strength_list, max, na.rm = TRUE),
    Range_of_tie_strength = sapply(tie_strength_list, function(x) max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
  )
  
  return(summary_df)
}
```

## 3. Valued Tie Composition {.smaller}

```{r}
data()
load("Zachary_KarateClub.Rdata")
Zachary_KarateClub$Strength %>% 
  graph_from_adjacency_matrix(mode = "undirected",
                              weighted = TRUE) %>% 
  create_summary_table()
```

```{r fig.width = 8, fig.height = 8, echo = T}
g <- Zachary_KarateClub$Strength %>% 
  graph_from_adjacency_matrix(mode = "undirected", weight = TRUE)

Zachary_KarateClub$Strength %>% 
  graph_from_adjacency_matrix(mode = "undirected", weight = TRUE) %>% 
  plot(
    edge.width = E(.)$weight > 4
    )
```

## 3. Valued Tie Composition {.smaller}

```{r echo = T}
## strength dataset
valued_g <- Zachary_KarateClub$Strength %>% 
  graph_from_adjacency_matrix(mode = "undirected", weight = TRUE)

create_summary_table(g)
```

## 3. Valued Tie Composition {.smaller}

```{r fig.width=8, fig.height=6, echo = T}
a26_g <- valued_g %>% make_ego_graph(order = 1, nodes = "A26")
a26_g[[1]] %>% 
  plot(
    edge.width = E(a26_g[[1]])$weight,
  )
```

```{r echo = T}
create_summary_table(valued_g) %>% 
  pivot_longer(cols = -Node, names_to = "type", values_to = "value") %>%
  ggplot(aes(x=value, y=0))+
  geom_boxplot(outlier.alpha = 0)+
  geom_jitter(height = 0.1, aes(col = factor(ifelse(Node == "A26",1,0))))+
  facet_wrap(~type, scales = "free")+
  theme(legend.position = "none")
```

## 3. Valued Tie Composition {.smaller}

```{r fig.width=8, fig.height=6}
a34_g <- valued_g %>% make_ego_graph(order = 1, nodes = "A34")
a34_g[[1]] %>% 
  plot(
    edge.width = E(a34_g[[1]])$weight,
  )
```

```{r}
create_summary_table(valued_g) %>% 
  pivot_longer(cols = -Node, names_to = "type", values_to = "value") %>%
  ggplot(aes(x=value, y=0))+
  geom_boxplot(outlier.alpha = 0)+
  geom_jitter(height = 0.1, aes(col = factor(ifelse(Node == "A34",1,0))))+
  facet_wrap(~type, scales = "free")+
  theme(legend.position = "none")
```

## 4. Alter Composition {.smaller}

ตัวชี้วัดกลุ่มนี้มีวัตถุประสงค์เพื่อทำความเข้าใจว่า ego แต่ละตัวมีการเชื่อมโยง/สัมพันธ์กับ alters ประเภทไหนบ้าง

-   categorical attributes

-   continuous attributes

### categorical attributes

ตัวอย่างเครือข่ายความเป็นเพื่อนในบริษัท เรามีวัตถุประสงค์ต้องการวิเคราะห์ว่า ego แต่ละคนมีเพื่อนอยู่ในแผนกใดบ้างของบริษัท

```{r}
load("Krackhardt_HighTech.Rdata")
## Attribute
attr <- Krackhardt_HighTech$Attributes
ego_data <- attr %>% 
  rownames_to_column("ego") %>% 
  select(ego, Department)

## network data
Krackhardt_HighTech$Friendship %>% 
   data.frame() %>% 
   rownames_to_column("ego") %>% 
   pivot_longer(cols = -ego, names_to = "alter", values_to = "tie") %>% 
   ## department ของ ego
    left_join(ego_data, by = "ego") %>% 
    rename(department_ego = 4) %>% 
   ## department ของ alter
   left_join(ego_data, by = join_by("alter" == "ego")) %>% 
    rename(department_alter = 5) %>% 
  filter(ego != alter) %>% 
  group_by(ego, department_ego, department_alter) %>% 
  reframe(freq = sum(tie)) %>% 
 # ungroup() %>% 
  group_by(ego, department_ego) %>% 
  mutate(prop = freq/sum(freq)) %>% 
  mutate(IQV = (1 - sum(prop^2)) / (1 - 1/n())) %>% 
  pivot_wider(names_from = department_alter, values_from = c(freq,prop), values_fill = 0)
```

### continuous attribute

แนวทางข้างต้นสามารถนำมาใช้กับ attribute แบบต่อเนื่องได้ เช่น ระยะเวลาทำงานในองค์กร (tenue)

-   จำนวนระยะเวลาทำงานโดยเฉลี่ยของ alter (เพื่อนร่วมงาน) ของแต่ละ ego \<--- ระยะเวลาทำงานของ alter สะท้อนแหล่งทรัพยากร/ระดับความเชี่ยวชาญของผู้เชี่ยวชาญที่ ego สามารถเข้าถึงได้

```{r}
ego_data2 <- attr %>% 
  rownames_to_column("ego") %>% 
  select(ego, Tenure)


Krackhardt_HighTech$Friendship %>% 
   data.frame() %>% 
   rownames_to_column("ego") %>% 
   pivot_longer(cols = -ego, names_to = "alter", values_to = "tie") %>% 
  left_join(ego_data2, by = join_by("alter"=="ego")) %>% 
  filter(ego != alter,
         tie > 0) %>% 
  group_by(ego) %>%
  summarise(num_friend = sum(tie),
            sum_tenure = sum(Tenure, na.rm = T),
            mean_tenure = mean(Tenure, na.rm = T),
            sd_tenure = sd(Tenure, na.rm = T),
            min_tenure = min(Tenure, na.rm = T),
            max_tenure = max(Tenure, na.rm = T),
            range_tenure = max(Tenure, na.rm = T)-min(Tenure, na.rm = T))

```

## 5. Ego-alter similarity {.smaller}

วัดความคล้ายคลึงระหว่าง ego กับ alter ในเชิงของคุณลักษณะที่สนใจ เช่น การวิเคราะห์ความคล้ายในเชิงของข้อมูลภูมิหลัง บุคลิกภาพ ทัศนคติ พฤติกรรม หรือผลการเรียน จุดที่แตกต่างกันระหว่างการวิเคราะห์ประเภทนี้กับการวิเคราะห์ที่ผ่านมาคือ การวิเคราะห์ความคล้ายคลึงจะต้องใช้ข้อมูลคุณลักษณะของทั้ง ego กับ alter มาวิเคราะห์ร่วมกััน

กระบวนการเชิงสังคมที่ทำให้เกิดความคล้ายคลึงระหว่าง ego กับ alter อาจเกิดจากสองกระบวนการหลัก ได้แก่ 

- Social selection : หมายถึงกระบวนการที่ ego เลือกสร้างความสัมพันธ์กับ alter ที่มีลักษณะคล้ายตัวเอง เช่น เพศ เชื้อชาติ ระดับการศึกษา ศาสนา หรืออื่น ๆ ปรากฏการณ์นี้เรียกว่า homophily (การคบหาคนที่เหมือนตนเอง)

- Social influence : หมายถึงกระบวนการที่ ego และ alters มีแนวโน้มที่จะปรับเปลี่ยนพฤติกรรม หรือคุณลักษณะต่าง ๆ ให้คล้ายคลึงกันมากขึ้นเมื่ออยู่ร่วมกันไปนาน ๆ เช่น แฟนกันมักมีพฤติกรรมที่คล้ายกันมากขึ้นเมื่ออยู่ร่วมกันไปนาน ๆ หรือเพื่อนร่วมห้องเรียนเดียวกันที่อาจมีพฤติกรรมบางประการที่เปลี่ยนให้เหมือนกัน

ในทำนองเดียวกับการวิเคราะห์ส่วนอื่น ความคล้ายคลึงดังกล่าวจำแนกการวิเคราะห์ตามประเภทของข้อมูลดังนี้

-   Categorical attributes

-   Continuous attributes


## 5.1 categorical attributes {.smaller}

มีหลายตัวชี้วัดความคล้ายคลึงระหว่าง ego กับ alter ในเชิงของตัวแปรจัดประเภท ได้แก่

-   จำนวนเพื่อนร่วมงานที่อยู่ใน department เดียวกับ ego (a)

-   จำนวนเพื่อนร่วมงานที่อยู่คนละ department กับ ego (b)

-   จำนวนคนที่ไม่ใช่เพื่อนร่วมงานแต่อยู่ department เดียวกับ ego (c)

-   จำนวนคนที่ไม่ใช่เพื่อนร่วมงานแต่อยู่คนละ department กับ ego (d)

-   สัดส่วน alter ที่อยู่ในกลุ่มเดียวกับ ego (proportion same: S measure)

-   EI index

-   Odds ratio & Log odds ratio

-   Yule's Q

```{r echo = T}
## จำนวนเพื่อนร่วมงานแต่ละรูปแบบ
Krackhardt_HighTech$Friendship %>%
  data.frame() %>%
  rownames_to_column("ego") %>%
  pivot_longer(cols= -ego, names_to = "alter", values_to = "tie") |> 
  left_join(y = ego_data, by = "ego") |> 
  rename(department_ego = 4) |> 
  left_join(y = ego_data, by = join_by("alter" == "ego")) |> 
  rename(department_alter = 5) |> 
  filter(ego != alter) |> 
  group_by(ego,tie,department_ego, department_alter) |> count() |> 
  mutate(type = case_when(
    tie >0 & department_ego == department_alter ~ "a",
    tie >0 & department_ego != department_alter ~ "b",
    tie  == 0 & department_ego == department_alter ~ "c",
    tie == 0 & department_ego != department_alter ~ "d",
  ))
```

## 5.1 categorical attributes {.smaller}


- สัดส่วนความคล้าย (proportion same: S)

$$
S = \frac{ego \cap alter}{Total}
$$


- E-I Index (Krackhardt & Stern, 1988) เป็นตัวชี้วัดที่ตรงข้ามกับ homophily โดยค่าที่มากขึ้นหมายถึง heterophily สูงขึ้น

$$
EI = \frac{E-I}{E+I}
$$

โดยที่ E = จำนวน ties ไปยัง alters ที่อยู่ต่างกลุ่มกับ ego (external ties) และI = จำนวน ties ไปยัง alters ที่อยู่ในกลุ่มเดียวกับ ego (internal ties)


ดังนั้นถ้า EI = -1 หมายถึง ego มีความสัมพันธ์กับ alter ที่เหมือนกับตัวเอง 100%, EI = 0 หมายถึง ego มีความสัมพันธ์กับ alter ที่สมดุลระหว่างคนที่เหมือนกับแตกต่างกับตนเอง ส่วน EI = 1 หมายถึง ego มีความสัมพันธ์กับ alter ที่แตกต่างกับตนเอง


## 5.1 categorical attributes {.smaller}

สมมุติว่าวัตถุประสงค์คือการวัดความคล้ายคลึงระหว่าง ego กับ alter ในเชิงของแผนกงานที่ทำงาน การคำนวณค่าสัดส่วนความคล้ายสามารถดำเนินการได้ง่าย ๆ ดังนี้ การคำนวณดัชนีต่าง ๆ สามารถทำได้ผ่าน `KruRooSocNet` ดังนี้

```{r echo = T}
analyze_categorical_similarity(
    adj_matrix = Krackhardt_HighTech$Friendship,
  node_attributes = ego_data,
  category_col = "Department"
) |> glimpse()
```



## Realized Homophily = Availability + Preference Homophily {.smaller}

- Availability Homophily = ความคล้ายคลึงระหว่าง ego กับ alters ที่เกิดขึ้นจากโครงสร้างของเครือข่าย (โอกาสในธรรมชาติ) ไม่ได้เกิดขึ้นจากการเลือกของ ego แต่เกิดขึ้นจากสัดส่วนของประชากรที่มีอยู่ในเครือข่าย

- Preference Homophily = ระดับของ Ego-Alter Similarity ที่เกิดขึ้นจาก ความชอบส่วนตัวของ Ego ในการเลือก Alters


ปัญหาคือเราจะสามารถวัด Preference Homophily ได้อย่างไร เพราะในความเป็นจริง Availability Homophily อาจเป็นตัวแปรแทรกซ้อนที่ทำให้ไม่สามารถสังเกต Preference Homophily ได้อย่างถูกต้อง

- เปรียบเทียบความถี่ประเภท alter: a, b, c และ d กับ expected frequency ทางทฤษฎี --> เทียบเท่ากับการทำ contingency table ระหว่างการเป็นเพื่อนกัน กับ การเป็นบุคคลประเภทเดียวกัน

- เปรียบเทียบอัตราส่วนการเป็นเพื่อนกับบุคคลประเภทหนึ่ง กับ อัตราส่วนการไม่เป็นเพื่อนกับบุคคลประเภทนั้น --> [a/b]/[c/d] ค่านี้เรียกว่า Odd Ratio

## Odd Ratio {.smaller}


$$
OR = \frac{a/b}{c/d} = \frac{a \times d}{b \times c}
$$

-   จำนวนเพื่อนร่วมงานที่อยู่ใน department เดียวกับ ego (a)

-   จำนวนเพื่อนร่วมงานที่อยู่คนละ department กับ ego (b)

-   จำนวนคนที่ไม่ใช่เพื่อนร่วมงานแต่อยู่ department เดียวกับ ego (c)

-   จำนวนคนที่ไม่ใช่เพื่อนร่วมงานแต่อยู่คนละ department กับ ego (d)

การแปลความหมาย

- OR = 1 แปลว่าไม่มีความสัมพันธ์ระหว่างการเป็นเพื่อนกันในเครือข่ายกับการมีคุณลักษณะเดียวกันในเครือข่าย

- OR > 1 แสดงว่า ego มีแนวโน้มเลือก alter ที่มีคุณลักษณะเหมือนกับตัวเอง

- 0 < OR < 1 แสดงว่า ego มีแนวโน้มเลือก alter ที่มีคุณลักษณะแตกต่างจากตัวเอง

```{r}
analyze_categorical_similarity(
    adj_matrix = Krackhardt_HighTech$Friendship,
  node_attributes = ego_data,
  category_col = "Department"
) 
```

## Yule's Q coefficient {.smaller}

$$
Q = \frac{ad-bc}{ad+bc}
$$


- Q = 1 หมายความว่า ego มีความสัมพันธ์กับ alter ที่มีคุณลักษณะเฉพาะเหมือนกับตนเอง

- Q = 0 หมายความว่า ego มีแนวโน้มที่จะมีความสัมพันธ์กับ alter อย่างสมดุล ระหว่าง alter ที่มีคุณลักษณะเหมือนและแตกต่างกับ ego

- Q = -1 ....

```{r echo = T}
analyze_categorical_similarity(
    adj_matrix = Krackhardt_HighTech$Friendship,
  node_attributes = ego_data,
  category_col = "Department"
) |> 
select(node, 11)
```

## Yule's Q coefficient {.smaller}


ลองพิจารณาเปรียบเทียบความคล้ายขอ A03  กับ alter และ  A08 กับ alter

```{r echo = T}
analyze_categorical_similarity(
    adj_matrix = Krackhardt_HighTech$Friendship,
  node_attributes = ego_data,
  category_col = "Department") |> 
  filter(node %in% c("A03", "A08")) %>% 
  select(node, a, b, c, d,11)
```

```{r fig.width=8, fig.height=6, eval = F}
full_g <- Krackhardt_HighTech$Friendship |> graph_from_adjacency_matrix(mode = "directed")
V(full_g)$department <- ego_data$Department
a03 <- subgraph_from_edges(full_g, 
                           E(full_g)[.from("A03")])
add_a03 <- setdiff(V(full_g), V(a03))
a03 <- add_vertices(a03, nv = length(add_a03), 
                    name = paste0("A", add_a03),
                    attr = list(department = V(full_g)$department[add_a03]))

a08 <- subgraph_from_edges(full_g, 
                           E(full_g)[.from("A08")])
add_a08 <- setdiff(V(full_g), V(a08))
a08 <- add_vertices(a08, nv = length(add_a08), 
                    name = paste0("A", add_a08),
                    attr = list(department = V(full_g)$department[add_a08]))

par(mfrow=c(1,2), mar=c(0,0,0,0))
plot(a03,
edge.arrow.size = 0.1,
edge.arrow.width =0.1,
vertex.color = ifelse(V(a03)$department == V(a03)$department[1], 
                      "steelblue","maroon")
)
plot(a08,
edge.arrow.size = 0.1,
edge.arrow.width =0.1,
vertex.color = ifelse(V(a08)$department == V(a03)$department[1], 
                      "steelblue","maroon")
)
```

## Ego & Alter Similarity {.smaller}

:::: {.columns}

::: {.column width="50%"}

```{r fig.width=6, fig.height=6, echo = F}
full_g <- Krackhardt_HighTech$Friendship |> graph_from_adjacency_matrix(mode = "directed")
V(full_g)$department <- ego_data$Department
a03 <- subgraph_from_edges(full_g, 
                           E(full_g)[.from("A03")])
add_a03 <- setdiff(V(full_g), V(a03))
a03 <- add_vertices(a03, nv = length(add_a03), 
                    name = paste0("A", add_a03),
                    attr = list(department = V(full_g)$department[add_a03]))

a08 <- subgraph_from_edges(full_g, 
                           E(full_g)[.from("A08")])
add_a08 <- setdiff(V(full_g), V(a08))
a08 <- add_vertices(a08, nv = length(add_a08), 
                    name = paste0("A", add_a08),
                    attr = list(department = V(full_g)$department[add_a08]))

par(mar=c(0,1,1,0))
plot(a03,
edge.arrow.size = 0.1,
edge.arrow.width =0.1,
vertex.color = ifelse(V(a03)$department == V(a03)$department[1], 
                      "steelblue","maroon"),
main = "S = 1, EI = -1, OR = Inf, Yule = 1"
)
```

:::

::: {.column width="50%"}
```{r fig.width=6, fig.height=6}
par(mar=c(0,1,1,0))
plot(a08,
edge.arrow.size = 0.1,
edge.arrow.width =0.1,
vertex.color = ifelse(V(a08)$department == V(a08)$department[2], 
                      "steelblue","maroon"),
main = "S = 0, EI = 1, OR = 0, Yule = 1"
)
```

:::

::::


## Ego & Alter Similarity {.smaller}

```{r fig.width=6, fig.height=6}

a06 <- subgraph_from_edges(full_g, 
                           E(full_g)[.from("A06")])
add_a06 <- setdiff(V(full_g), V(a06))
a06 <- add_vertices(a06, nv = length(add_a06), 
                    name = paste0("A", add_a06),
                    attr = list(department = V(full_g)$department[add_a06]))
par(mar=c(0,1,1,0))
plot(a06,
edge.arrow.size = 0.1,
edge.arrow.width =0.1,
vertex.color = ifelse(V(a06)$department == V(a06)$department[2], 
                      "steelblue","maroon"),
main = "S = 0.5, EI = 0, OR = 13, Yule = 0.86"
)
```

## 5.2 continuous attributes {.smaller}

เราสามารถใช้แนวทางที่คล้ายกับการวัด Ego-Alter Similarity สำหรับตัวแปรเชิงหมวดหมู่ (Categorical) มาประยุกต์ใช้กับตัวแปรเชิงต่อเนื่อง (Continuous) เช่น อายุ หรือประสบการณ์ทำงาน

- ค่า absolute difference ระหว่างคุณลักษณะของ ego กับ alter แนวคิดนี้คล้าย ๆ S measure ใน categorical attribute โดยค่าเท่ากับ 0 หมายถึงไม่มีความแตกต่างระหว่าง ego กับ alter ในคุณลักษณะนั้น

- ปัญหาของการวัดด้วยวิธีการนี้ัคือเป็นการเปรียบเทียบความแตกต่างระหว่าง ego กับ alter แต่ละคู่ตรง ๆ แต่ไม่ได้พิจารณาแนวโน้มโดยรวมของเครือข่ายว่ามีการแจกแจงอย่างไร ดังนั้นความแตกต่างระหว่าง ego กับ alter ที่มีคุณลักษณะที่พิจารณาต่ำสุดและสูงสุดของกลุ่ม ก็จะมีค่า absolute difference สูงเสมอ

## 5.2 continuous attributes {.smaller}

- วิธีการที่น่าจะปลอดภัยกว่าในการวัดความคล้ายคลึงระหว่าง ego กับ alter ในเชิงของคุณลักษณะที่เป็นเชิงปริมาณคือการพิจารณาทั้งกลุ่มที่ ego เลือกเป็นเพื่อน และกลุ่มที่ ego ไม่ได้เลือกเป็นเพื่อน ขั้นตอนวิธีมีดังนี้

- สร้างคะแนนตัวชี้วัดความแตกต่างระหว่าง ego กับ โหนดอื่น ๆ ซึ่งมีทั้งเพื่อนและไม่ใช่เพื่อนในเครือข่ายของ ego

  - absolute difference
  
  - squared difference
  
  - $I_{ij} = 1-\frac{|X_i-X_j|}{max(X)-min(X)}$ <-- ความหมายจะเป็นความคล้ายคลึงแทน

  
- จัดการข้อมูลออกเป็น 2 คอลัมน์ คอลัมน์แรกเป็นคะแนนตัวชี้วัด และคอลัมน์ที่สองเป็นสถานะของ tie ระหว่าง ego และ alter น้ัน ๆ

- คำนวณ correlation ระหว่างตัวแปรทั้งสอง (เราเรียก correlation นี้ว่า point-biserial correlation)

การแปลผลวิธีการนี้จะคล้ายกับ EI Index ถ้า correlation มีค่าเป็นบวกมาก แสดงว่ามีความสัมพันธ์ระหว่างการเป็นเพื่อนกับความแตกต่าง/ความคล้ายของคุณลักษณะที่พิจารณา แสดงว่า ego มีแนวโน้มเลือกคบเพื่อนที่มีคุณลักษณะที่แตกต่างจากตนเอง (heterophily)

## 5.2 continuous attributes {.smaller}

การคำนวณค่าดัชนีดังกล่าวทำได้ค่อนข้างยากหากเขียน script เอง ดังนั้นเราสามารถใช้ฟังก์ชันใน `KruRooSocNet` ช่วยได้

```{r}
analyze_continuous_similarity(
    adj_matrix = Krackhardt_HighTech$Friendship,
  node_attributes = attr %>% rownames_to_column("ego"),
  attribute_col = "Age"
) %>% 
  arrange(Node) %>% 
  glimpse()
```














