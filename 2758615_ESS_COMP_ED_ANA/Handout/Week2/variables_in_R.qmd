---
title: "Untitled"
format: html
---

#1. แนะนำ R

เนื้่อหาส่วนนี้อยู่ใน ppt หน้า

#2. ตัวแปรและข้อมูล

## ตัวแปร (variable)

คุณลักษณะของสิ่งต่างๆ ของคน องค์กร สัตว์ หรือสิ่งของ โดยที่คุณลักษณะดังกล่าวมีการเปลี่ยนแปลงค่าได้ไปตามหน่วยของสิ่งนั้น(เรียกว่า หน่วยข้อมูล)

-   ตัวแปรเชิงปริมาณ (quantitative variable) vs ตัวแปรจัดประเภท (categorical variable)

-   ตัวแปรตาม (dependent variable) vs ตัวแปรอิสระ (independent variable)

-   ตัวแปรต่อเนื่อง (continuous variable) vs ตัวแปรไม่ต่อเนื่อง (discrete variable)

## ข้อมูล (data)

ข้อเท็จจริงหรือค่าสังเกตุที่ถูกบันทึกหรือวัดค่าตามตัวแปรที่นักวิจัยกำหนด ซึ่งเป็นข้อเท็จจริงที่ได้นี้มาจากหน่วยตัวอย่างในการศึกษา อาจอยู่ในรูปตัวเลข ตัวอักษร ข้อความ สัญลักษณ์ต่างๆ โดยผลที่ได้จากการวัด (measurement) เรียกว่าค่าสังเกต (observations) ของตัวแปร

## กิจกรรม : แอปเปิ้ล มะละกอ กล้วย

ตะกร้าของขวัญใบหนึ่ง มีแอปเปิ้ลจํานวน 25 ผล มะละกอ จํานวน 47 ผล กล้วยจํานวน 18 ลูก และส้มอีกจํานวนหนึ่ง ถ้าตะกร้านี้มีผลไม้ รวมกันทั้งหมด 126 ลูก จงหาว่าตะกร้าของขวัญนี้

1.  มีจำนวนแอปเปิ้ล กล้วย ส้ม รวมกันกี่ผล
2.  ถ้าตะกร้าใบที่2มี แอปเปิ้ล มะละกอ กล้วย ส้ม จำนวน 14 , 27, 8 และ 12 ผล ตามลำดับ จงหาว่ารวม 2 ตะกร้ามีผลไม้แต่ละชนิดเท่าไรบ้าง
3.  ถ้าแบ่งผลไม้จากตะกร้าที่ 1 อย่างละ 5 ผลมาใส่ตะกร้าที่2 จะมีผลไม้แต่ละชนิดเท่าไรในแต่ละตะกร้า

# 3. ตัวแปรใน R

## ตัวแปรใน R

เป็นวัตถุประเภทหนึ่งภายใต้สภาพแวดล้อมของ R ทำหน้าที่

-   **เก็บข้อมูล**ที่ผู้วิเคราะห์นำเข้าสู่โปรแกรม

-   **เก็บผลลัพธ์**ที่ได้จากการประมวลผลของโปรแกรม

การเก็บค่าไว้ในตัวแปรทำให้ผู้วิเคราะห์สามารถเรียกดูหรือนำผลลัพธ์ไปใช้ต่อได้ โดยที่ไม่จำเป็นต้องป้อนข้อมูลหรือประมวลผลใหม่

```{r}
x <- 10 #assign 10 to x (x is a variable)
y <- 15 #assign 15 to y (y is a variable)
z <- x+y #assign x+y to z (z also a variable)
z/5
```

## ข้อ 1 : มีจำนวนแอปเปิ้ล กล้วย ส้ม รวมกันกี่ผล

```{r}
apple <- 25 # number of apple
papaya <- 47 # number of papaya
banana <- 18 # number of banana
total <- 126
# number of orange
orange <- total - (apple+papaya+banana)
# calculate answer
answer <- apple + banana + orange 
# printout
paste("Apple + Banana + Orange =", answer) 
```

## ข้อ 2 : ถ้าตะกร้าใบที่ 2 มี แอปเปิ้ล มะละกอ กล้วย ส้ม จำนวน 14 , 27, 8 และ 12 ผล ตามลำดับ จงหาว่ารวม 2 ตะกร้ามีผลไม้แต่ละชนิดเท่าไรบ้าง

```{r}
apple2 <- 14
papaya2 <- 28
banana2 <- 8
orange2 <- 12
total2 <- apple2 + papaya2 + banana2 + orange2 
paste("Grand Total = ", total + total2)
```

## ข้อ 3 ถ้าแบ่งผลไม้จากตะกร้าที่ 1 อย่างละ 5 ผลมาใส่ตะกร้าที่2 จะมีผลไม้แต่ละชนิดเท่าไรในแต่ละตะกร้า

## ประเภทของตัวแปรใน R (1)

ตัวแปรใน R สามารถจำแนกได้หลายประเภท ขึ้นอยู่กับเกณฑ์การพิจารณา

**จำแนกตามลักษณะของข้อมูลในตัวแปร**

-   ตัวแปรตัวเลข (numeric variable)

-   ตัวแปรตัวอักษร (character/string variable)

-   ตัวแปรตรรกะ (logical variable)

## ตัวแปรตัวเลข (numeric variables)

ตัวแปรตัวเลข คือ ตัวแปรที่ข้อมูลที่จัดเก็บภายในตัวแปรเป็นตัวเลขจำนวนจริง ตัวแปรประเภทนี้สามารถนำไปดำเนินการทางคณิตศาสตร์ได้

```{r}
science <- 45
age <- 20
income <- 15000
science;age;income
class(science)
class(income)
```

## ตัวแปรตัวอักษร (character variables)

การเก็บค่าข้อมูลประเภทตัวอักษรไว้ในตัวแปรจะต้องเขียนสัญลักษณ์ `" "` (อ่านว่า quotation) คร่อมข้อมูลตัวอักษรด้วย

```{r}
gender1 <- "FEMALE"
gender2 <- "MALE"
gender1
class(gender1)
```

## ตัวแปรตรรกะ

เป็นตัวแปรที่ข้อมูลภายในตัวแปรเป็นค่าความจริงของประพจน์ โดยปกติตัวแปรประเภทนี้มักเป็นผลลัพธ์ที่เกิดขึ้นจากการตรวจสอบเงื่อนไข

```{r}
result1<-science>55 # Is science score greater than 55?
result1
class(result1)
```

```{r}
result2<-age == 20 #Is age is equal to 20 year?
result2
```

```{r}
result3<-FALSE
result3
class(result3)
```

## ประเภทของตัวแปรใน R (2)

**จำแนกตามโครงสร้างการจัดเก็บข้อมูล**

-   สเกลาร์ (scalars)

-   เวกเตอร์ (vectors)

-   เมทริกซ์ (matrices)

-   อาร์เรย์ (arrays or tensors)

-   ชุดข้อมูล (dataframes)

-   Tibbles

-   อื่น ๆ อีกมากมาย

# 4. เวกเตอร์

## เวกเตอร์ (vectors)

-   เป็นตัวแปรที่มีโครงสร้างสำหรับจัดเก็บข้อมูลคล้ายกับตารางที่มีจำนวน 1 คอลัมน์

-   หากกำหนดให้ $u$ เป็นเวกเตอร์ที่เก็บข้อมูลส่วนสูงของนักเรียน 4 คน ที่มีค่าเท่ากับ 170, 175, 166 และ 168 cm.

-   ในทางคณิตศาสตร์สามารถเขียนสัญลักษณ์แทนเวกเตอร์ $u$ ได้ดังนี้

$$
u = \begin{pmatrix}
170 \\ 
175 \\ 
166\\ 
168 \\ 
\end{pmatrix}
$$

## การสร้างตัวแปรเวกเตอร์ใน R

การสร้างเวกเตอร์เพื่อเก็บข้อมูลในโปรแกรม R สามารถทําได้โดยง่ายด้วยฟังก์ชัน `c()` (เรียกว่า ฟังก์ชัน concatenate) ดังนี้

```{r}
score <- c(53,69,52,62,57,54,55,67,53,58)
score
length(score) # length of vector score
```

## การอ้างอิงสมาชิกภายในเวกเตอร์

    vectorname[i]

โดยที่ `i` คือลำดับของสมาชิกที่ต้องการ การกำหนด `i` สามารถทำได้หลายลักษณะดังนี้

```{r}
score [2]
score [4:6]
score [c(1,3,5,7,8:10)]
```

## การแก้ไข/เปลี่ยนแปลงข้อมูลในเวกเตอร์

สมมุติว่ามีการบันทึกข้อมูลคะแนนของนักเรียนคนที่ 5 ผิดไป โดยต้องแก้ไขเป็น 60 คะแนน

```{r}
score[5] <- 60
score
```

เราสามารถแก้ไขข้อมูลหลายค่าพร้อมกันได้ในคำสั่งเดียว ดังนี้

```{r}
score[c(1,2,4,8)]<-c(55,65,70,95)
score
```

## ประเภทของเวกเตอร์

เวกเตอร์ใน R ยังจำแนกได้อีก 3 ประเภทตามลักษณะของข้อมูลภายในเวกเตอร์

-   เวกเตอร์ตัวเลข (numeric vector) : เวกเตอร์ที่มีสมาชิกเป็นตัวเลข

-   เวกเตอร์ตัวอักษร (character vector) : เวกเตอร์ที่มีสมาชิกเป็นตัวอักษร

-   เวกเตอร์ตรรกะ (logical vector) : เวกเตอร์ที่มีสมาชิกเป็นค่าความจริง

## ตัวอย่างเวกเตอร์ตัวอักษร

```{r}
# create string vector of gender
gender <- c("M","F","M","M","M","F","M","F","F","M")
# print gender
gender
# class of gender
class(gender)
```

## ตัวอย่างเวกเตอร์ตรรกะ

```{r}
# create logical vector from score
result <- score >=55
# print result
result
# class of gender
class(result)
```

## การดำเนินการระหว่างเวกเตอร์

-   **การดำเนินการระหว่างเวกเตอร์กับสเกลาร์** เป็นการนำสเกลาร์ที่กำหนดไปดำเนินการ (เช่น บวก ลบ คูณ หาร) กับสมาชิกทุกตัวภายในเวกเตอร์

<!-- -->

-   **การดำเนินการระหว่างเวกเตอร์กับเวกเตอร์** การบวก ลบ คูณ หาร ระหว่างเวกเตอร์​ 2 ตัวแบบทั่วไป มีเงื่อนไขคือสมาชิกของเวกเตอร์ทั้งสองต้องเท่ากัน และการดำเนินการดังกล่าวจะเป็นการนำสมาชิกที่อยู่ในตำแหน่งเดียวกันของเวกเตอร์ทั้งสอง มาดำเนินการตามที่กำหนด

## การดำเนินการระหว่างเวกเตอร์กับสเกลาร์

```{r}
height <- c(170,150,160,165,180)
height+5
height-10
height*2
```

## การดำเนินการระหว่างเวกเตอร์กับเวกเตอร์

ตารางด้านล่างแสดงคะแนนสอบของนักเรียน 5 คน หากการรวมคะแนนทั้งสองจะต้องมีการถ่วงน้ำหนัก ขอให้ผู้เรียนหาคะแนนรวมของนักเรียนแต่ละคน

| คะแนนสอบกลางภาค (40%) | คะแนนสอบปลายภาค (60%) | คะแนนรวม |
|:---------------------:|:---------------------:|:--------:|
|          35           |          77           |          |
|          50           |          40           |          |
|          40           |          90           |          |
|          70           |          45           |          |
|          88           |          80           |          |

# 5. เมทริกซ์

## เมทริกซ์ (matrices)

-   เมทริกซ์เป็นกรณีทั่วไปของเวกเตอร์ เพราะมีลักษณะเป็นการรวมกลุ่มของเวกเตอร์หลาย ๆ ตัว เข้าไว้ด้วยกัน

-   เมทริกซ์เป็นตัวแปรที่ใช้สำหรับเก็บข้อมูลอีกประเภทหนึ่ง มีลักษณะโครงการเป็นตารางแบบ 2 มิติ ดังตัวอย่างในรูป

## การสร้างเมทริกซ์ (1)

การสร้างเมทริกซ์สามารถทําได้หลายวิธีการ วิธีการหนึ่งคือ การใช้ฟังก์ชัน `cbind()` ที่มีหน้าที่รวมเวกเตอร์หลายเวกเตอร์เข้าด้วยกันโดยเชื่อมต่อเวกเตอร์ดังกล่าวตามคอลัมน์ดังนี้

```{r}
thai <- c(87,72,68,78,81,92)
math <- c(72,63,65,74,89,91)
#create matrix using cbind function
score_matrix <- cbind(thai, math)
# print score matrix
score_matrix
```

## การสร้างเมทริกซ์​ (2)

อีกวิธีการหนึ่งคือ การใช้ฟังก์ชัน `rbind()` ที่มีหน้าที่รวมเวกเตอร์โดยเชื่อมต่อเวกเตอร์ดังกล่าวตามแถว

## มิติของเมทริกซ์

การระบุมิติของเมทริกซ์จะใช้ตัวเลขสองตัวที่เขียนในรูปแบบ m x n โดยที่ เลขตัวแรก m ใช้แทนจำนวนแถว (row) และเลขตัวที่สอง n ใช้แทนจำนวนคอลัมส์ (column)

```{r}
dim(score_matrix)
```

## **กิจกรรม : การสร้างเมทริกซ์** (1)

ขอให้ผู้เรียนลองสร้างเมทริกซ์เพื่อเก็บข้อมูลจำนวนนักเรียน และระดับการมีปฏิสัมพันธ์ของนักเรียนในห้องเรียน

```{r}
student <- c(0,7,6,20,3,8,15) # import number of student
interaction <- c(0,0,3,5,5,4,5) # import interaction level
```

```{r echo=F}
m <- cbind(student, interaction)
m
```

## การอ้างอิงสมาชิกในเมทริกซ์

## กิจกรรม : การอ้างอิงสมาชิกในเมทริกซ์

1.  จงเรียกดูข้อมูลจำนวนนักเรียนของห้องเรียนที่ 5
2.  จงเรียกดูข้อมูลระดับการมีปฏิสัมพันธ์ของนักเรียนห้องเรียนที่ 3
3.  จงเรียกดูข้อมูลของห้องเรียนที่ 7
4.  จงเรียกดูข้อมูลของห้องเรียนที่ 1 ถึง 4
5.  จงเรียกดูข้อมูลของห้องเรียนที่ 1, 3, 4 และ 7
6.  จงเรียกดูข้อมูลระดับการมีปฏิสัมพันธ์ของทุกห้องเรียน
7.  จงเรียกดูข้อมูลระดับการมีปฏิสัมพันธ์ของห้องเรียนที่ 1 ถึง 4

## กิจกรรม : สรุปเมทริกซ์

ตารางแสดงน้ำหนักและส่วนสูงของนักเรียน[^1]

[^1]: ที่มา : สิวะโชติ ศรีสุทธิยากร (2564)

| นักเรียน |  เพศ   | อายุ (ปี) | น้ำหนัก (กิโลกรัม) | ส่วนสูง (เซนติเมตร) |
|:------:|:------:|:-------:|:--------------:|:----------------:|
|   1    |  Male  |   10    |       59       |       142        |
|   2    | Female |   10    |       35       |       135        |
|   3    |  Male  |   11    |       75       |       150        |
|   4    |  Male  |    2    |       20       |        95        |
|   5    | Female |    9    |       63       |       141        |
|   6    |  Male  |    4    |       23       |       108        |
|   7    |  Male  |   10    |       47       |       142        |
|   8    | Female |   14    |       59       |       155        |

## กิจกรรม : สรุปเมทริกซ์

1.  สร้างเวกเตอร์ 4 ตัวจากข้อมูลของตัวแปร เพศ อายุ น้ำหนัก และส่วนสูง

2.  ตรวจสอบสถานะของข้อมูลในเวกเตอร์แต่ละตัวด้วยฟังก์ชัน `class()`

3.  สร้างเมทริกซ์ชื่อ `data` จากการรวมตัวแปรเวกเตอร์ทั้ง 4 ตัวเข้าด้วยกัน

```{r echo=F}
gender <- c("Male","Female","Male","Male","Female","Male","Male","Female")
age <- c(10,10,11,2,9,4,10,14)
weight<-c(59,35,75,20,63,23,47,59)
height<-c(142,35,150,95,141,108,142,155)
cbind(gender,age,weight,height)
```

## กิจกรรม : สรุปเมทริกซ์

4.  เพิ่มข้อมูลของนักเรียนคนที่ 9 เข้าสู่เมทริกซ์ `data` โดยข้อมูลของนักเรียนคนที่ 9 เป็นดังนี้

| นักเรียน |  เพศ   | อายุ (ปี) | น้ำหนัก (กิโลกรัม) | ส่วนสูง (เซนติเมตร) |
|:------:|:------:|:-------:|:--------------:|:----------------:|
|   9    | Female |   25    |       64       |       168        |

5.  สร้างตัวแปรเวกเตอร์ใหม่ชื่อ bmi เพื่อคำนวณค่าดัชนีมวลกาย (body mass index: bmi) ตามสูตร $bmi = \frac{weight}{(height/100)^2}$ โดยให้ใช้ข้อมูลที่เก็บอยู่ในเมทริกซ์ `data`
6.  ผลที่ได้รับจากข้อ 5. เป็นอย่างไร และเหตุใดจึงได้ผลลัพธ์ในลักษณะดังกล่าว

## ข้อจำกัดของเมทริกซ์

-   เมทริกซ์ตัวแปรใน R ที่สามารถเก็บข้อมูลได้เพียงประเภทเดียวเท่านั้น

-   หากมีการใส่ข้อมูลที่สถานะแตกต่างกันเข้าไปในเมทริกซ์เดียวกัน โปรแกรม R จะพยายามแปลงสถานะของข้อมูลทั้งหมดให้เป็นข้อมูลประเภทเดียวกัน

# 6. List

-   List เป็นตัวแปรใน R อีกประเภทหนึ่ง มีโครงสร้างการเก็บข้อมูลในลักษณะที่เป็นลำดับคล้ายเวกเตอร์

-   สมาชิกภายใน list สามารถเป็นข้อมูลหรือตัวแปรประเภทใดก็ได้ และสามารถมีสถานะที่แตกต่างกันได้

## การสร้าง List

การสร้าง list สามารถทำได้โดยใช้ฟังก์ชัน `list()` โดยมีลักษณะการเขียนคำสั่งเหมือนกับฟังก์ชัน concatenate

```{r}
student <- c(0,7,6,20,3,8,15) # import number of student
interaction <- c(0,0,3,5,5,4,5) # import interaction level
mat <- cbind(student, interaction)
mylist <- list(3.234,
               "Male",
               "TRUE",c(10,11,10,2),
               mat)
```

ผู้เรียนลองเรียกดู `mylist` ผลลัพธ์ที่ได้เป็นอย่างไร

## การอ้างอิงสมาชิกภายใน List

-   การอ้างอิงสมาชิกภายใน list สามารถทำได้ในทำนองเดียวกับเวกเตอร์

-   ใช้การระบุลำดับของสมาชิกที่ต้องการจาก `[[i]]` เมื่อ `i` คือลำดับของสมาชิกภายใน list

```{r}
mylist[[1]]
mylist[[3]]
mylist[[5]]
```

## การอ้างอิงสมาชิกภายใน List

สำหรับสมาชิกของ list ที่มีโครงสร้างซับซ้อน เช่น เป็น เวกเตอร์ หรือเมทริกซ์ ภายใน list เราสามารถอ้างอิงสมาชิกภายในสมาชิกดังกล่าวได้โดยใช้คำสั่งลักษณะดังนี้

```{r}
mylist[[5]][1:3,]
mylist[[5]][,2]
```