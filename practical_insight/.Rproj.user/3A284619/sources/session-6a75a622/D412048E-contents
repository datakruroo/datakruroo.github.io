---
title: "5. Data Preprocessing"
subtitle: "<b>Practical Insight: Doing Data Science in Education with R</b>"
author: ผศ.ดร.สิวะโชติ ศรีสุทธิยากร
logo: "images/logo.png"
footer: "[Practical Insight: Doing Data Science in Education with R](https://datakruroo.netlify.app/practical_insight/_site/)"
format: 
  html:
    number-sections: true
  revealjs:
    output-file: preprocessing_slide.html
    theme: slides.scss
    multiplex: true
    transition: slide
    slide-number: true
    navigation-mode: vertical
    scrollable: true
    chalkboard: true
    menu: 
      numbers: true
    slide-tone: false
editor: visual
execute:
  freeze: auto
---

# Data Preprocessing

เป็นกระบวนการที่มีวัตถุประสงค์หลักคือเพื่อจัดกระทำหรือแปลงข้อมูลดิบที่เก็บรวบรวมมาจากแหล่งข้อมูลต่าง ๆ ให้อยู่ในรูปแบบที่พร้อมและมีคุณภาพเพียงพอสำหรับการนำไปวิเคราะห์

-   Exploring Data
-   Cleaning Data
-   Manipulating Data
-   Data Reduction

# Data Preprocessing

![ที่มา : Max Khun, & Kjell Johnson (2019)](images/image-27453011.png)

## `Tidyr` & `dplyr` package {.smaller}

[![](https://tidyr.tidyverse.org/logo.png){width="20%"}](https://tidyr.tidyverse.org/) [![](https://dplyr.tidyverse.org/logo.png){width="20%"}](https://dplyr.tidyverse.org/)

```{r eval=F, echo=T}
install.packages("tidyr")
install.packages("dplyr")
library(tidyr)
library(dplyr)
```

# Exploring Data

ใน R มีเครื่องมือพื้นฐานสำหรับสำรวจภาพรวมของข้อมูลหลายตัว

-   `head()` และ `tail()` - ใช้เรียกดูตารางข้อมูลส่วนหัว และส่วนท้าย

-   `glimpse()` หรือ `str()` ใช้สำรวจโครงสร้างโดยรวมของชุดข้อมูล

-   `summary()` ใช้สรุปค่าสถิติเบื้องต้นของชุดข้อมูล

-   `View()` ใช้เรียกดูชุดข้อมูลในหน้าต่างเฉพาะ

## กิจกรรม : Messy Data (Revisited)

จากชุดข้อมูล messydata.xlsx ขอให้ผู้เรียน

-   ทดลองใช้ฟังก์ชันพื้นฐานข้างต้น สำรวจชุดข้อมูลผลลัพธ์ที่ได้เป็นอย่างไร

-   ชุดข้อมูลที่นำเข้าจาก messydata.xlsx มีคุณสมบัติ tidy data หรือไม่ อย่างไร

-   ผู้เรียนคิดว่า tidy data ของชุดข้อมูล messydata.xlsx ควรมีหน้าตาเป็นอย่างไร

# Cleaning & Manipulating Data

-   Reshaping data

-   Joining data

-   Manipulating Columns

-   Manipulating Rows

-   Handling Missing Values

-   Outlier Detection & Treatment

-   Data Reduction

## Reshaping data {.smaller}

-   `gather()` หรือ `pivot_longer()` ใช้แปลงชุดข้อมูลให้อยู่ในรูปแบบ long format

-   `spread()` หรือ `pivot_wider()` ใช้แปลงชุดข้อมูลให้อยู่ในรูปแบบ wide format

-   `separate()` ใช้แยกข้อมูลในคอลัมน์เดียวเป็นหลายคอลัมน์

-   `unite()` ใช้รวมข้อมูลจากหลายคอลัมน์เป็นคอลัมน์เดียว

## long vs wide format {.smaller}

![](https://www.statology.org/wp-content/uploads/2021/12/wideLong1-1.png){width="70%"}

## Joining data {.smaller}

![](images/joining.png){width="50%"}

## Manipulating Columns {.smaller}

-   `select()` ใช้เลือกคอลัมน์ที่ต้องการ

-   `rename()` ใช้เปลี่ยนชื่อคอลัมน์

-   `mutate()` ใช้สร้างคอลัมน์ใหม่ที่คำนวณจากคอลัมน์ที่มีอยู่แล้ว

-   `arrange()` ใช้เรียงลำดับข้อมูลตามคอลัมน์ที่กำหนด

-   `summarise()` ใช้สรุปข้อมูลตามคอลัมน์ที่กำหนด

## Data Type Conversion {.smaller}

-   `as.numeric()` ใช้แปลงข้อมูลเป็นตัวเลข

-   `as.character()` ใช้แปลงข้อมูลเป็นตัวอักษร

-   `factor()` ใช้แปลงข้อมูลเป็นตัวแปรประเภท factor

## Manipulating Data with `dplyr` {.smaller}

<left>

![สิวะโชติ ศรีสุทธิยากร (2564)](images/manipulate.png){width="80%"}

</left>

## Manipulating Rows {.smaller}

-   `filter()` ใช้กรองข้อมูลตามเงื่อนไขที่กำหนด

-   `slice()` ใช้เลือกแถวตามลำดับที่กำหนด

-   `distinct()` ใช้เลือกแถวที่ไม่ซ้ำกัน

## piping operator (`%>%`) {.smaller}

ตัวดำเนินการ piping มีประโยชน์อย่างมากในการดำเนินงานที่มีหลายขั้นตอน ใช้สำหรับส่งผ่านข้อมูลทางซ้ายของตัวดำเนินการ ไปยังฟังก์ชันที่อยู่ทางด้านขวาของตัวดำเนินการเป็นลูกโซ่ต่อไปเรื่อย ๆ

![](images/piping.png){width="80%"}

# กิจกรรม : Tidying "Messy Data" {.smaller}

```{r eval=F}
messy_dat %>% 
    pivot_longer(cols = 2:5, 
                 names_to = "method_time", 
                 values_to = "score") %>%
    separate(col = "method_time",
             into = c("method","time"),
             sep="[.]") %>%
    pivot_wider(names_from = "time", 
                values_from = "score") %>%
    mutate(pre = ifelse(pre == "-",NA,pre),
           post = ifelse(post == "-",NA,post)) %>%
    drop_na() %>%
    rename(student_name = ...1)
```


# กิจกรรมสำรวจข้อมูล

1. จากชุดข้อมูล `tidy_dat` ที่ได้จากกิจกรรมก่อนหน้า จงใช้ฟังก์ชัน `summarise()` เพื่อสรุปข้อมูลเบื้องต้นของคะแนนสอบ pretest และ posttest

2. ฟังก์ชัน `group_by()` มีประโยชน์มากเมื่อต้องการสรุปข้อมูลโดยจำแนกตามกลุ่มหรือตัวแปรจัดประเภทที่กำหนด ลองใช้ฟังก์ชัน `group_by()` และ `summarise()` เพื่อสรุปข้อมูลเบื้องต้นของคะแนนสอบ pretest และ posttest โดยจำแนกตามวิธีการสอนที่ผู้เรียนได้รับ


# การเขียนไฟล์ข้อมูล {.smaller}

ผู้วิเคราะห์สามารถเขียนไฟล์ข้อมูลที่จัดกระทำหรือวิเคราะห์แล้วไปบันทึกไว้ในรูปแบบไฟล์ที่ต้องการได้ โดยใช้ฟังก์ชัน `write_*()` ซึ่งมีหลายรูปแบบ

## ฟังก์ชันที่เกี่ยวข้อง

```{r eval=F}
install.packages("readr")
install.packages("writexl")
library(readr)
library(writexl)
```

| Function            | Description                              |
|:--------------------|:-----------------------------------------|
| `write_csv()`       | บันทึกข้อมูลเป็นไฟล์ .csv                      |
| `write_tsv()`       | บันทึกข้อมูลเป็นไฟล์ .tsv                      |
| `write_excel_csv()` | บันทึกข้อมูลเป็นไฟล์ .csv ที่สามารถเปิดได้ใน Excel |
| `write_xlsx()`      | บันทึกข้อมูลเป็นไฟล์ .xlsx                     |

## กิจกรรม : การเขียนไฟล์ข้อมูล {.smaller}

ลองเขียนไฟล์ข้อมูล `tidy_dat` ที่ได้จากกิจกรรมก่อนหน้านี้ ในรูปแบบไฟล์ .csv และ .xlsx
