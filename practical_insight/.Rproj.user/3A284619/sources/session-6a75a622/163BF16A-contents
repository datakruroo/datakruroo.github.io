---
title: "network visualization"
toc: true
---

# Network Visualization

```{r}
library(readxl)
library(dplyr)
thesis_data <- read_excel("/Users/siwachoat/Library/CloudStorage/OneDrive-ChulalongkornUniversity/Documents/เอกสารประกอบการสอน/2758686/66:1/book/datavis_book/data_AJ suchada.xlsx")
thesis_data
glimpse(thesis_data)
head(thesis_data)
```

สำรวจข้อมูลทั่วไป : ทำความรู้จัก อ.สุชาดา

```{r}
library(stringr)
library(ggplot2)

thesis_data |> 
  mutate(advisor = str_replace(advisor, pattern = "ปทีป  เมธาคุณวุฒิ",
                               replacement = "ปทีป เมธาคุณวุฒิ")) |> 
  count(advisor)


## ช่วงปีที่ทำงานดูแล advisee กี่คน
thesis_data %>%
  group_by(year) %>%
  count() %>%
  ggplot(aes(x =year, y=n))+
    geom_line()+
    geom_point()+
  scale_x_continuous(breaks = seq(2542, 2556,1))+
  scale_y_continuous(breaks = seq(0,9,1))

```

```{r}


## อ.สุชาดาเป็น advisor กี่เล่ม
thesis_data <- thesis_data %>%
  mutate(advisor = str_replace(advisor,"ปทีป  เมธาคุณวุฒิ",  "ปทีป เมธาคุณวุฒิ")) 

## ช่วงปีที่ทำงานดูแล advisee กี่คน
thesis_data %>%
group_by(year) %>%
count() %>%
ggplot(aes(x=year, y=n))+
geom_line()+
geom_point()+
scale_y_continuous(limits = c(0,10), breaks = seq(0,10,2))+
scale_x_continuous(limits = c(2542, 2556), breaks=seq(2542,2556,1))+
ggtitle("อ.สุชาดาคุมวิทยานิพนธ์มากที่สุดในปี พ.ศ. 2548")+
theme(text = element_text(family="ChulaCharasNew"))
```

> เมื่อจำแนกตามระดับปริญญา (โท/เอก) พบว่า

```{r}
thesis_data %>%
  group_by(year, edu) %>%
  count() %>%
  mutate(edu = factor(edu, levels=c(2,1),labels=c("ป.เอก","ป.โท"))) %>%
  ggplot(aes(x = year, y=n, fill = edu))+
  geom_bar(stat = "identity", position = "fill")+
  theme_light()+
  scale_fill_brewer(type = "qual", palette = 2)+
  labs(fill = "ระดับการศึกษา")+
  theme(text = element_text(family = "ChulaCharasNew"))


```

> เมื่อจำแนกตามสาขาวิชาพบว่า

```{r}
thesis_data$advisor
library(treemapify)
library(rcartocolor)
thesis_data %>%
filter(advisor == "สุชาดา บวรกิติวงศ์") %>%
group_by(depart) %>%
count() %>%
ggplot(aes(area = n, fill = depart))+
  geom_treemap()+
  geom_treemap_text(aes(label = depart), 
                    padding.y = grid::unit(1.9,"mm"),
                    family = "ChulaCharasNew", col = "white")+
  geom_treemap_text(aes(label = paste(n,"ชิ้น")), 
                    padding.y =  grid::unit(10,"mm"),
                    padding.x = grid::unit(2,"mm"),
                    size =12, col = "black",
                    min.size = 4, family ="ChulaCharasNew")+
  theme(text = element_text(family="ChulaCharasNew"),
        legend.position = "none")+
  scale_fill_carto_d()


```

## 1. Network Visualization

หัวข้อนี้เราจะดำเนินการวิเคราะห์โดยใช้ทัศนภาพข้อมูลเพื่อตอบคำถาม

> **อ.สุชาดาทำงานร่วมกับอาจารย์ท่านใดบ้าง ลักษณะความสัมพันธ์เป็นอย่างไร?**

พิจารณาข้อมูลที่มีก่อน ลองสำรวจข้อมูลที่ปรึกษา ที่ปรึกษาร่วม และกรรมการสอบวิทยานิพนธ์ในชุดข้อมูล `thesis_data`

```{r message = F}
library(tidyr)
library(igraph)
library(ggraph)

thesis_data %>% 
  select(advisor, co_advisor, starts_with("commit"))

###
thesis_data %>% 
  count(commitee2)


thesis_data <- thesis_data %>% 
mutate(commitee1 = str_replace(commitee1,"วรรณี  แกมเกตุ", "วรรณี แกมเกตุ")) %>%
mutate(commitee1 = str_replace(commitee1,"วราภรณ์  บวรศิริ", "วราภรณ์ บวรศิริ")) %>%
mutate(commitee1 = str_replace(commitee1,"สุวัฒนา สุวรรณเขตนิคม", "สิริพันธุ์ สุวรรณมรรคา")) %>%
mutate(commitee1 = str_replace(commitee1,"สุวิมล  ว่องวาณิช", "สุวิมล ว่องวาณิช")) %>%
mutate(commitee2 = str_replace(commitee2,"สุวัฒนา สุวรรณเขตนิคม", "สิริพันธุ์ สุวรรณมรรคา")) %>%
mutate(commitee2 = str_replace(commitee2,"เอมอร จังศิริพรปกรณ์", "โชติกา ภาษีผล")) %>%
mutate(commitee3 = str_replace(commitee3,"เอมอร จังศิริพรปกรณ์", "โชติกา ภาษีผล"))

# สมมติว่าข้อมูลของคุณอยู่ในตัวแปรชื่อ df
df <- thesis_data %>% select(
  advisor = advisor,
  co_advisor = co_advisor,
  commitee1 = commitee1,
  commitee2 = commitee2,
  commitee3 = commitee3
)

df <- df %>% select(1:3) %>%
      mutate(thesis = 1:dim(df)[1])
```

การสร้าง network ใน R สามารถทำได้หลายวิธีการ วิธีการที่แนะนำในบทเรียนนี้คือการใช้ library-ggraph ที่เป็น extension อีกตัวหนึ่งของ ggplot2 สิ่งที่ต้องทราบก่อนการสร้างทัศนภาพข้อมูลประเภทนี้คือ

1.  ลักษณะพื้นฐานของ network แผนภาพลักษณะนี้มีส่วนประกอบหลัก 2 ส่วนได้แก่

-   จุดยอด (vertices)
-   เส้นเชื่อม (edges)

ทั้งจุดยอดและเส้นเชื่อมถือเป็นสัญลักษณ์ (Mark) ของทัศนภาพข้อมูล ในทำนองเดียวกับทัศนภาพข้อมูลทั่วไป Mark ดังกล่าวสามารถมีคุณลักษณะที่เปลี่ยนแปลงไปตามข้อมูลได้ คุณลักษณะ (attributes) ของ Mark ที่สามารถใช้แทนความผันแปรของข้อมูล เช่น

-   ขนาดของจุดยอด สีของจุดยอด ความเข้มของจุดยอด รูปแบบของจุดยอด

-   ขนาดของเส้นเชื่อม สีของเส้นเชื่อม ความเข้มของเส้นเชื่อม รูปแบบของเส้นเชื่อม

2.  ชุดข้อมูลกราฟ หรือ graph object: ก่อนที่จะสร้าง network ผู้วิเคราะห์จำเป็นต้องมีชุดข้อมูลกราฟ ที่เป็นชุดข้อมูลสำหรับกำหนดลักษณะของ network ที่ต้องการ plot การสร้าง ชุดข้อมูลประเภทนี้สามารถทำได้ด้วย library-igraph ชุดข้อมูลดังกล่าวจะต้องมีส่วนประกอบสำคัญ 2 ส่วนได้แก่

-   จุดยอด มักใช้แทนหน่วยข้อมูลที่เป็นสมาชิกภายใน network
-   เส้นเชื่อม คือเส้นที่แสดงความสัมพันธ์หรือความเชื่อมโยงกันระหว่างจุดยอด เส้นเชื่อมจำแนกได้อีก 2 ประเภทหลัก ได้แก่ เส้นเชื่อมแบบมีทิศทาง (directed) และไม่มีทิศทาง (undirected) การเลือกประเภทของเส้นเชื่อมจะขึ้นอยู่กับธรรมชาติของข้อมูล

โครงสร้างของชุดข้อมูลกราฟมีส่วนประกอบสำคัญคือ adjacency matrix ที่เป็น matrix แสดงความสัมพันธ์ระหว่าง node(i) กับ node(j) ผลลัพธ์ด้านล่างแสดงตัวอย่างของ matrix ดังกล่าว

```{r}
library(igraph)
## 1. adjacency matrix
mat <- matrix(c(0, 1, 1, 0,
                1, 0, 1, 0,
                1, 1, 0, 1,
                0, 0, 1, 0), nrow=4)
mat
```

การสร้าง adjacency matrix ดังกล่าวสามารถทำได้สองวิธีการ วิธีการแรกคือ สร้างจาก adjacency matrix โดยตรงดังตัวอย่างข้างบน และวิธีการที่สองคือการสร้างจาก edge list กล่าวคือเป็นชุดข้อมูลที่มี 2 คอลัมน์ โดยที่ คอลัมน์แรกเป็นจุดเริ่มต้น และคอลัมน์ที่สองเป็นชุดสิ้นสุดของเส้นเชื่อม ยกตัวอย่างเช่น

```{r}
## edge list data.frame
edges <- data.frame(
  from = c("A", "B", "C", "A"),
  to = c("B", "C", "D", "D")
)
edges
```

3.  การสร้าง network มีสิ่งที่ต้องคำนึง ดังนี้

**โครงสร้างภาษา `ggraph`** ใช้หลักภาษาเดียวกับ ggplot2 โดยมี geom_XXX() เฉพาะดังนี้

-   geom_edge_link(): สำหรับวาดเส้นเชื่อม (edges) ระหว่าง nodes

-   geom_node_point(): สำหรับวาด nodes ในรูปแบบจุด

-   geom_node_text(): สำหรับวาดข้อความบน nodes

**layout ของ network** คือการกำหนดวิธีการวาง nodes และ edges บนกราฟ. มี layouts หลายแบบที่สามารถเลือกใช้ เช่น kk, fr, circle และอื่น ๆ

**Layouts จาก igraph:** - layout_nicely - layout_randomly - layout_in_circle - layout_on_grid - layout_as_tree - layout_with_fr (Force-directed layout โดยใช้ Fruchterman-Reingold algorithm) - layout_with_kk (Kamada-Kawai algorithm) - layout_with_drl (Distributed Recursive Layout algorithm) - layout_with_lgl (Large Graph Layout algorithm) - layout_with_dh (Davidson-Harel algorithm) - layout_with_gem (Graph Embedder algorithm) - layout_with_mds (Multidimensional Scaling)

**Layouts เฉพาะของ ggraph:** - layout_tbl_graph_circlepack - layout_tbl_graph_treemap - layout_tbl_graph_partition - layout_tbl_graph_dendrogram

ตัวอย่างต่อไปนี้แสดงการสร้าง network ด้วยหลักภาษาข้างต้น

```{r}
## สร้าง graph object จาก adjacency matrix
g <- graph_from_adjacency_matrix(mat, mode = "undirected")
## วาดรูป

ggraph(graph = g, layout = "circle") +
geom_edge_link()+
geom_node_point()

## สร้างจาก data.frame ของ edge list
g <- graph_from_data_frame(edges, directed = F)
## วาดรูป
ggraph(g, layout = "fr") +
geom_edge_link()+
geom_node_point()
```

ตัวอย่างข้างต้นแสดงการสร้างส่วนที่เป็น Mark ของ network นอกจากนี้เราสามารถเพิ่มตัวแปรที่เป็น attribute ของจุดยอดหรือเส้นเชื่อมลงใน graph object ได้ เช่น

-   ต้องการเพิ่มชื่อของ node และกลุ่มของ node เช่น เพศ

-   เพิ่มระดับความสัมพันธ์ระหว่าง vertex

```{r}
## vertex attributes
V(g)$name <- c("A","B","C","D")
V(g)$gender <- c("F","F","M","M")
##
E(g)$weight <- c(0.1,0.5,0.8,0.2)
g
```

```{r}
library(rcartocolor)
## วาดรูป
ggraph(g, layout = "fr") +
geom_edge_density()+
geom_edge_link(aes(col = weight, width =weight))+
geom_node_point(aes(col= gender, shape = gender), size = 4)+
geom_node_text(aes(label = name))+
scale_edge_color_continuous(breaks=seq(0,1,0.25))+
scale_color_carto_d()

```

กลับมาที่คำถามหลัก ...

### คำถามที่ 1: **อ.สุชาดาทำงานร่วมกับอาจารย์ท่านใดบ้าง ลักษณะความสัมพันธ์เป็นอย่างไร?**

```{r}
thesis_data %>% glimpse(70)
```

การตอบคำถามข้างต้น เราจำเป็นต้องออกแบบข้อมูล graph object เพื่อที่ plot เป็นทัศนภาพข้อมูลที่ต้องการ

-   จุดยอดคือ อาจารย์

-   เส้นเชื่อมคือ combination ระหว่างอาจารย์ที่ปรึกษา ที่ปรึกษาร่วม กับกรรมการสอบ

เป็นไปได้ที่ในชุดข้อมูลจะมีความคลาดเคลื่อนของข้อมูล ผู้วิเคราะห์จำเป็นจะต้องตรวจสอบและแก้ไขให้ถูกต้อง เช่น

```{r}
## สำรวจข้อมูลที่จะนำมาสร้าง network
thesis_data %>%
  count(co_advisor)

thesis_data %>%
  count(externalCommittee)

### ปรับแก้ขื่ออาจารย์กรรมการภายนอกที่ไม่ถูกต้อง
thesis_data<- thesis_data %>% 
mutate(externalCommittee = str_replace(externalCommittee,"วันทนา วงศ์ศิลปภิรมย์", "วันทยา วงศ์ศิลปภิรมย์"))
```

เป็นการสะดวกมากกว่าที่จะสร้างชุดข้อมูลย่อยสำหรับทำงานในคำถามวิจัยนี้โดยเฉพาะ

```{r}
### สร้างชุดข้อมูลให้มีเฉพาะชื่ออาจารย์ในแต่ละตำแหน่งของการสอบวิทยานิพนธ์
library(tidyr)
df <- thesis_data %>% select(
  code,
  depart,
  year,
  advisor,
  co_advisor,
  commitee1,
  commitee2,
  commitee3,
  externalCommittee
) 
df
```

คราวนี้เราต้องการเฉพาะงานที่ อ.สุชาดา เป็น advisor เท่านั้น เพื่อวิเคราะห์เครือข่ายการในงานที่ อ.สุชาดาเป็น advisor สามารถเลือกข้อมูลได้ด้วยการ filter ข้อมูลดังนี้ จะเห็นว่าจะเหลืองานที่นำมาวิเคราะห์จำนวน 46 เล่มจาก 55 เล่มข้างต้น

```{r}
df %>% 
  filter(str_detect(advisor, "สุชาดา")) -> filtered_df
filtered_df %>% arrange(year)
```

งานนี้เราจะสร้าง graph จาก edge list dataframe ดังนั้นการ preprocess data จะต้องแปลงข้อมูลให้เป็นรูปแบบยาวก่อน แล้วจึงจัด format และ attribute ที่เหมาะสมเข้าไปในชุดข้อมูล ดังนี้

```{r}
## เปลี่ยนข้อมูลให้เป็น long format
df_long <- filtered_df %>%
  pivot_longer(cols = c("advisor","co_advisor",starts_with("commitee"),"externalCommittee"), 
  names_to = "role", values_to = "name")%>%
  drop_na(name) %>%
  group_by(code, depart, year) %>%
  reframe(pair = data.frame(t(combn(name, 2)))) %>% 
  unnest(pair) %>%  
  group_by(X1, X2, depart, year) %>%
  count() %>%
  ungroup() %>%
  rename(weight = n)
df_long %>% arrange(depart, year)
```

```{r}
library(ggraph)
library(igraph)
library(patchwork)

## สร้าง graph
g <- graph_from_data_frame(df_long, directed = F) ## สร้าง graph object
```

```{r fig.width = 9, fig.height = 9}
p1<- ggraph(g)+
geom_edge_link()+
geom_node_point(col = "black")


p2<- ggraph(g)+
geom_edge_link()+
geom_node_text(aes(label = name), family = "ChulaCharasNew")

p1/p2
```

เราสามารถนำ attribute ที่มีมาสร้างสารสนเทศในลักษณะต่าง ๆ ได้ เช่น รูปด้านล่างแสดงการพิจารณาเครือข่ายอาจารย์ที่สอบวิทยานิพนธ์ของนิสิตในความดูแลของ อ.สุชาดา

```{r fig.width = 16, fig.height = 12}
ggraph(g, layout = "fr")+
  geom_edge_link(aes(width = weight > 1, col = weight >1))+
  geom_node_point()+
  geom_node_text(aes(label = name), family = "ChulaCharasNew", check_overlap = TRUE, 
                 nudge_y = 0.05, nudge_x = 0.1)+
  facet_wrap(~depart)+
  theme_light()+
  theme(text = element_text(family = "ChulaCharasNew"),
        strip.text = element_text(family = "ChulaCharasNew"))

```

```{r }
set.seed(123)
layout <- layout_with_dh(g)
xlim <- range(layout[,1])
ylim <- range(layout[,2])
set.seed(123)

p<-ggraph(g, layout= "dh")+
geom_edge_link(alpha = 0.6,  aes(width = weight, color = weight))+
geom_node_text(aes(label = name), fill = "black" , col ="black",
              family = "ChulaCharasNew", size = 2) +
theme_graph(foreground = 'black', fg_text_colour = 'white')+
facet_wrap(~depart)+
theme(text = element_text(family = "ChulaCharasNew", size =3),
      strip.text = element_text(family = "ChulaCharasNew", size =8),
      plot.margin = unit(rep(0.1,4),"cm"),
      legend.title = element_text(size = 15, vjust = 1),
      legend.text = element_text(size = 15))+
xlim(xlim[1]-1,xlim[2]+1)+
scale_edge_width(guide = "none")+
scale_edge_colour_continuous(name = "จำนวนวิทยานิพนธ์ (ชิ้น) \n", breaks = c(1,3,5,7), 
                            labels = c("1","3","5","7"))
p
```

> การทำงานของ อ.สุชาดา ร่วมกับ อ.ท่านอื่น ๆ มีแนวโน้มเป็นอย่างไรในช่วง ปีที่เก็บข้อมูล

```{r}
## 1. สร้าง edge_list data.frame
df <- thesis_data %>% select(
  code,
  year,
  advisor,
  co_advisor,
  starts_with("com"),
  externalCommittee
) 

head(df)
edge_list <- df %>%
  pivot_longer(cols = c("advisor","co_advisor", starts_with("com"),"externalCommittee"), 
  names_to = "role", values_to = "name") %>%
  drop_na(name) %>%
  group_by(code,year) %>%
  reframe(pair = data.frame(t(combn(name, 2)))) %>% 
  unnest(pair) %>%  
  group_by(X1, X2, year) %>%
  count() %>%
  ungroup() %>%
  rename(weight = n)

```

```{r}
g <- graph_from_data_frame(edge_list)
ggraph(g)+
geom_edge_link()+
geom_node_point()+
facet_wrap(~year)
```

> ความสัมพันธ์ระหว่าง software กับ mainstat

```{r fig.width = 16, fig.height = 16}
library(tidytext)

temp <- thesis_data %>%
  select(code,year, software1, mainStat) %>%
  unnest_tokens(input = "mainStat",
                output = "stat",
                token = "regex", #regular expression
                pattern = ",") %>%
  mutate(stat = str_replace(stat , "  multilevel sem", "multilvel sem")) %>%
  mutate(stat = str_replace(stat , " path analysis", "path analysis")) %>%
  mutate(stat = str_replace(stat, "\r\n", " ")) %>%
  mutate(stat = str_replace(stat, "lisrel", "sem")) %>%
  mutate(stat = str_replace(stat , "การวิเคราะห์ความแปรปรวน (anova)", "anova")) %>%
  mutate(stat = str_replace(stat , " anova", "anova")) %>%
  mutate(software1 = str_replace(software1, "MATLAB 7.0", "MATLAB")) %>%

  mutate(software1 = str_replace(software1 , "SPSS ", "SPSS")) %>%
  filter(software1 != "-") %>%
  group_by(software1 , stat, year) %>%
  count() %>%
  drop_na(stat) 

temp[62, 1]<-"SPSS"
temp[9,2]<- "anova"
  


g<-graph_from_data_frame(temp, directed = T)

ggraph(g, layout= "fr")+
  geom_edge_link()+
  geom_node_text(aes(label = name), family = "ChulaCharasNew", size = 2)+
  facet_wrap(~year)+
  theme(text = element_text(family="ChulaCharasNew"))

#ggsave(file = "network.png", width = 16, height = 12)
```

```{r}

edge_list <-thesis_data %>%
  select(code, software1, mainStat) %>%
  unnest_tokens(input = "mainStat",
                output = "stat",
                token = "regex",
                pattern = ",") %>%
  mutate(stat = str_replace(stat, "\r\n", " ")) %>%
  mutate(stat = str_replace(stat , " hlm", "hlm")) %>%
  mutate(stat = str_replace(stat , "การวิเคราะห์ความแปรปรวน (anova)", "anova")) %>%
  mutate(stat = str_replace(stat, "lisrel", "sem")) %>%
  group_by(software1, stat) %>%
  count() %>%
  drop_na(software1, stat) %>%
  filter(software1 != "-")
  

g <- graph_from_data_frame(edge_list, directed = TRUE)

ggraph(g, layout = "fr")+
  geom_edge_link()+
  geom_node_text(aes(label = name), family = "ChulaCharasNew", nudge_y = 0.1)+
  coord_flip()


```

------------------------------------------------------------------------

## 2. Network Analytics

นอกจากการสร้างแผนภาพเครือข่ายแล้ว เรายังสามารถวิเคราะห์ network ด้วยค่าสถิติหรือโมเดลทางสถิติได้ การวิเคราะห์ที่สามารถทำได้ ได้แก่

1.  การวิเคราะห์เพื่อบรรยายสภาพ network ด้วยสถิติได้แก่ ความหนาแน่น (density) ความยาวเฉลี่ยของเส้นเชื่อม (average path length) ค่าสัมประสิทธิ์การจัดกลุ่ม (clustering coefficients)

2.  การวิเคราะห์ centrality ซึ่งมีหลายนิยาม เช่น degree centrality, closeness centrality, betweenness centrality, eigenvector centrality เป็นต้น

3.  การค้นหา subgroup ภายใน network

4.  การวิเคราะห์การเชื่อมโยง

5.  การวิเคราะห์ด้วยโมเดลทางสถิติของเครือข่าย

### การวิเคราะห์เพื่อบรรยายสภาพ

เป็นการวิเคราะห์ที่มุ่งบรรยายถึงสภาพความสัมพันธ์ในเครือข่าย ซึ่งค่าสถิติแต่ละตัวจะบ่งชี้สภาพหรือคุณลักษณะของเครือข่ายในมิติที่แตกต่างกัน ได้แก่

#### Degree (เป็น attribute ของจุดยอด)

มีค่าเท่ากับ จำนวนเส้นเชื่อมที่เชื่อมต่อกับจุดยอดแต่ละจุดยอด ใน network ที่มีทิศทางค่าสถิติ degree จะจำแนกออกได้อีกสองประเภท ได้แก่ **in-degree** **คือจำนวนเส้นเชื่อมที่ยิงเข้ามาหาจุดยอด** และ **out-degree คือจำนวนเส้นเชื่อมที่ยิงออกไปจากจุดยอด**

-   ค่า degree ใช้บ่งชี้ความสำคัญของจุดยอดแต่ละจุด กล่าวคือ จุดยอดที่มี degree สูง นั่นแสดงว่าเป็นจุดยอดที่มีความสัมพันธ์หรือมีความเชื่อมโยงกับจุดยอดอื่น ๆ จำนวนมากภายในเครือข่าย อาจตีความว่าหน่วยข้อมูลที่เป็นจุดยอดนั้นเป็นหน่วยข้อมูลที่มีบทบาทมากภายในเครือข่าย หรือเป็น influencer หรือภายในบริบทของการระบาดของโรคอาจมองในมุมว่าจุดยอดที่มี degree สูงนั้นเป็นหน่วยข้อมูลที่มีความเสี่ยงสูงที่จะแพร่เชื้อไปยังหน่วยข้อมูลอื่น ๆ ภายในเครือข่าย

-   ค่า degree ยังอาจใช้ประกอบการแบ่งกลุ่มจุดยอด กล่าวคือจุดยอดที่มี degree สูงในเฉพาะกลุ่มแสดงถึงความสัมพันธ์ที่มากเป็นพิเศษภายในกลุ่มนั้น

-   สำหรับ network ที่มีทิศทางการวิเคราะห์ค่าสถิต degree ยังมองได้อีกว่า จุดยอดนั้นมีความสำคัญในเชิงการส่งออก หรือว่ารับเข้า

```{r fig.width = 10, fig.height=8}
df <- thesis_data %>% select(
  code,
  depart,
  advisor,
  co_advisor,
  commitee1,
  externalCommittee
) 


edge_list <- df %>%
  #filter(str_detect(advisor, "สุชาดา")) %>%#### <----
  pivot_longer(cols = c("advisor","co_advisor",starts_with("com"),"externalCommittee"), 
  names_to = "role", values_to = "name") %>%
  drop_na(name) %>%
  filter(depart %in% c("วิจัยการศึกษา","วิธีวิทยาการวิจัยการศึกษา","สถิติการศึกษา","การวัดผลทางการศึกษา","การวัดและประเมินผลการศึกษา")) %>%
  group_by(code, depart) %>%
  reframe(pair = data.frame(t(combn(name, 2)))) %>% 
  unnest(pair) %>%
 # filter(str_detect(X1, "สุชาดา")) %>%####<---
  group_by(X1, X2, depart) %>%
  count() %>%
  ungroup() %>%
  rename(weight = n)
```

```{r}
g <- graph_from_data_frame(edge_list, directed = F)
p1<- ggraph(g, layout = "auto")+
  geom_edge_link(aes(
    start_cap = label_rect(node1.name), 
    end_cap = label_rect(node2.name)), 
    arrow = arrow(type = "open", length = unit(1, "mm")))+
  geom_node_text(aes(label = name), family = "ChulaCharasNew",
  size = 4) 
p1
```

```{r}
#geom_edge_diagonal()
degree() ## คำนวณ degree ของจุดยอด
degree(g, mode = "all")
degree(g, mode = "in")+degree(g, mode = "out")

### in-degree เป็นอย่าไรบ้าง
in_degree <- degree(g, mode = "in")
in_degree <- data.frame(in_degree)
name <- rownames(in_degree)
in_degree$name <- name
head(in_degree)

in_degree %>% 
  ggplot(aes(x = in_degree, y=reorder(name,in_degree)))+
  geom_col()+
  theme(text= element_text(family = "ChulaCharasNew"))+
  ggtitle("in-degree: อาจารย์สุชาดาชอบเชิญใครมากที่สุด?")
           
```

```{r}
in_degree <- degree(g, mode = "in")
V(g)$in_degree <- in_degree

ggraph(g, layout = "fr")+
 geom_node_point(aes(size = in_degree), alpha = 0.5)+
 geom_edge_link(aes(
    start_cap = label_rect(node1.name), 
    end_cap = label_rect(node2.name)), 
    arrow = arrow(type = "open", length = unit(1, "mm")))+
  scale_size_area(max_size = 10)
 #geom_node_text(aes(label = name, size = in_degree), family = "ChulaCharasNew")
 #size = 4) 


```

```{r}
V(g)$out_degree<- degree(g, mode = "out") 
V(g)$in_degree <-  degree(g, mode = "in")







### ใครเป็นที่ปรึกษาร่วมหรือกรรมการคู่กับ อ.สุชาดาบ่อย
p2<-ggraph(g, layout = "fr")+
  geom_edge_link(aes(col = depart,
    start_cap = label_rect(node1.name), 
    end_cap = label_rect(node2.name)), 
    arrow = arrow(type = "closed", length = unit(1, "mm")))+
  geom_node_point(aes(size = in_degree>2)) + ## เป็น co หรือ กรรมการสอบในงาน อ.สุชาดา
  geom_node_text(aes(label = name), 
  family = "ChulaCharasNew", nudge_y = 0.1,
  check_overlap = TRUE, repel = TRUE)+
  theme(text = element_text(family= "ChulaCharasNew"))
p2
```

#### Density

คือ ความหนาแน่นของเครือข่าย มีค่าเท่ากับ สัดส่วนของเส้นเชื่อมที่มีอยู่ในเครือข่ายต่อเส้นเชื่อมที่เป็นไปได้ทั้งหมด การคำนวณมีความแตกต่างกันตามลักษณะของกราฟ ถ้า

-   กราฟไม่มีทิศทาง จำนวนเส้นเชื่อมทั้งหมดเท่ากับ $n(n-1)/2$

-   กราฟมีทิศทาง จำนวนเส้นเชื่อมทั้งหมดเท่ากับ $n(n-1)$

เมื่อ $n$ คือจำนวนจุดยอดใน network

การคำนวณ density ด้วย R สามารถทำได้โดยใช้ฟังก์ชัน edge_density()\` ดังนี้

```{r}
### g คือกราฟที่ปรึกษา ที่ปรึกษาร่วม และกรรมการในเครือข่ายของ อ.สุชาดา
edge_density(g)
```

#### Clustering Coefficient (transitivity)

เป็นตัวบ่งชี้ที่วัดถึงการจับกลุ่มของเครือข่ายในระดับ local หรือระดับของจุดยอด กล่าวคือจะให้สารสนเทศเกี่ยวกับการจับกลุ่มของจุดยอดแต่ละจุด โดยมีความหมายเป็นความหนาแน่นของความสัมพันธ์ระหว่างเพื่อนบ้าน (neighbors) ของจุดยอดนั้น การคำนวณสามารถทำได้ดังนี้

สัมประสิทธิ์การจับกลุ่มดังกล่าว บางที่จะเรียกว่า transitivity ซึ่งแบ่งได้อีกหลายประเภท คำศัพท์เฉพาะที่ควรทราบ

triplets: หมายถึงกลุ่มของสามจุดยอดใด ๆ โดยไม่คำนึงถึงว่าจุดยอดเหล่านั้นเชื่อมต่อกันหมดหรือไม่ กล่าวคือ อาจจะเป็นกลุ่มของสามจุดยอดที่เชื่อมกันทั้งหมด 3 เส้น หรือมีเส้นเชื่อมเพียงสองเส้น หรือเส้นเดียวก็ได้ ไม่จำเป็นต้องเป็นสามเหลี่ยมเสมอไป triplets สามารถจำแนกได้เป็นสองประเภท

-   open triplets: หมายถึง triplets ที่เชื่อมต่อกันไม่เกิน 2 เส้น

-   closed triplets หรือ triangles: หมายถึงกลุ่มของสามจุดยอด (nodes) ที่เชื่อมต่อกันทั้งหมด หรือกล่าวอีกนัยหนึ่งคือ สามจุดยอดนั้นสามารถสร้างเป็นสามเหลี่ยมได้ ซึ่งแสดงถึงความสัมพันธ์ที่แน่นแฟ้นหรือความสัมพันธ์ที่ใกล้ขิดกันมากระหว่างจุดยอดเหล่านั้น

```{r fig.width = 3}
y1<- c("A","A")
y2<- c("B","C")
edge_list_open <- data.frame(y1,y2)
p1 <- graph_from_data_frame(edge_list_open) %>%
  ggraph()+
  geom_edge_link()+
  geom_node_point(shape = 16, col = "white", size = 6)+
  geom_node_text(aes(label = name))+
  ggtitle("open triplet")

x1 <- c("B","C","B")
x2 <-c("B","C","C")
edge_list_close <- data.frame(x1,x2)
p2 <- graph_from_data_frame(edge_list_tri) %>%
  ggraph()+
  geom_edge_link()+
  geom_node_point(shape = 16, col = "white", size = 6)+
  geom_node_text(aes(label = name))+
  ggtitle("closed triplet")

p1+p2
```

##### Global Transitivity

การคำนวณค่าสัมประสิทธิ์การจับกลุ่ม หรือค่า transitivity สามารถคำนวณได้หลายลักษณะ ลักษณะแรกเรียกว่า global transitivity ที่ถูกนิยามเป็น

$$
T = \frac{3 \times n(triangles)}{n(triplets)}
$$ จากนิยามข้างต้นแสดงว่า $T$ ข้างต้นแสดงระดับความหนาแน่นของความเชื่อมโยงภายใน network

-   $T = 0$ แสดงในในเครือข่ายไม่มีจุดยอดที่มีความสัมพันธ์อย่างใกล้ชิดกันเลย

-   $T \rightarrow 1$ แสดงว่าในจุดยอดจำนวนมากในเครือข่ายมีความสัมพันธ์กันอย่างใกล้ชิด

```{r}
## คำนวณ transitivity ของกราฟ อ.สุชาดา (ตัวเต็ํม)
df <- thesis_data %>% select(
  code,
  depart,
  advisor,
  co_advisor,
  commitee1,
  externalCommittee
) 


edge_list <- df %>%
 # filter(str_detect(advisor, "สุชาดา")) %>%
  pivot_longer(cols = c("advisor","co_advisor",starts_with("com"),"externalCommittee"), 
  names_to = "role", values_to = "name") %>%
  drop_na(name) %>%
  filter(depart %in% c("วิจัยการศึกษา","วิธีวิทยาการวิจัยการศึกษา","สถิติการศึกษา","การวัดผลทางการศึกษา","การวัดและประเมินผลการศึกษา")) %>%
  group_by(code, depart) %>%
  reframe(pair = data.frame(t(combn(name, 2)))) %>% 
  unnest(pair) %>%  
 # filter(str_detect(X1, "สุชาดา")) %>%
  group_by(X1, X2, depart) %>%
  count() %>%
  ungroup() %>%
  rename(weight = n)

g <- graph_from_data_frame(edge_list, directed = F)

transitivity(g, type = "global")

```

**ค่าสถิติข้างต้นมีความหมายอย่างไร?**

##### Local Transitivity

เมื่อได้ทราบความหนาแน่นหรือความใกล้ชิดกันโดยรวมแล้ว ผู้วิเคราะห์อาจต้องการทราบสภาพความใกล้ชิดเฉพาะส่วนของเครือข่าย ตัวอย่างเช่น เครือข่ายของ อ.สุชาดาข้างต้น

Local Transitivity หรือบางทีเดรียกว่า Local Clustering Coefficients ของ node แต่ละ node เป็นการวัดความสัมพันธ์ระหว่าง node กับกล่าวกับเพื่อนบ้าน (neighbors) ของ node นั้น ๆ กำหนดให้ $C_i$ คือ local transitivity ของ node ที่ $i$ เราสามารถคำนวณค่า $C_i$ ได้ดังนี้

$$
C_i = \frac{2 \times n(triangles \ with \ node_i)}{k_i(k_i-1)}
$$

ค่า $C_i$ ดังกล่าวมีค่าอยู่ในช่วง $[0,1]$ เช่นเดียวกับ global transitivity โดยที่

-   $C_i = 0$ หมายถึง node ดังกล่าวไม่มีความสัมพันธ์ใกล้ชิดกับเพื่อนบ้านใดเลย

-   $C_i = 1$ หมายถึง node ดังกล่าวมีความสัมพันธ์ใกล้ชิดกับทุกเพื่อนบ้าน

จากตัวอย่างเครือข่าย อ.สุชาดา การหา local transitivity อาจทำให้เราเข้าใจความสัมพันธ์ระหว่างอาจารย์ในเครือข่ายได้มากขึ้น

```{r}
name <- V(g)$name
local_coeff <- transitivity(g, type = "local")
local_coeff
local_trans <- data.frame(name, local_coeff)
local_trans %>%
  ggplot(aes(x= local_coeff))+
  geom_histogram()

V(g)$local_trans <- local_coeff
g %>%
  ggraph()+
  geom_edge_link()+
  geom_node_point(shape = 16, aes(col = local_trans, size = local_trans))+
  geom_node_text(aes(label = name), family = "ChulaCharasNew")+
  theme(text = element_text(family = "ChulaCharasNew"))

```

```{r}

name <- V(g)$name


tibble(name, local_coeff) %>%
  arrange(desc(local_coeff)) %>%
  head()

tibble(name, local_coeff) %>%
  arrange(desc(local_coeff)) %>%
  tail()


tibble(name, local_coeff) %>%
  arrange(desc(local_coeff)) %>%
  ggplot(aes(x = local_coeff, y= reorder(name, local_coeff)))+
  geom_col(fill = "steelblue")+
  theme_light()+
  theme(text = element_text(family = "ChulaCharasNew"))
```

ผลการวิเคราะห์ข้างต้นสรุปได้อย่างไร ?

ทดลองเลือกเครือข่ายเฉพาะ/เครือข่ายย่อยขึ้นมาพิจารณา

```{r}
V(g)$local_coeff <- local_coeff
ggraph(g)+
  geom_edge_link(aes(edge_width = weight), col = "grey" ,edge_alpha = 0.1)+
  geom_node_point(aes(size = local_coeff), col = "steelblue")+

  geom_node_text(family="ChulaCharasNew", aes(label = name), size = 3, col = "grey30", repel = T)+
  theme_void()+
  scale_size_area(max_size = 10)

```

```{r}
V(g)$degree <- degree(g, mode = "all")
ggraph(g)+
  geom_edge_link(aes(edge_width = weight), col = "grey" ,edge_alpha = 0.1)+
  geom_node_point(aes(size = local_coeff, col = degree))+

  geom_node_text(family="ChulaCharasNew", aes(label = name), size = 2.5, col = "grey30", repel = T,
                 nudge_x = 0.1, nudge_y = -0.1)+
  theme_void()+
  scale_size_area(max_size = 10)
```

##### Average Transitivity หรือ Average Local Transitivity

ค่าเฉลี่ยของ local transitivity

```{r}
transitivity(g, type = "average")
```

##### Weight Transitivity

Weighted transitivity, หรือ "clustering coefficient for weighted networks", นำเสนอโดย Barrat และคณะ (2004) สำหรับวัด transitivity บน network ที่มีการให้้น้ำหนักบนเส้นเชื่อมของเครือข่าย ซึ่งจะให้ผลลัพธ์ที่สมเหตุสมผลกว่า unweighted transitivity

```{r}
transitivity(g, type = "weight")

g_simplified <- simplify(g)
transitivity(g, type = "local")
transitivity(g_simplified, type = "weight")
```

#### Centrality

ค่าที่บ่งบอกถึงความสำคัญหรือความเป็นศูนย์กลางของจุดยอดในเครือข่าย มีหลายวิธีในการคำนวณค่า Centrality และแต่ละวิธีจะบ่งบอกถึงความสำคัญของจุดยอดในเชิงมุมมองที่ต่างกัน ดังนี้

-   **Degree Centrality:** บ่งบอกถึงจำนวนเส้นเชื่อมที่เชื่อมต่อกับจุดยอดนั้น สำหรับกราฟที่มีทิศทาง (directed graph) จะแบ่งเป็น in-degree และ out-degree

-   **Closeness Centrality**: บ่งบอกถึงความใกล้ชิดของจุดยอดนั้นกับจุดยอดอื่น ๆ ในเครือข่าย คำนวณจากค่าเฉลี่ยของระยะทางที่สั้นที่สุดจากจุดยอดนั้นไปยังจุดยอดอื่น ๆ อีกมุมหนึ่งคือใช้วัดความสามารถในการเข้าถึงจุดยอดอื่น ๆ ในเครือข่ายว่ามีความรวดเร็วมากแค่ไหน ค่า closeness centrality มีค่าอยู่ในช่วง \[0,1\]

$$
Clossness \ Centrality_i = \frac{k}{\sum_{i \neq j} d(i,j)}
$$

```         
-   ค่า Closeness Centrality ที่สูง: หมายความว่าจุดยอดนั้นมีระยะทางเฉลี่ยที่สั้นกว่าเมื่อเทียบกับจุดยอดอื่น ๆ ในเครือข่าย ซึ่งบ่งบอกถึงความสามารถในการเข้าถึงหรือกระจายข้อมูลได้เร็วและมีประสิทธิภาพ

-   ค่า Closeness Centrality ที่ต่ำ: หมายความว่าจุดยอดนั้นมีระยะทางเฉลี่ยที่ยาวกว่าเมื่อเทียบกับจุดยอดอื่น ๆ ในเครือข่าย ซึ่งบ่งบอกถึงความยากในการเข้าถึงหรือกระจายข้อมูล
```

```{r}
V(g)$degree <- degree(g)
V(g)$closeness <- closeness(g)
p1<-ggraph(g)+
geom_edge_link()+
geom_node_point(aes(size = closeness,
                    col = closeness))+
geom_node_text(aes(label = name),
family = "ChulaCharasNew")+
theme_void()

p1
```

-   **Betweenness Centrality:** บ่งบอกถึงจำนวนครั้งที่จุดยอดนั้นเป็นส่วนหนึ่งของเส้นทางที่สั้นที่สุดระหว่างจุดยอดอื่น ๆ ในเครือข่าย

ถ้าจุดยอดหนึ่งมีค่า betweenness ที่สูง แสดงว่าจุดยอดนั้นมีบทบาทสำคัญในการเชื่อมโยงระหว่างจุดยอดอื่น ๆ ในเครือข่าย หรือสามารถถูกมองเห็นว่าเป็น "สะพาน" ระหว่างกลุ่มต่างๆ ของเครือข่าย

```{r}

betweenness(g)


V(g)$betweeness<-betweenness(g)

p2<-ggraph(g)+
geom_edge_link()+
geom_node_point(aes(size = betweeness,
                    col = betweeness))+
geom_node_text(aes(label = name),
family = "ChulaCharasNew")+
theme_void()

p2
```

-   Eigenvector Centrality:

เป็นหนึ่งในค่าสถิติที่ใช้วัดความสำคัญของจุดยอด (node) ในเครือข่าย (network). ค่านี้ไม่เพียงแค่พิจารณาจากจำนวนเส้นเชื่อมที่ต่อเข้ากับจุดยอดเฉพาะเจาะจง, แต่ยังพิจารณาจากคุณภาพของเส้นเชื่อมนั้น โดยวัดจากความสำคัญของจุดยอดที่เชื่อมต่อกับจุดยอดนั้นๆ ด้วย

Eigenvector Centrality ของจุดยอดหนึ่ง ๆ จะสูงเมื่อ:

1.  จุดยอดนั้นมีเส้นเชื่อมเยอะ
2.  จุดยอดนั้นเชื่อมต่อกับจุดยอดอื่น ๆ ที่มีค่า Eigenvector Centrality สูง

เพื่อให้เข้าใจได้ง่ายขึ้น, คิดว่า Eigenvector Centrality เป็นเหมือน "ความเป็นที่รู้จัก/ความดัง" ในเครือข่ายสังคม: ถ้าคุณรู้จักคนที่ดัง คุณก็มีแนวโน้มจะดังไปด้วยและถ้าคุณรู้จักหลายคนที่ดัง คุณก็จะเป็นที่รู้จักมากขึ้น

```{r}
V(g)$eigen_central <- eigen_centrality(g)$vector

p3 <- ggraph(g)+
geom_edge_link()+
geom_node_point(aes(size = eigen_central,
                    col = eigen_central))+
geom_node_text(aes(label = name),
family = "ChulaCharasNew")+
theme_void()

p3
```

#### Path Length

หรือ ความยาวของเส้นทาง มีค่าเท่ากับ จำนวนขั้นตอนหรือจำนวนเส้นเชื่อมที่ต้องใช้เพื่อเชื่อมการเดินทางระหว่างจุดยอดสองจุดภายในเครือข่าย

```{r}
## ระยะทางที่สั้นที่สุด
shortest_paths(g, from = "ไพฑูรย์ สินลารัตน์",
                to = "นงลักษณ์ วิรัชชัย")$vpath[[1]] %>% length()
shortest_paths(g, from = 1, to =5)$vpath[[1]] %>% length()

mean_distance(g, directed = T)
```

## กิจกรรม

1.  tokenization การตัดคำ---\> กระบวนการที่เราแบ่งข้อความที่เป็นข้อมูลนำเข้าออกเป็นหน่วยย่อย เช่น คำ วลี ประโยค หรือหน่วยย่อยใด ๆ เพื่อนำไปเป็นข้อมูลสำหรับการวิเคราะห์ต่อไปนี้

2.  text cleaning

-   ปรับตัวอักษรตัวใหญ่เป็นตัวเล็ก \<---\>

-   ลบ stopwords

-   ลบตัวเลข

-   ลบสัญลักษณ์พิเศษต่าง ๆ

-   ลบชื่อคน

3.  represent text ---\> tidydata หรือ document term frequency(DTF)

```{r}
library(tidyr)
library(tidytext)
glimpse(thesis_data)

keyword <- thesis_data %>%
  select(code, starts_with("key"))

keyword %>%
  pivot_longer(cols=starts_with("key"), names_to = "keyword", values_to = "words") %>%
  mutate(words = tolower(words)) %>%
  drop_na(words) %>%
  unnest_tokens(input = "words", output = "word", token = "regex", pattern = "/") %>%
  group_by(word) %>%
  count()
  
  group_by(code, word) %>%
  count() %>%
  pairwise_similarity(word, code, )
  group_by(code) %>%
  reframe(pair = data.frame(t(combn(word,2)))) %>%
  unnest(pair)

  
library(tidytext)
library(stringr)
stop_words  
  
thesis_data %>% 
  select(code, absEN) %>%
  ## tokenization
  unnest_tokens(input = "absEN", output = "word", token = "words") %>%
  anti_join(stop_words) %>% ## เอาเฉพาะข้อมูลที่ไม่ร่วมกัน แปลว่า ตัด stopword ออก
  mutate(word = tolower(word)) %>%  ## mutate(str_remove(word, pattern = "\\D")) %>%
  ## create bag of words (BOW)
  group_by(code,word) %>% 
  count() %>%
  filter(word != "") %>%
  arrange(code,-n) %>% 
  bind_tf_idf(word, code, n) %>% 
  group_by(code) %>%
  arrange(-tf_idf) %>%
  slice_head(n=10)
## represent text

library(reticulate)
pythai <- import("pythainlp")

text <- "วันนี้เรียนทัศนภาพข้อมูล สอนอะไรก็ไม่รู้"
pythai$word_tokenize(text, keep_whitespace = F, engine = "newmm")


add_function <- function(a,b){
  ans <- a+b
  return(ans)
}


### ฟังก์ชันสำหรับตัดคำ
py_string <- '
from pythainlp.corpus.common import thai_words, thai_stopwords
words = set(thai_words())
stopwords = list(thai_stopwords())
words.add("โมเดลการวัด")
thaiwords = list(words)
'
thai <- py_run_string(py_string) %>% py_to_r()
objects(thai)
th_words<-thai$thaiwords
th_stopwords <- thai$stopwords
head(th_words)


th_words %>% length()
custom_dict <- pythai$util$Trie(th_words)


word_token <- function(text){ 

token <- lapply(text, function(t) 
                pythai$word_tokenize(t, 
                engine = "longest",
                custom_dict = custom_dict))
return(token)
} ## end of function


thesis_data %>%
  select(code, absTH) %>%
  filter(code == 1) %>%
  unnest_tokens(input = "absTH", output = "word",
                token = word_token)



  
  
  
  

```

```{python}
!pip install pythainlp

import pythainlp
?pythainlp.word_tokenize
```

## 3. Interactive Network Visualization

https://christophergandrud.github.io/networkD3/

```{r}
install.packages("networkD3")
library(networkD3)
edge_list <- data.frame(edge_list) %>% select(X1,X2, weight)
### simple network use only edge_list
simpleNetwork(edge_list, Source = 1, Target = 2,  linkDistance = 400)



### Link data (edge list)

### node data


```
