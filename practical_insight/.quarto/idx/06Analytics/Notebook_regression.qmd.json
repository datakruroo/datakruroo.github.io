{"title":"Basic Regression Example","markdown":{"yaml":{"title":"Basic Regression Example","format":"html"},"headingText":"สถานการณ์","containsRefs":false,"markdown":"\n\n\nนักวิเคราะห์ต้องการทำนายเงินเดือนของอาจารย์มหาวิทยาลัย ด้วยตัวแปรทำนายได้แก่ เพศ ตำแหน่งทางวิชาการ สาขาวิชา ประสบการณ์ในการเป็นอาจารย์ และประสบการณ์ทำงานตั้งแต่จบปริญญาเอก\n\n```{r}\nlibrary(readr)\ndat <- read_csv(\"TeacherSalaryData.csv\")\nhead(dat)\n```\n\n```{r message = F}\n#install.packages(\"tidymodels\")\nlibrary(tidymodels)\n```\n\nขั้นตอนการพัฒนาโมเดลด้วย tidymodels framework มีดังนี้\n\n### 1. แบ่งชุดข้อมูลออกเป็น training และ test set\n\n```{r}\nset.seed(123)\nsplit <- initial_split(dat, prop = 0.8)\ntrain <- training(split)\ntest <- testing(split)\n```\n\n### 2. สำรวจข้อมูลเบื้องต้น\n\n```{r eval = F}\nlibrary(DataExplorer)\nplot_intro(train)\nplot_missing(train)\nplot_bar(train)\nplot_histogram(train)\nplot_correlation(train)\n```\n\n```{r}\ntrain |> \n  ggplot(aes(x=yrs.service, y=salary))+\n  geom_point()+\n  geom_smooth(aes(col = discipline), method = \"lm\")\n\ntrain |> \n  ggplot(aes(x=yrs.since.phd, y=salary))+\n  geom_point()+\n  geom_smooth(aes(col = discipline), method = \"lm\")\n\ntrain |>\n  ggplot(aes(x=rank, y=salary))+\n  geom_boxplot(aes(fill = discipline))\n```\n\n### 3. สร้าง recipe สำหรับทำ data preprocessing ใน training set\n\n```{r}\n### recipe1: no interaction\nrec_noint <- recipe(salary ~ ., data = train) |> \n  step_select(-1) |> \n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\")),\n              discipline = factor(discipline, labels=c(\"science\",\"social\"))) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  prep(train) \n\n\n### recipe2: with interaction\nrec_int <- recipe(salary ~ ., data = train) |> \n  step_select(-1) |> \n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\")),\n              discipline = factor(discipline, labels=c(\"science\",\"social\"))) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_interact(terms = ~ yrs.service:discipline) |>\n  step_dummy(all_nominal_predictors()) |>\n  prep(train)\n```\n\n### 4. สร้าง model specification และ fit model ใน training set\n\nในกรณีนี้จะลองใช้ 4 โมเดล คือ linear regression, regularized regression, KNN และ random forest\n\n```{r}\nols_reg <- linear_reg() %>%\n  set_engine(\"lm\") %>%\n  set_mode(\"regression\")\n\nridge_reg <- linear_reg(penalty = tune(), mixture = 0) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"regression\")\n\nknn_reg <- nearest_neighbor(weight_func = \"gaussian\", neighbors = tune()) %>%\n  set_engine(\"kknn\") %>%\n  set_mode(\"regression\")\n\nrand_forest <- rand_forest(trees = 500, mtry = tune(), min_n = tune()) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n```\n\n### 5. สร้าง workflowset และ tune พารามิเตอร์\n\n```{r}\nmy_workflowset <- workflow_set(\n  preproc = list(rec_noint = rec_noint, rec_int = rec_int, rec_noint = rec_noint, rec_noint = rec_noint),\n  models = list(\n    ols = ols_reg,\n    ridge = ridge_reg,\n    knn = knn_reg,\n    rand_forest = rand_forest\n  ),\n  cross = FALSE\n)\nmy_workflowset\n```\n\nกำหนด evaluation metric และ tune hyperparameter เมื่อทำการ train เสร็จ tidymodel จะให้ผลลัพธ์เป็น tibble ที่บรรจุผลการ train ของแต่ละโมเดลเอาไว้\n\n```{r}\n## กำหนด evaluation metric\neval_metric <- metric_set(rmse, rsq)\ntrain_result <- my_workflowset |> \n  workflow_map(\n    grid = 10,\n    resamples = vfold_cv(train, v = 5, repeats = 3),\n    metrics = eval_metric\n  )\ntrain_result\n```\n\n### 6. ประเมินผลลัพธ์ของโมเดล\n\n```{r}\ntrain_result |>\n  autoplot()\n\ntrain_result |> \n  rank_results() \n\n\ntrain_result |> \n  collect_metrics() |> \n  filter(.metric == \"rsq\") |> \n  arrange(desc(mean))\n```\n\n### 7. คัด best model ไปตรวจสอบผลลัพธ์ในข้อมูล test\n\n```{r}\n### วิเคราะห์ OLS\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_noint_ols\") |>\n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\n### วิเคราะห์ Ridge Regression\n\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_int_ridge\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_ridge <- train_result |> \n  extract_workflow_set_result(id = \"rec_int_ridge\") |> \n  show_best(\"rsq\", n = 1)\n\n### วิเคราะห์ KNN algorithm\nknn_result <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_knn\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_knn <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_knn\") |> \n  show_best(\"rsq\", n = 1)\n\n### วิเคราะห์ Random Forest\n\n\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_noint_rand_forest\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_rf <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_rand_forest\") |> \n  show_best(\"rsq\", n = 1)\n```\n\n### 8. ประเมินผลใน test data\n\nเมื่อคัดเลือก best model ของแต่ละอัลกอริทึมได้แล้ว จะ train ใหม่กับข้อมูลทั้งหมด เพื่อนำไปตรวจสอบใน test data\n\n```{r}\nols_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_ols\") |>\n  fit(train)\n\nridge_trained <- train_result |> \n  extract_workflow(id = \"rec_int_ridge\") |>\n  finalize_workflow(best_ridge) |>\n  fit(train)\n\nknn_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_knn\") |>\n  finalize_workflow(best_knn) |>\n  fit(train)\n\nrf_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_rand_forest\") |>\n  finalize_workflow(best_rf) |>\n  fit(train)\n```\n\nนำโมเดลทั้งหมดไปทำนาย salary ใน test\n\n```{r}\n## data preprocessing\ntest_noint <- rec_noint |> \n              bake(test)\n\ntest_int <- rec_int |>\n            bake(test)\n\n\n## ทำนาย\nols_pred <- ols_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\nridge_pred <- ridge_trained |> \n  extract_fit_parsnip() |>\n  predict(test_int) |> \n  bind_cols(test_int) |> \n  select(salary, .pred)\n\nknn_pred <- knn_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\nrf_pred <- rf_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\npred_dat <- bind_rows(\n  ols_pred |> mutate(model = \"ols\"),\n  ridge_pred |> mutate(model = \"ridge\"),\n  knn_pred |> mutate(model = \"knn\"),\n  rf_pred |> mutate(model = \"rf\")\n)\n\npred_dat |> \n  ggplot(aes(x = salary, y = .pred)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F)+\n  facet_wrap(~model, scales = \"fixed\")\n\n```\n","srcMarkdownNoYaml":"\n\n## สถานการณ์\n\nนักวิเคราะห์ต้องการทำนายเงินเดือนของอาจารย์มหาวิทยาลัย ด้วยตัวแปรทำนายได้แก่ เพศ ตำแหน่งทางวิชาการ สาขาวิชา ประสบการณ์ในการเป็นอาจารย์ และประสบการณ์ทำงานตั้งแต่จบปริญญาเอก\n\n```{r}\nlibrary(readr)\ndat <- read_csv(\"TeacherSalaryData.csv\")\nhead(dat)\n```\n\n```{r message = F}\n#install.packages(\"tidymodels\")\nlibrary(tidymodels)\n```\n\nขั้นตอนการพัฒนาโมเดลด้วย tidymodels framework มีดังนี้\n\n### 1. แบ่งชุดข้อมูลออกเป็น training และ test set\n\n```{r}\nset.seed(123)\nsplit <- initial_split(dat, prop = 0.8)\ntrain <- training(split)\ntest <- testing(split)\n```\n\n### 2. สำรวจข้อมูลเบื้องต้น\n\n```{r eval = F}\nlibrary(DataExplorer)\nplot_intro(train)\nplot_missing(train)\nplot_bar(train)\nplot_histogram(train)\nplot_correlation(train)\n```\n\n```{r}\ntrain |> \n  ggplot(aes(x=yrs.service, y=salary))+\n  geom_point()+\n  geom_smooth(aes(col = discipline), method = \"lm\")\n\ntrain |> \n  ggplot(aes(x=yrs.since.phd, y=salary))+\n  geom_point()+\n  geom_smooth(aes(col = discipline), method = \"lm\")\n\ntrain |>\n  ggplot(aes(x=rank, y=salary))+\n  geom_boxplot(aes(fill = discipline))\n```\n\n### 3. สร้าง recipe สำหรับทำ data preprocessing ใน training set\n\n```{r}\n### recipe1: no interaction\nrec_noint <- recipe(salary ~ ., data = train) |> \n  step_select(-1) |> \n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\")),\n              discipline = factor(discipline, labels=c(\"science\",\"social\"))) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_dummy(all_nominal_predictors()) |>\n  prep(train) \n\n\n### recipe2: with interaction\nrec_int <- recipe(salary ~ ., data = train) |> \n  step_select(-1) |> \n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\")),\n              discipline = factor(discipline, labels=c(\"science\",\"social\"))) |>\n  step_normalize(all_numeric_predictors()) |>\n  step_interact(terms = ~ yrs.service:discipline) |>\n  step_dummy(all_nominal_predictors()) |>\n  prep(train)\n```\n\n### 4. สร้าง model specification และ fit model ใน training set\n\nในกรณีนี้จะลองใช้ 4 โมเดล คือ linear regression, regularized regression, KNN และ random forest\n\n```{r}\nols_reg <- linear_reg() %>%\n  set_engine(\"lm\") %>%\n  set_mode(\"regression\")\n\nridge_reg <- linear_reg(penalty = tune(), mixture = 0) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"regression\")\n\nknn_reg <- nearest_neighbor(weight_func = \"gaussian\", neighbors = tune()) %>%\n  set_engine(\"kknn\") %>%\n  set_mode(\"regression\")\n\nrand_forest <- rand_forest(trees = 500, mtry = tune(), min_n = tune()) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n```\n\n### 5. สร้าง workflowset และ tune พารามิเตอร์\n\n```{r}\nmy_workflowset <- workflow_set(\n  preproc = list(rec_noint = rec_noint, rec_int = rec_int, rec_noint = rec_noint, rec_noint = rec_noint),\n  models = list(\n    ols = ols_reg,\n    ridge = ridge_reg,\n    knn = knn_reg,\n    rand_forest = rand_forest\n  ),\n  cross = FALSE\n)\nmy_workflowset\n```\n\nกำหนด evaluation metric และ tune hyperparameter เมื่อทำการ train เสร็จ tidymodel จะให้ผลลัพธ์เป็น tibble ที่บรรจุผลการ train ของแต่ละโมเดลเอาไว้\n\n```{r}\n## กำหนด evaluation metric\neval_metric <- metric_set(rmse, rsq)\ntrain_result <- my_workflowset |> \n  workflow_map(\n    grid = 10,\n    resamples = vfold_cv(train, v = 5, repeats = 3),\n    metrics = eval_metric\n  )\ntrain_result\n```\n\n### 6. ประเมินผลลัพธ์ของโมเดล\n\n```{r}\ntrain_result |>\n  autoplot()\n\ntrain_result |> \n  rank_results() \n\n\ntrain_result |> \n  collect_metrics() |> \n  filter(.metric == \"rsq\") |> \n  arrange(desc(mean))\n```\n\n### 7. คัด best model ไปตรวจสอบผลลัพธ์ในข้อมูล test\n\n```{r}\n### วิเคราะห์ OLS\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_noint_ols\") |>\n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\n### วิเคราะห์ Ridge Regression\n\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_int_ridge\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_ridge <- train_result |> \n  extract_workflow_set_result(id = \"rec_int_ridge\") |> \n  show_best(\"rsq\", n = 1)\n\n### วิเคราะห์ KNN algorithm\nknn_result <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_knn\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_knn <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_knn\") |> \n  show_best(\"rsq\", n = 1)\n\n### วิเคราะห์ Random Forest\n\n\ntrain_result |> \n  extract_workflow_set_result(id = \"rec_noint_rand_forest\") |> \n  collect_metrics(summarise = T) |> \n  filter(.metric == \"rsq\") |> \n  arrange(-mean)\n\nbest_rf <- train_result |> \n  extract_workflow_set_result(id = \"rec_noint_rand_forest\") |> \n  show_best(\"rsq\", n = 1)\n```\n\n### 8. ประเมินผลใน test data\n\nเมื่อคัดเลือก best model ของแต่ละอัลกอริทึมได้แล้ว จะ train ใหม่กับข้อมูลทั้งหมด เพื่อนำไปตรวจสอบใน test data\n\n```{r}\nols_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_ols\") |>\n  fit(train)\n\nridge_trained <- train_result |> \n  extract_workflow(id = \"rec_int_ridge\") |>\n  finalize_workflow(best_ridge) |>\n  fit(train)\n\nknn_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_knn\") |>\n  finalize_workflow(best_knn) |>\n  fit(train)\n\nrf_trained <- train_result |> \n  extract_workflow(id = \"rec_noint_rand_forest\") |>\n  finalize_workflow(best_rf) |>\n  fit(train)\n```\n\nนำโมเดลทั้งหมดไปทำนาย salary ใน test\n\n```{r}\n## data preprocessing\ntest_noint <- rec_noint |> \n              bake(test)\n\ntest_int <- rec_int |>\n            bake(test)\n\n\n## ทำนาย\nols_pred <- ols_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\nridge_pred <- ridge_trained |> \n  extract_fit_parsnip() |>\n  predict(test_int) |> \n  bind_cols(test_int) |> \n  select(salary, .pred)\n\nknn_pred <- knn_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\nrf_pred <- rf_trained |> \n  extract_fit_parsnip() |>\n  predict(test_noint) |> \n  bind_cols(test_noint) |> \n  select(salary, .pred)\n\npred_dat <- bind_rows(\n  ols_pred |> mutate(model = \"ols\"),\n  ridge_pred |> mutate(model = \"ridge\"),\n  knn_pred |> mutate(model = \"knn\"),\n  rf_pred |> mutate(model = \"rf\")\n)\n\npred_dat |> \n  ggplot(aes(x = salary, y = .pred)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = F)+\n  facet_wrap(~model, scales = \"fixed\")\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"Notebook_regression.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","editor":"visual","urlcolor":"steelblue","linkcolor":"steelblue","theme":{"light":["pandoc","../theme.scss"]},"mainfont":"Sarabun","code-copy":true,"title":"Basic Regression Example"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}