{
  "hash": "b6ca34e54512347ef71c58dad9c05580",
  "result": {
    "markdown": "---\ntitle: \"3. Importing Data\"\nsubtitle: \"<b>Practical Insight: Doing Data Science in Education with R</b>\"\nauthor: ผศ.ดร.สิวะโชติ ศรีสุทธิยากร\nlogo: \"images/logo.png\"\nfooter: \"[Practical Insight: Doing Data Science in Education with R](https://datakruroo.netlify.app/practical_insight/_site/)\"\nformat: \n  html: default\n  revealjs:\n    output-file: importing_slide.html\n    theme: slides.scss\n    multiplex: true\n    transition: slide\n    slide-number: true\n    navigation-mode: vertical\n    scrollable: true\n    chalkboard: true\n    menu: \n      numbers: true\n    slide-tone: false\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n<br> <br>\n\n![](https://tidyverse.tidyverse.org/articles/data-science.png)\n\n# 1. ประเภทของไฟล์ข้อมูล\n\n## ประเภทของไฟล์ข้อมูล\n\nR สามารถดำเนินการร่วมกับไฟล์ข้อมูลที่หลากหลาย\n\n::: columns\n::: {.column width=\"50%\"}\n-   Flat Files\n\n-   MS Excel Files\n\n-   Statistical softwares\n\n-   Databases\n\n-   Internet\n:::\n\n::: {.column width=\"50%\"}\n![](images/image-378096185.png){fig-align=\"center\" width=\"70%\"}\n:::\n:::\n\n# 2. Flat Files\n\n## Flat Files\n\n-   เป็นไฟล์ข้อมูลที่จัดเก็บโดยไม่มีโครงสร้างตาราง และบันทึกอยู่ในรูปแบบไฟล์ข้อความ (text files)\n\n-   Flat file จำแนกได้หลายประเภท ขึ้นอยู่กับลักษณะของตัวคั่นข้อมูล (separator) เช่น CSV, TSV\n\n![ที่มา : สิวะโชติ ศรีสุทธิยากร (2564)](images/image-1019915152.png){fig-align=\"center\" width=\"45%\"}\n\n## Importing CSV Files\n\nการนําข้อมูล .csv เข้าสู่โปรแกรมสามารถใช้ฟังก์ชัน `read.csv()` โดยมีรูปแบบของคําสั่งดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread.csv(file = \"file.csv\", \n         header = TRUE, \n         stringsAsFactors = TRUE)\n```\n:::\n\n\nอาร์กิวเมนท์สำคัญของ `read.csv()` ได้แก่\n\n-   `file`\n\n-   `header`\n\n-   `stringsFactors`\n\n## กิจกรรม : นำเข้า CSV file\n\n1.  ดาวน์โหลด TeacherSalaryData.csv\n2.  นำเข้าไฟล์ข้อมูล TeacherSalaryData.csv โดยพิมพ์คำสั่งต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(file = \"TeacherSalaryData.csv\",\n                   header = TRUE)\n```\n:::\n\n\n3.  สังเกตผลลัพธ์ที่ได้ ท่านสามารถนำไฟล์ข้อมูลดังกล่าวเข้าสู่ R ได้หรือไม่ ถ้าไม่ท่านคิดว่าเกิดปัญหาอะไร\n\n## กิจกรรม : การกำหนด Working Directory\n\nการจะนำไฟล์ข้อมูลเข้าใน R ไฟล์ข้อมูลดังกล่าวจะต้องบันทึกอยู่ใน working directory ของ R\n\n![](images/image-291216502.png)\n\n## กิจกรรม : นำเข้า CSV file (revisited)\n\n1.  ดาวน์โหลด TeacherSalaryData.csv\n2.  กำหนด working directory ของ R ให้เป็น folder เดียวกันกับที่บันทึกไฟล์ข้อมูลในข้อ 1.\n3.  นำเข้าไฟล์ข้อมูล TeacherSalaryData.csv โดยพิมพ์คำสั่งต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(file = \"TeacherSalaryData.csv\",\n                   header = TRUE)\n```\n:::\n\n\n4.  ลองพิมพ์คำสั่ง `head(mydata)` ผลลัพธ์ที่ได้เป็นอย่างไร\n\n# 3. Dataframe\n\n## กิจกรรม : Dataframe\n\nลองตรวจสอบสถานะของตัวแปร `mydata` ที่เก็บไฟล์ข้อมูล csv ในข้างต้นด้วยฟังก์ชัน `class(mydata)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(mydata)\n```\n:::\n\n\nผลลัพธ์ที่ได้เป็นอย่างไร?\n\n## Dataframe\n\n-   มีโครงสร้างการเก็บข้อมูลแบบตารางคล้ายเมทริกซ์\n\n-   สามารถเก็บข้อมูลต่างประเภทอยู่ภายใต้ dataframe เดียวกันได้\n\n-   เป็นรูปแบบ input มาตรฐานตัวหนึ่ง ที่ใช้สำหรับการวิเคราะห์ข้อมูลใน R\n\n-   ข้อมูลที่นำเข้าด้วย `read.csv()` จะอยู่ในสถานะ `data.frame` โดยอัตโนมัติ\n\nเราสามารถสร้าง dataframe ได้ด้วยวิธีการในทำนองเดียวกับการสร้างเมทริกซ์ แต่ใช้ฟังก์ชัน `data.frame()` แทน ดังรูปแบบต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.frame(var1, var2, var3, ..., varp)\n```\n:::\n\n\n## ตัวอย่างการสร้าง Dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai<-c(87,72,68,78,81,92)\nmath<-c(72,63,65,74,89,91)\ngender<-c(\"M\",\"F\",\"M\",\"F\",\"F\",\"M\")\ndata<-data.frame(gender,thai,math)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender thai math\n1      M   87   72\n2      F   72   63\n3      M   68   65\n4      F   78   74\n5      F   81   89\n6      M   92   91\n```\n:::\n:::\n\n\n## การอ้างอิงสมาชิกใน dataframe\n\nผู้วิเคราะห์สามารถใช้การอ้างอิงสมาชิกของเมทริกซ์กับ dataframe ได้ทั้งหมด และ dataframe ยังมี feature พิเศษสำหรับใช้คัดเลือกตัวแปรจาก dataframe ใด ๆ ได้ดังตัวอย่างต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$thai #select thai score\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 87 72 68 78 81 92\n```\n:::\n\n```{.r .cell-code}\ndata$gender #select gender\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"M\" \"F\" \"M\" \"F\" \"F\" \"M\"\n```\n:::\n:::\n\n\n## Behind Dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6 obs. of  3 variables:\n $ gender: chr  \"M\" \"F\" \"M\" \"F\" ...\n $ thai  : num  87 72 68 78 81 92\n $ math  : num  72 63 65 74 89 91\n```\n:::\n:::\n\n\n## Summary Dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    gender               thai            math      \n Length:6           Min.   :68.00   Min.   :63.00  \n Class :character   1st Qu.:73.50   1st Qu.:66.75  \n Mode  :character   Median :79.50   Median :73.00  \n                    Mean   :79.67   Mean   :75.67  \n                    3rd Qu.:85.50   3rd Qu.:85.25  \n                    Max.   :92.00   Max.   :91.00  \n```\n:::\n:::\n\n\n## กิจกรรม : behind TeacherSalaryData.csv {#กจกรรม-behind-teachersalarydata.csv}\n\nลองใช้ฟังก์ชัน `str()` เพื่อสำรวจข้อมูลเบื้องหลังชุดข้อมูล `TeacherSalaryData.csv` ที่นำเข้ามาในกิจกรรมก่อนหน้า แล้วตอบคำถามต่อไปนี้\n\n1.  ชุดข้อมูลนี้มีหน่วยข้อมูลกี่หน่วย\n2.  มีตัวแปรกี่ตัว อะไรบ้าง\n3.  ข้อมูลของตัวแปรแต่ละตัวมีสถานะอะไรบ้าง\n\n## \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t397 obs. of  7 variables:\n $ X            : int  1 2 3 4 5 6 7 8 9 10 ...\n $ rank         : chr  \"Prof\" \"Prof\" \"AsstProf\" \"Prof\" ...\n $ discipline   : chr  \"B\" \"B\" \"B\" \"B\" ...\n $ yrs.since.phd: int  19 20 4 45 40 6 30 45 21 18 ...\n $ yrs.service  : int  18 16 3 39 41 6 23 45 20 18 ...\n $ sex          : chr  \"Male\" \"Male\" \"Male\" \"Male\" ...\n $ salary       : int  139750 173200 79750 115000 141500 97000 175000 147765 119250 129000 ...\n```\n:::\n:::\n\n\n# 4. Factors\n\n## Factors\n\nfactor เป็นตัวแปรอีกประเภทหนึ่งที่ใช้สำหรับเก็บข้อมูลจัดประเภท (categorical data) โดยเฉพาะ การเก็บข้อมูลใน Factor จะจําแนกการเก็บออกเป็น 2 ส่วน\n\n-   ค่าสังเกตของตัวแปรที่จะลงรหัสในรูปแบบของตัวเลข 1, 2, 3, ...,k เมื่อ k คือจํานวนระดับของตัวแปรจัดประเภท\n\n-   Label ของระดับหรือค่าของตัวแปรแบบ Factor โดยปกติมักใช้ตัวอักษรหรือข้อความแทนระดับของคุณลักษณะตามหมายเลข\n\n## การสร้าง factor\n\n-   การสร้าง factor สามารถทำได้หลายวิธี วิธีการสร้างโดยตรงคือการใช้ฟังก์ชัน `factor()` ดังตัวอย่างต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai <- c(87,72,68,78,81,92)\nmath <- c(72,63,65,74,89,91)\ngender <- c(\"M\",\"F\",\"M\",\"F\",\"F\",\"M\")\ngender <- factor(gender)\ndata<-data.frame(gender,thai,math)\n```\n:::\n\n\n## สำรวจ factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender thai math\n1      M   87   72\n2      F   72   63\n3      M   68   65\n4      F   78   74\n5      F   81   89\n6      M   92   91\n```\n:::\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6 obs. of  3 variables:\n $ gender: Factor w/ 2 levels \"F\",\"M\": 2 1 2 1 1 2\n $ thai  : num  87 72 68 78 81 92\n $ math  : num  72 63 65 74 89 91\n```\n:::\n:::\n\n\n## สำรวจ factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n gender      thai            math      \n F:3    Min.   :68.00   Min.   :63.00  \n M:3    1st Qu.:73.50   1st Qu.:66.75  \n        Median :79.50   Median :73.00  \n        Mean   :79.67   Mean   :75.67  \n        3rd Qu.:85.50   3rd Qu.:85.25  \n        Max.   :92.00   Max.   :91.00  \n```\n:::\n:::\n\n\n## การเปลี่ยนลำดับและ label ของ factor\n\nหากไม่ได้มีการระบุ โปรแกรมจะเรียงลำดับระดับของ factor ตามตัวอักษร หรือตามตัวเลขที่ใช้เป็นรหัสข้อมูล ฟังก์ชัน `levels()` ช่วยในการสำรวจระดับของ factor ในตัวแปรดังกล่าวได้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(data$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"F\" \"M\"\n```\n:::\n:::\n\n\nผู้วิเคราะห์สามารถเปลี่ยนลำดับ และ label ของระดับ factor ดังกล่าวผ่านอาร์กิวเมนท์ `levels` และ `labels` ของฟังก์ชัน `factor()` ดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$gender <- factor(data$gender,\n                      levels=c(\"M\",\"F\"),\n                      labels=c(\"Male\",\"Female\"))\n```\n:::\n\n\n## การเปลี่ยนลำดับและ label ของ factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6 obs. of  3 variables:\n $ gender: Factor w/ 2 levels \"Male\",\"Female\": 1 2 1 2 2 1\n $ thai  : num  87 72 68 78 81 92\n $ math  : num  72 63 65 74 89 91\n```\n:::\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    gender       thai            math      \n Male  :3   Min.   :68.00   Min.   :63.00  \n Female:3   1st Qu.:73.50   1st Qu.:66.75  \n            Median :79.50   Median :73.00  \n            Mean   :79.67   Mean   :75.67  \n            3rd Qu.:85.50   3rd Qu.:85.25  \n            Max.   :92.00   Max.   :91.00  \n```\n:::\n:::\n\n\n## กิจกรรม : behind TeacherSalaryData.csv (revisited)\n\nลองนำเข้าไฟล์ข้อมูล `TeacherSalaryData.csv` ใหม่ ด้วยฟังก์ชันต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read.csv(file = \"dataset/TeacherSalaryData.csv\",\n                   header = TRUE,\n                   stringsAsFactors = TRUE)\n```\n:::\n\n\nจากนั้นลองสำรวจชุดข้อมูลที่นำเข้าใหม่ด้วยฟังก์ชัน `str()` และ `summary()` ผลที่ได้รับมีความเหมือนหรือแตกต่างจาก[กิจกรรม : behind TeacherSalaryData.csv](#กจกรรม-behind-teachersalarydata.csv)อย่างไร\n\n# 4. MS Excels Files\n\n## Importing MS Excel files\n\nการนำเข้าไฟล์ข้อมูล .xlsx ของ MS Excel จะต้องติดตั้ง package-readxl เพิ่มเติม การดาวน์โหลดและเรียกใช้ package ดังกล่าวสามารถดำเนินการได้ดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"readxl\")\nlibrary(readxl)\n```\n:::\n\n\nการนำเข้าไฟล์ .xlsx สามารถทำได้โดยใช้ฟังก์ชัน `read_excel()` ที่มีรูปแบบของคำสั่งดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_excel(path = \"file.xlsx\",\n           sheet = 1,\n           col_names = TRUE,\n           skip = 0)\n```\n:::\n\n\n## กิจกรรม : การนำเข้า .xlsx files\n\n1.  ดาวน์โหลด Score.xlsx\n2.  พิมพ์คำสั่ง `excel_sheets(\"Score.xlsx\")` แล้วสังเกตผลลัพธ์ที่ได้\n3.  นำเข้าไฟล์ข้อมูลจาก sheet ที่ชื่อว่า Score3 ด้วยฟังก์ชัน `read_excel()`\n4.  ผลลัพธ์ที่ได้ถูกต้องหรือไม่\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 5\n   ...1   ...2  ...3  ...4  ...5\n   <chr> <dbl> <dbl> <dbl> <dbl>\n 1 M       2.7     9   4    17.6\n 2 F       2.9    22   3.2  23  \n 3 M       3.3    12   4    13.7\n 4 M       4.2    16   4.8  18  \n 5 M       4.4    23   4.5  14.9\n 6 F       4.7    20   5.2  25.8\n 7 F       5.4    17   2.7  13.8\n 8 M       5.8    22   3.7  17.6\n 9 F       6      20   5    23.3\n10 M       6      22   3.7  20.9\n11 F       6.1    20   5.6  21.2\n12 F       6.5    21   5.2  18.5\n13 F       6.6    22   6.2  29.6\n14 F       6.6    21   6.9  15.9\n15 F       6.7    25   7.1  24.6\n16 M       6.7    20   4.8  15.8\n17 M       7      24   6.4  29  \n18 M       7.8    24   6.7  29.3\n19 F       8.9    28   8    28.2\n20 F       9.1    28   5.4  28.6\n```\n:::\n:::\n\n\n## กิจกรรม : การนำเข้า .xlsx files (revisited)\n\nจากกิจกรรมที่แล้ว ลองปรับอาร์กิวเมนท์ `col_names` ให้เป็น\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_names = c(\"gender\", \"interaction\",\"pretest\",\n              \"quiz\",\"posttest\")\n```\n:::\n\n\nสังเกตผลลัพธ์ที่ได้\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 5\n   gender interaction pretest  quiz posttest\n   <chr>        <dbl>   <dbl> <dbl>    <dbl>\n 1 M              2.7       9   4       17.6\n 2 F              2.9      22   3.2     23  \n 3 M              3.3      12   4       13.7\n 4 M              4.2      16   4.8     18  \n 5 M              4.4      23   4.5     14.9\n 6 F              4.7      20   5.2     25.8\n 7 F              5.4      17   2.7     13.8\n 8 M              5.8      22   3.7     17.6\n 9 F              6        20   5       23.3\n10 M              6        22   3.7     20.9\n11 F              6.1      20   5.6     21.2\n12 F              6.5      21   5.2     18.5\n13 F              6.6      22   6.2     29.6\n14 F              6.6      21   6.9     15.9\n15 F              6.7      25   7.1     24.6\n16 M              6.7      20   4.8     15.8\n17 M              7        24   6.4     29  \n18 M              7.8      24   6.7     29.3\n19 F              8.9      28   8       28.2\n20 F              9.1      28   5.4     28.6\n```\n:::\n:::\n\n\n# 5. SPSS and other Statistical program Files\n\n## Haven package\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/image-2038599079.png){fig-align=\"left\" width=\"50%\"}\n\n-   SAS: `read_sas()`\n\n-   SPSS: `read_sav()`\n\n-   Stata: `read_dta()`\n:::\n\n::: {.column width=\"50%\"}\nในทำนองเดียวกัน ก่อนใช้ฟังก์ชันใน package-haven จะต้องดาวน์โหลด และเรียกใช้ package ดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"haven\")\nlibrary(haven)\n```\n:::\n\n:::\n:::\n\n## Importing SPSS Files\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# importing AchSolve.sav\ndat_spss <- read_spss(file = \"dataset/AchSolve.sav\")\n```\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(dat_spss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    ach solve group      \n  <dbl> <dbl> <dbl+lbl>  \n1  49.6   1.2 1 [Lecture]\n2  43.6   6.3 1 [Lecture]\n3  50.3   1.8 1 [Lecture]\n4  34.4   5.7 1 [Lecture]\n5  56.8   5.9 1 [Lecture]\n6  32.8   8   1 [Lecture]\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(dat_spss)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n    ach solve group    \n  <dbl> <dbl> <dbl+lbl>\n1  82.7  13.8 2 [PBL]  \n2  67.4  13.1 2 [PBL]  \n3  59.5  13.8 2 [PBL]  \n4  36    11.6 2 [PBL]  \n5  84.4  12.8 2 [PBL]  \n6  55.5  11.8 2 [PBL]  \n```\n:::\n:::\n\n:::\n:::\n",
    "supporting": [
      "importing_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}