{
  "hash": "6d8b8ad3875956758cfe4821b2ce8b69",
  "result": {
    "markdown": "---\ntitle: \"Analytics Example 1\"\nsubtitle: \"<b>Practical Insight: Doing Data Science in Education with R</b>\"\nauthor: ผศ.ดร.สิวะโชติ ศรีสุทธิยากร\nlogo: \"images/logo.png\"\nfooter: \"[Practical Insight: Doing Data Science in Education with R](https://datakruroo.netlify.app/practical_insight/_site/)\"\nformat: \n  html:\n    number_sections: true\neditor: visual\nexecute:\n  freeze: auto\n---\n\n\n## Types of Data Analytics\n\n<center>![](images/analytictypes.png){width=\"80%\"}</center>\n\n\n## สถานการณ์\n\nนักวิเคราะห์ต้องการทำนายเงินเดือนของอาจารย์มหาวิทยาลัย ด้วยตัวแปรทำนายได้แก่ เพศ ตำแหน่งทางวิชาการ สาขาวิชา ประสบการณ์ในการเป็นอาจารย์ และประสบการณ์ทำงานตั้งแต่จบปริญญาเอก โดยตัวแปรตามคือเงินเดือนของอาจารย์มหาวิทยาลัยที่ต้องการวิเคราะห์เป็นตัวแปรจัดประเภทที่มี 2 กลุ่ม กลุ่มแรกเป็นอาจารย์รายได้สูง (ตั้งแต่ 90,000 บาทขึ้นไป) และกลุ่มอาจารย์รายได้ปกติ\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(dplyr)\ndat <- read_csv(\"TeacherSalaryData.csv\")\nglimpse(dat, 60)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 397\nColumns: 7\n$ ...1          <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1…\n$ rank          <chr> \"Prof\", \"Prof\", \"AsstProf\", \"Prof\", …\n$ discipline    <chr> \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\", \"…\n$ yrs.since.phd <dbl> 19, 20, 4, 45, 40, 6, 30, 45, 21, 18…\n$ yrs.service   <dbl> 18, 16, 3, 39, 41, 6, 23, 45, 20, 18…\n$ sex           <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Mal…\n$ salary        <dbl> 139750, 173200, 79750, 115000, 14150…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## สร้างตัวแปรรายได้แบบจัดประเภท\ndat |> \n  mutate(high_salary = ifelse(salary >= 90000, \"high\", \"normal\"))-> dat_new\n```\n:::\n\n\n## มโนทัศน์ของการพัฒนาโมเดลทำนาย\n\nเราต้องการโมเดลทำนายที่มีคุณสมบัตื\n\n- Unbiased\n\n- Minimum variance\n\n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-1638148101.png)\n\n\n## กระบวนการพัฒนาโมเดลทำนาย\n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-1728379488.png)\n\n## Resampling \n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-468626522.png)\n\n- K-fold cross-validation\n\n- Bootstraping\n\n## K-fold cross-validation\n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-1150746472.png)\n\n\n## Tidymodels Framework\n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-258190158.png)\n\n\n- package-rsample ใช้ในงาน resampling ข้อมูล เช่นการสร้าง training/validation/test dataset การสร้าง cross-validation dataset หรือการสร้าง bootstrape dataset ซึ่งได้กล่าวการใช้งานเบื้องต้นไปแล้ว\n\n- package-recipes ใช้แปลง/แก้ปัญหาที่เกิดขึ้นในข้อมูลของตัวแปรที่ใช้ในการพัฒนาโมเดล ขั้นตอนนี้เรียกว่า feature engineering\n\n- package-parsnip ใช้ fit machine learning กับข้อมูล\n\n- package-Tune และ package-dials มีฟังก์ชันที่อำนวยความสะดวกในการ fine tune hyperparameter ของโมเดลเพื่อเพิ่มประสิทธิภาพการทำนายของโมเดลให้สูงที่สุด\n\n- package-yardstick มีฟังก์ชันของ metric ที่ใช้ประเมินประสิทธิภาพของโมเดลทำนาย\n\ntidymodels ถูกพัฒนาขึ้นโดยได้รับการออกแบบให้สามารถทำซ้ำกระบวนการพัฒนาโมเดลได้ง่าย โดยใช้ไวยกรณ์ของภาษาในลักษณะเดียวกัน และถูกออกแบบโดยเน้นใช้กับ supervised learning เป็นหลัก ผู้ใช้งานไม่จำเป็นต้องติดตั้งทุก package ในข้างต้นด้วยตนเอง แต่ติดตั้งเพียง package-tidymodels ก็สามารถใช้งานทุก package ภายใต้ framework ดังกล่าวได้แล้ว โดยการพิมพ์คำสั่งต่อไปนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"tidymodels\")\nlibrary(tidymodels)\n```\n:::\n\n\n\n### แบ่งชุดข้อมูลออกเป็น training และ test set\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123)\nsplit <- initial_split(dat_new, prop = 0.8)\ntrain <- training(split)\ntest <- testing(split)\n```\n:::\n\n\n\n\n### การสำรวจข้อมูล 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"DataExplorer\")\nlibrary(DataExplorer)\nplot_intro(train)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_missing(train)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_bar(train)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_histogram(train)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_correlation(train, maxcat = 3)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n:::\n\n\n### สำรวจข้อมูล 2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntrain |>\n  ggplot(aes(x = high_salary, y = yrs.since.phd, fill = sex))+\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntrain %>%\n  group_by(rank, discipline) |> \n  count(high_salary) |> \n  ggplot(aes(x=rank, y=n, fill=high_salary))+\n  geom_col()+\n  facet_wrap(~discipline, ncol=2)\n```\n\n::: {.cell-output-display}\n![](case1_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n\n### Data Preprocessing\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Preprocessing1 \nrecipe1_nointerc <- recipe(high_salary ~., data=train) |> \n  step_select(-salary, -...1) |>\n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\"))) |> \n  step_normalize(all_numeric_predictors()) |> \n  step_dummy(all_nominal_predictors()) |> \n  prep(data = train)\n\n## Preprocessing2\nrecipe2_withinterc <- recipe(high_salary ~., data=train) |> \n  step_select(-salary, -...1) |>\n  step_mutate(rank = factor(rank, levels=c(\"AsstProf\", \"AssocProf\", \"Prof\"))) |> \n  step_interact(terms = ~rank:discipline) |>\n  step_normalize(all_numeric_predictors()) |> \n  step_dummy(all_nominal_predictors()) |> \n  prep(data = train) \n```\n:::\n\n\n### Fitting Model using parsnip\n\n![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-538379331.png){width=\"30%\"}\nการ fit machine learning model กับข้อมูลด้วย R ในยุคเริ่มแรกค่อนข้างมีความยากลำบากพอสมควร เพราะ R ไม่ได้มี package ที่เป็น framework รวมสำหรับการ fit ML model ดังกล่าว การที่จะ fit ML model ในงานหนึ่ง ๆ ผู้วิเคราะห์อาจจะต้องยุ่งเกี่ยวกับ package จำนวนมาก เช่น\n\n- package rpart สำหรับ fit decision tree\n\n- package glmnet สำหรับ fit regularized regression model\n\n- package knn สำหรับ fit K-NN model\n\nparsnip ถูกพัฒนาขึ้นเพื่อแก้ปัญหาดังกล่าว โดยมีวัตถุประสงค์เพื่อให้ผู้วิเคราะห์สามารถ fit ML model ได้โดยใช้ไวยากรณ์เดียวกัน และไม่จำเป็นต้องรู้ถึงวิธีการทำงานของแต่ละ model ที่จะใช้ โดยในปัจจุบัน parsnip สามารถใช้ได้กับ model ที่มีอยู่ใน tidymodels ได้แก่\n\n[https://www.tidymodels.org/find/parsnip/](https://www.tidymodels.org/find/parsnip/)\n\nจากสถานการณ์ข้างต้นหากจะใช้ logistic regression เพื่อเป็นโมเดลทำนาย สามารถระบุโมเดลได้ดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogistic_model <- logistic_reg() |> \n  set_engine(\"glm\") |> \n  set_mode(\"classification\")\n```\n:::\n\n\n### สร้าง workflowset เพื่อ fit model ข้างต้น และประเมินผล\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## สร้าง workflowset\nmy_workflowset <- workflow_set(\n  preproc = list(recipe1_nointerc, recipe2_withinterc),\n  models = list(logistic_model)\n)\nmy_workflowset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A workflow set/tibble: 2 × 4\n  wflow_id              info             option    result    \n  <chr>                 <list>           <list>    <list>    \n1 recipe_1_logistic_reg <tibble [1 × 4]> <opts[0]> <list [0]>\n2 recipe_2_logistic_reg <tibble [1 × 4]> <opts[0]> <list [0]>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## กำหนด evaluation metric\neval_metric <- metric_set(roc_auc, accuracy, sens, spec, f_meas)\ntrain_result <- my_workflowset |> \n  workflow_map(\n    resamples = vfold_cv(train, v = 5),\n    metrics = eval_metric\n  )\n```\n:::\n\n\n\n### ดูผลลัพธ์จากการประเมิน\n\nผลลัพธ์ด้านล่างแสดงให้เห็นว่าโมเดลแรกให้ผลดีที่สุด\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# พิจารณา validation performance\ntrain_result |> \n  rank_results()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 9\n   wflow_id         .config .metric  mean std_err     n preprocessor model  rank\n   <chr>            <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int>\n 1 recipe_1_logist… Prepro… accura… 0.909  0.0209     5 recipe       logi…     1\n 2 recipe_1_logist… Prepro… f_meas  0.941  0.0131     5 recipe       logi…     1\n 3 recipe_1_logist… Prepro… roc_auc 0.942  0.0171     5 recipe       logi…     1\n 4 recipe_1_logist… Prepro… sens    0.940  0.0131     5 recipe       logi…     1\n 5 recipe_1_logist… Prepro… spec    0.804  0.0713     5 recipe       logi…     1\n 6 recipe_2_logist… Prepro… accura… 0.909  0.0209     5 recipe       logi…     2\n 7 recipe_2_logist… Prepro… f_meas  0.941  0.0131     5 recipe       logi…     2\n 8 recipe_2_logist… Prepro… roc_auc 0.936  0.0199     5 recipe       logi…     2\n 9 recipe_2_logist… Prepro… sens    0.940  0.0131     5 recipe       logi…     2\n10 recipe_2_logist… Prepro… spec    0.804  0.0713     5 recipe       logi…     2\n```\n:::\n\n```{.r .cell-code}\ntrain_result |> \n  collect_metrics() |> \n  filter(.metric == \"roc_auc\") |> \n  arrange(desc(mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 9\n  wflow_id          .config preproc model .metric .estimator  mean     n std_err\n  <chr>             <chr>   <chr>   <chr> <chr>   <chr>      <dbl> <int>   <dbl>\n1 recipe_1_logisti… Prepro… recipe  logi… roc_auc binary     0.942     5  0.0171\n2 recipe_2_logisti… Prepro… recipe  logi… roc_auc binary     0.936     5  0.0199\n```\n:::\n:::\n\n\nเลิือก best workflow จากผลลัพธ์ด้านบน\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_workflow <- train_result |> \n  extract_workflow(id = \"recipe_1_logistic_reg\") |> \n  fit(train)\n\ntest_rec <- recipe1_nointerc |> \n  bake(new_data = test)\n\nlibrary(caret)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: lattice\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'caret'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:yardstick':\n\n    precision, recall, sensitivity, specificity\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    lift\n```\n:::\n\n```{.r .cell-code}\ntest_pred <- best_workflow |> \n  extract_fit_parsnip() |>\n  predict(test_rec) |> \n  bind_cols(test) |> \n  mutate(high_salary = factor(high_salary, levels=c(\"high\",\"normal\"))) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `...1` -> `...2`\n```\n:::\n\n```{.r .cell-code}\nconfusionMatrix(test_pred$.pred_class, test_pred$high_salary, positive = \"high\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction high normal\n    high     55      4\n    normal    2     19\n                                         \n               Accuracy : 0.925          \n                 95% CI : (0.8439, 0.972)\n    No Information Rate : 0.7125         \n    P-Value [Acc > NIR] : 2.676e-06      \n                                         \n                  Kappa : 0.8121         \n                                         \n Mcnemar's Test P-Value : 0.6831         \n                                         \n            Sensitivity : 0.9649         \n            Specificity : 0.8261         \n         Pos Pred Value : 0.9322         \n         Neg Pred Value : 0.9048         \n             Prevalence : 0.7125         \n         Detection Rate : 0.6875         \n   Detection Prevalence : 0.7375         \n      Balanced Accuracy : 0.8955         \n                                         \n       'Positive' Class : high           \n                                         \n```\n:::\n:::\n\n\nลองนำโมเดลที่ได้มาทำนาย salary ใน test set\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrained_logistic1 <- train_result |>\n  extract_workflow(id = \"recipe_1_logistic_reg\") |> \n  select_best(metric = \"roc_auc\")\n\ntrained_logistic2 <- train_result |>\n  extract_workflow_set_result(id = \"recipe_2_logistic_reg\")\n\ntrained_logistic1 |> \n  finalize_workflow() |>\n  last_fit(split = split) -> logistic1_fit\n\npredict(trained_logistic1, test) |> \n  bind_cols(test) |> \n  select(high_salary, .pred_class, .pred_0, .pred_1)\n)\n```\n:::\n\n\n### การสรุปผลการวิเคราะห์ข้อมูล\n\n\n\n\n\n",
    "supporting": [
      "case1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}