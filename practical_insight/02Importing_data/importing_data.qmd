---
title: "3. Importing Data"
subtitle: "<b>Practical Insight: Doing Data Science in Education with R</b>"
author: ผศ.ดร.สิวะโชติ ศรีสุทธิยากร
logo: "images/logo.png"
footer: "[Practical Insight: Doing Data Science in Education with R](https://datakruroo.netlify.app/practical_insight/_site/)"
format: 
  html: default
  revealjs:
    output-file: importing_slide.html
    theme: slides.scss
    multiplex: true
    transition: slide
    slide-number: true
    navigation-mode: vertical
    scrollable: true
    chalkboard: true
    menu: 
      numbers: true
    slide-tone: false
editor: visual
execute:
  freeze: auto
---

<br> <br>

![](https://tidyverse.tidyverse.org/articles/data-science.png)

# 1. ประเภทของไฟล์ข้อมูล

## ประเภทของไฟล์ข้อมูล

R สามารถดำเนินการร่วมกับไฟล์ข้อมูลที่หลากหลาย

::: columns
::: {.column width="50%"}
-   Flat Files

-   MS Excel Files

-   Statistical softwares

-   Databases

-   Internet
:::

::: {.column width="50%"}
![](images/image-378096185.png){fig-align="center" width="70%"}
:::
:::

# 2. Flat Files

## Flat Files

-   เป็นไฟล์ข้อมูลที่จัดเก็บโดยไม่มีโครงสร้างตาราง และบันทึกอยู่ในรูปแบบไฟล์ข้อความ (text files)

-   Flat file จำแนกได้หลายประเภท ขึ้นอยู่กับลักษณะของตัวคั่นข้อมูล (separator) เช่น CSV, TSV

![ที่มา : สิวะโชติ ศรีสุทธิยากร (2564)](images/image-1019915152.png){fig-align="center" width="45%"}

## Importing CSV Files

การนําข้อมูล .csv เข้าสู่โปรแกรมสามารถใช้ฟังก์ชัน `read.csv()` โดยมีรูปแบบของคําสั่งดังนี้

```{r eval=F}
read.csv(file = "file.csv", 
         header = TRUE, 
         stringsAsFactors = TRUE)
```

อาร์กิวเมนท์สำคัญของ `read.csv()` ได้แก่

-   `file`

-   `header`

-   `stringsFactors`

## กิจกรรม : นำเข้า CSV file

1.  ดาวน์โหลด TeacherSalaryData.csv
2.  นำเข้าไฟล์ข้อมูล TeacherSalaryData.csv โดยพิมพ์คำสั่งต่อไปนี้

```{r eval=F}
mydata <- read.csv(file = "TeacherSalaryData.csv",
                   header = TRUE)
```

3.  สังเกตผลลัพธ์ที่ได้ ท่านสามารถนำไฟล์ข้อมูลดังกล่าวเข้าสู่ R ได้หรือไม่ ถ้าไม่ท่านคิดว่าเกิดปัญหาอะไร

## กิจกรรม : การกำหนด Working Directory

การจะนำไฟล์ข้อมูลเข้าใน R ไฟล์ข้อมูลดังกล่าวจะต้องบันทึกอยู่ใน working directory ของ R

![](images/image-291216502.png)

## กิจกรรม : นำเข้า CSV file (revisited)

1.  ดาวน์โหลด TeacherSalaryData.csv
2.  กำหนด working directory ของ R ให้เป็น folder เดียวกันกับที่บันทึกไฟล์ข้อมูลในข้อ 1.
3.  นำเข้าไฟล์ข้อมูล TeacherSalaryData.csv โดยพิมพ์คำสั่งต่อไปนี้

```{r eval=F}
mydata <- read.csv(file = "TeacherSalaryData.csv",
                   header = TRUE)
```

4.  ลองพิมพ์คำสั่ง `head(mydata)` ผลลัพธ์ที่ได้เป็นอย่างไร

# 3. Dataframe

## กิจกรรม : Dataframe

ลองตรวจสอบสถานะของตัวแปร `mydata` ที่เก็บไฟล์ข้อมูล csv ในข้างต้นด้วยฟังก์ชัน `class(mydata)`

```{r eval=F}
class(mydata)
```

ผลลัพธ์ที่ได้เป็นอย่างไร?

## Dataframe

-   มีโครงสร้างการเก็บข้อมูลแบบตารางคล้ายเมทริกซ์

-   สามารถเก็บข้อมูลต่างประเภทอยู่ภายใต้ dataframe เดียวกันได้

-   เป็นรูปแบบ input มาตรฐานตัวหนึ่ง ที่ใช้สำหรับการวิเคราะห์ข้อมูลใน R

-   ข้อมูลที่นำเข้าด้วย `read.csv()` จะอยู่ในสถานะ `data.frame` โดยอัตโนมัติ

เราสามารถสร้าง dataframe ได้ด้วยวิธีการในทำนองเดียวกับการสร้างเมทริกซ์ แต่ใช้ฟังก์ชัน `data.frame()` แทน ดังรูปแบบต่อไปนี้

```{r eval=F}
data.frame(var1, var2, var3, ..., varp)
```

## ตัวอย่างการสร้าง Dataframe

```{r}
thai<-c(87,72,68,78,81,92)
math<-c(72,63,65,74,89,91)
gender<-c("M","F","M","F","F","M")
data<-data.frame(gender,thai,math)
data
```

## การอ้างอิงสมาชิกใน dataframe

ผู้วิเคราะห์สามารถใช้การอ้างอิงสมาชิกของเมทริกซ์กับ dataframe ได้ทั้งหมด และ dataframe ยังมี feature พิเศษสำหรับใช้คัดเลือกตัวแปรจาก dataframe ใด ๆ ได้ดังตัวอย่างต่อไปนี้

```{r}
data$thai #select thai score
data$gender #select gender
```

## Behind Dataframe

```{r}
str(data)
```

## Summary Dataframe

```{R}
summary(data)
```

## กิจกรรม : behind TeacherSalaryData.csv {#กจกรรม-behind-teachersalarydata.csv}

ลองใช้ฟังก์ชัน `str()` เพื่อสำรวจข้อมูลเบื้องหลังชุดข้อมูล `TeacherSalaryData.csv` ที่นำเข้ามาในกิจกรรมก่อนหน้า แล้วตอบคำถามต่อไปนี้

1.  ชุดข้อมูลนี้มีหน่วยข้อมูลกี่หน่วย
2.  มีตัวแปรกี่ตัว อะไรบ้าง
3.  ข้อมูลของตัวแปรแต่ละตัวมีสถานะอะไรบ้าง

## 

```{r echo=F}
mydata <- read.csv(file = "dataset/TeacherSalaryData.csv",
                   header = TRUE)
str(mydata)
```

# 4. Factors

## Factors

factor เป็นตัวแปรอีกประเภทหนึ่งที่ใช้สำหรับเก็บข้อมูลจัดประเภท (categorical data) โดยเฉพาะ การเก็บข้อมูลใน Factor จะจําแนกการเก็บออกเป็น 2 ส่วน

-   ค่าสังเกตของตัวแปรที่จะลงรหัสในรูปแบบของตัวเลข 1, 2, 3, ...,k เมื่อ k คือจํานวนระดับของตัวแปรจัดประเภท

-   Label ของระดับหรือค่าของตัวแปรแบบ Factor โดยปกติมักใช้ตัวอักษรหรือข้อความแทนระดับของคุณลักษณะตามหมายเลข

## การสร้าง factor

-   การสร้าง factor สามารถทำได้หลายวิธี วิธีการสร้างโดยตรงคือการใช้ฟังก์ชัน `factor()` ดังตัวอย่างต่อไปนี้

```{r}
thai <- c(87,72,68,78,81,92)
math <- c(72,63,65,74,89,91)
gender <- c("M","F","M","F","F","M")
gender <- factor(gender)
data<-data.frame(gender,thai,math)
```

## สำรวจ factor

```{r}
data
str(data)
```

## สำรวจ factor

```{r}
summary(data)
```

## การเปลี่ยนลำดับและ label ของ factor

หากไม่ได้มีการระบุ โปรแกรมจะเรียงลำดับระดับของ factor ตามตัวอักษร หรือตามตัวเลขที่ใช้เป็นรหัสข้อมูล ฟังก์ชัน `levels()` ช่วยในการสำรวจระดับของ factor ในตัวแปรดังกล่าวได้

```{r}
levels(data$gender)
```

ผู้วิเคราะห์สามารถเปลี่ยนลำดับ และ label ของระดับ factor ดังกล่าวผ่านอาร์กิวเมนท์ `levels` และ `labels` ของฟังก์ชัน `factor()` ดังนี้

```{r}
data$gender <- factor(data$gender,
                      levels=c("M","F"),
                      labels=c("Male","Female"))
```

## การเปลี่ยนลำดับและ label ของ factor

```{r}
str(data)
summary(data)
```

## กิจกรรม : behind TeacherSalaryData.csv (revisited)

ลองนำเข้าไฟล์ข้อมูล `TeacherSalaryData.csv` ใหม่ ด้วยฟังก์ชันต่อไปนี้

```{r echo=T}
mydata <- read.csv(file = "dataset/TeacherSalaryData.csv",
                   header = TRUE,
                   stringsAsFactors = TRUE)
```

จากนั้นลองสำรวจชุดข้อมูลที่นำเข้าใหม่ด้วยฟังก์ชัน `str()` และ `summary()` ผลที่ได้รับมีความเหมือนหรือแตกต่างจาก[กิจกรรม : behind TeacherSalaryData.csv](#กจกรรม-behind-teachersalarydata.csv)อย่างไร

# 4. MS Excels Files

## Importing MS Excel files

การนำเข้าไฟล์ข้อมูล .xlsx ของ MS Excel จะต้องติดตั้ง package-readxl เพิ่มเติม การดาวน์โหลดและเรียกใช้ package ดังกล่าวสามารถดำเนินการได้ดังนี้

```{r eval=F}
install.packages("readxl")
library(readxl)
```

การนำเข้าไฟล์ .xlsx สามารถทำได้โดยใช้ฟังก์ชัน `read_excel()` ที่มีรูปแบบของคำสั่งดังนี้

```{r eval=F}
read_excel(path = "file.xlsx",
           sheet = 1,
           col_names = TRUE,
           skip = 0)
```

## กิจกรรม : การนำเข้า .xlsx files

1.  ดาวน์โหลด Score.xlsx
2.  พิมพ์คำสั่ง `excel_sheets("Score.xlsx")` แล้วสังเกตผลลัพธ์ที่ได้
3.  นำเข้าไฟล์ข้อมูลจาก sheet ที่ชื่อว่า Score3 ด้วยฟังก์ชัน `read_excel()`
4.  ผลลัพธ์ที่ได้ถูกต้องหรือไม่

```{r echo=F}
library(readxl)
dat <- read_excel("dataset/Score.xlsx",
                  sheet = 2,
                  col_names = FALSE)
dat
```

## กิจกรรม : การนำเข้า .xlsx files (revisited)

จากกิจกรรมที่แล้ว ลองปรับอาร์กิวเมนท์ `col_names` ให้เป็น

```{r eval=F}
col_names = c("gender", "interaction","pretest",
              "quiz","posttest")
```

สังเกตผลลัพธ์ที่ได้

```{r echo=F}
dat <- read_excel("dataset/Score.xlsx",
                  sheet = 2,
                  col_names = c("gender", "interaction","pretest","quiz","posttest"))
dat
```

# 5. SPSS and other Statistical program Files

## Haven package

::: columns
::: {.column width="50%"}
![](images/image-2038599079.png){fig-align="left" width="50%"}

-   SAS: `read_sas()`

-   SPSS: `read_sav()`

-   Stata: `read_dta()`
:::

::: {.column width="50%"}
ในทำนองเดียวกัน ก่อนใช้ฟังก์ชันใน package-haven จะต้องดาวน์โหลด และเรียกใช้ package ดังนี้

```{r eval=F}
install.packages("haven")
library(haven)
```
:::
:::

## Importing SPSS Files

```{r echo=F}
library(haven)
```

```{r}
# importing AchSolve.sav
dat_spss <- read_spss(file = "dataset/AchSolve.sav")
```

::: columns
::: {.column width="50%"}
```{r}
head(dat_spss)
```
:::

::: {.column width="50%"}
```{r}
tail(dat_spss)
```
:::
:::
