bind_cols(test)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_saslary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(., reference = high_salary)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(., reference = high_salary)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high")))
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(., reference = "high_salary")
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("high","normal"))) |>
confusionMatrix(., reference = "high_salary")
"normal
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(., reference = "high_salary")
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(reference = "high_salary")
?confusionMatrix
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
caret::confusionMatrix(reference = "high_salary")
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
caret::confusionMatrix(position = "high")
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
caret::confusionMatrix(.pred_class, high_salary)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high")))
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
caret::confusionMatrix(.pred_class, high_salary)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high")))
train_result |>
collect_metrics() |>
filter(.metric == "roc_auc") |>
arrange(desc(mean))
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test)
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high")))
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(data = ., reference = high_salary, positive = "high")
best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high"))) |>
confusionMatrix(reference = high_salary, positive = "high")
test_pred <- best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("normal","high")))
test_pred$.pred_class
confusionMatrix(test_pred$.pred_class, test_pred$high_salary, positive = "high")
test_pred <- best_workflow |>
extract_fit_parsnip() |>
predict(test_rec) |>
bind_cols(test) |>
mutate(high_salary = factor(high_salary, levels=c("high","normal")))
confusionMatrix(test_pred$.pred_class, test_pred$high_salary, positive = "high")
library(readr)
dat <- read_csv("TeacherSalaryData.csv")
head(dat)
plot_correlation(train)
set.seed(123)
split <- initial_split(dat, prop = 0.8)
train <- training(split)
test <- testing(split)
plot_correlation(train)
rec1 <- recipe(Salary ~ ., data = train) |>
step_mutate(-1) |>
juice()
glimpse(train)
### recipe1
rec1 <- recipe(salary ~ ., data = train) |>
step_mutate(-1) |>
juice()
### recipe1
rec1 <- recipe(salary ~ ., data = train) |>
step_mutate(-1) |>
prep(train) |>
juice()
rec1
### recipe1
rec1 <- recipe(salary ~ ., data = train) |>
step_mutate(-...1) |>
prep(train) |>
juice()
rec1
### recipe1
rec1 <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
prep(train) |>
juice()
rec1
### recipe1
rec1 <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
prep(train) |>
juice()
rec1
### recipe1: no interaction
rec_noint <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_dummy(all_nominal_predictors()) |>
prep(train)
train |>
ggplot(aes(x=yrs.service, y=salary))+
geom_point()
train |>
ggplot(aes(x=yrs.service, y=salary))+
geom_point()+
geom_smooth(aes(col = rank))
train |>
ggplot(aes(x=yrs.service, y=salary))+
geom_point()+
geom_smooth(aes(col = discipline))
train |>
ggplot(aes(x=yrs.service, y=salary))+
geom_point()+
geom_smooth(aes(col = discipline), method = "lm")
train |>
ggplot(aes(x=yrs.since.phd, y=salary))+
geom_point()+
geom_smooth(aes(col = discipline), method = "lm")
train |>
ggplot(aes(x=rank, y=salary))+
geom_boxplot(aes(fill = sex))
train |>
ggplot(aes(x=rank, y=salary))+
geom_boxplot(aes(fill = discipline))
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_dummy(all_nominal_predictors()) |>
step_interact(terms = ~ year.service:discipline) |>
prep(train)
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_dummy(all_nominal_predictors()) |>
step_interact(terms = ~ yrs.service:discipline) |>
prep(train)
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_dummy(all_nominal_predictors()) |>
step_interact(terms = ~ yrs.service:discipline) |>
prep(train)
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_interact(terms = ~ yrs.service:discipline) |>
step_dummy(all_nominal_predictors()) |>
prep(train)
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_interact(terms = ~ yrs.service:discipline) |>
step_dummy(all_nominal_predictors()) |>
prep(train)  |>
juice()
rec_int
![](https://datakruroo.netlify.app/mlcourse/_site/documents/images/image-343319787.png)
train |>
ggplot(aes(x=yrs.service, y=salary))+
geom_point()+
geom_smooth(aes(col = discipline), method = "lm")
?nearest_neighbor
ols_reg <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
ridge_reg <- linear_reg(penalty = tune(), mixture = 0) %>%
set_engine("glmnet") %>%
set_mode("regression")
knn_reg <- nearest_neighbor(weight_func = "gaussian", neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("regression")
### recipe1: no interaction
rec_noint <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_dummy(all_nominal_predictors()) |>
prep(train)
### recipe2: with interaction
rec_int <- recipe(salary ~ ., data = train) |>
step_select(-1) |>
step_mutate(rank = factor(rank, levels=c("AsstProf", "AssocProf", "Prof")),
discipline = factor(discipline, labels=c("science","social"))) |>
step_normalize(all_numeric_predictors()) |>
step_interact(terms = ~ yrs.service:discipline) |>
step_dummy(all_nominal_predictors()) |>
prep(train)
my_workflowset <- workflow_set(
preproc = list("rec_noint", "rec_int"),
models = list(
ols = ols_reg,
ridge = ridge_reg,
),
cross = TRUE
)
ols_reg <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
ridge_reg <- linear_reg(penalty = tune(), mixture = 0) %>%
set_engine("glmnet") %>%
set_mode("regression")
knn_reg <- nearest_neighbor(weight_func = "gaussian", neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("regression")
my_workflowset <- workflow_set(
preproc = list("rec_noint", "rec_int"),
models = list(
ols = ols_reg,
ridge = ridge_reg,
),
cross = TRUE
)
my_workflowset <- workflow_set(
preproc = list("rec_noint", "rec_int"),
models = list(
ols = ols_reg,
ridge = ridge_reg
),
cross = TRUE
)
my_workflowset <- workflow_set(
preproc = list(rec_noint, rec_int),
models = list(
ols = ols_reg,
ridge = ridge_reg
),
cross = TRUE
)
my_workflowset
my_workflowset
my_workflowset <- workflow_set(
preproc = list(rec_noint = rec_noint, rec_int = rec_int),
models = list(
ols = ols_reg,
ridge = ridge_reg
),
cross = TRUE
)
my_workflowset
## กำหนด evaluation metric
eval_metric <- metric_set(rmse, rsq)
train_result <- my_workflowset |>
workflow_map(
resamples = vfold_cv(train, v = 5, repeats = 3),
metrics = eval_metric
)
train_result
train_result |>
autoplot(metric = "rsq")
train_result <- my_workflowset |>
workflow_map(
grid = 10,
resamples = vfold_cv(train, v = 5, repeats = 3),
metrics = eval_metric
)
train_result
train_result |>
autoplot(metric = "rsq")
train_result |>
rank_results(metric = "rmse")
train_result |>
rank_results()
ols_reg <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
ridge_reg <- linear_reg(penalty = tune(), mixture = 0) %>%
set_engine("glmnet") %>%
set_mode("regression")
knn_reg <- nearest_neighbor(weight_func = "gaussian", neighbors = tune()) %>%
set_engine("kknn") %>%
set_mode("regression")
my_workflowset <- workflow_set(
preproc = list(rec_noint = rec_noint, rec_int = rec_int, rec_noint = rec_noint),
models = list(
ols = ols_reg,
ridge = ridge_reg,
knn = knn_reg
),
cross = FALSE
)
my_workflowset
## กำหนด evaluation metric
eval_metric <- metric_set(rmse, rsq)
train_result <- my_workflowset |>
workflow_map(
grid = 10,
resamples = vfold_cv(train, v = 5, repeats = 3),
metrics = eval_metric
)
train_result
install.packages("kknn")
## กำหนด evaluation metric
eval_metric <- metric_set(rmse, rsq)
train_result <- my_workflowset |>
workflow_map(
grid = 10,
resamples = vfold_cv(train, v = 5, repeats = 3),
metrics = eval_metric
)
train_result
train_result |>
rank_results()
rand_forest <- rand_forest(trees = 500, mtry = tune(), min_n = tune()) %>%
set_engine("ranger") %>%
set_mode("regression")
my_workflowset <- workflow_set(
preproc = list(rec_noint = rec_noint, rec_int = rec_int, rec_noint = rec_noint, rec_noint = rec_noint),
models = list(
ols = ols_reg,
ridge = ridge_reg,
knn = knn_reg,
rand_forest = rand_forest
),
cross = FALSE
)
my_workflowset
## กำหนด evaluation metric
eval_metric <- metric_set(rmse, rsq)
train_result <- my_workflowset |>
workflow_map(
grid = 10,
resamples = vfold_cv(train, v = 5, repeats = 3),
metrics = eval_metric
)
train_result
train_result |>
rank_results()
train_result |>
autoplot()
train_result |>
autoplot()
train_result |>
rank_results()
train_result |>
collect_metrics() |>
filter(.metric == "rsq") |>
arrange(desc(mean))
train_result |>
collect_metrics(summarize = F) |>
filter(.metric == "rsq") |>
arrange(desc(mean))
train_result |>
show_best(metric = "rsq", n =5)
train_result |>
collect_metrics() |>
filter(.metric == "rsq") |>
arrange(desc(mean))
train_result |>
rank_results()
train_result |>
extract_workflow(.config = "Preprocessor1_Model9")
train_result |>
extract_workflow(id = "rec_noint_knn")
best_workflow <- train_result |>
extract_workflow_set_result(id = "rec_noint_knn")
best_workflow
knn_result |>
collect_metrics(summarise = T)
knn_result <- train_result |>
extract_workflow_set_result(id = "rec_noint_knn")
knn_result |>
collect_metrics(summarise = T)
knn_result |>
collect_metrics(summarise = T) |>
filter(.metric == "rsq") |>
arrange(-mean)
knn_result |>
extract_best_hyperparameters()
knn_result |>
show_best("rsq", n = 1)
knn_result |>
show_best("rsq", n = 1) |>
extract_workflow()
best_knn <- knn_result |>
show_best("rsq", n = 1)
best_knn
?extract_workflow
train_result |>
extract_workflow() |>
finalize_workflow(best_knn)
train_result |>
extract_workflow() |>
finalize_workflow(best_knn[1,])
train_result |>
extract_workflow()
train_result |>
extract_workflow(id = "rec_noint_knn") |>
finalize_workflow(best_knn[1,])
### วิเคราะห์ OLS
ols_result <- train_result |>
extract_workflow_set_result(id = "rec_noint_ols")
ols_result
ols_result |>
collect_metrics(summarise = T) |>
filter(.metric == "rsq") |>
arrange(-mean)
ridge_result |>
collect_metrics(summarise = T) |>
filter(.metric == "rsq") |>
arrange(-mean)
ridge_result <- train_result |>
extract_workflow_set_result(id = "rec_noint_ridge")
ridge_result |>
collect_metrics(summarise = T) |>
filter(.metric == "rsq") |>
arrange(-mean)
ridge_result <- train_result |>
extract_workflow_set_result(id = "rec_noint_ridge")
ridge_result <- train_result |>
extract_workflow_set_result(id = "rec_int_ridge")
ridge_result |>
collect_metrics(summarise = T) |>
filter(.metric == "rsq") |>
arrange(-mean)
best_ridge <- ridge_result |>
show_best("rsq", n = 1)
best_ridge
knn_result |>
extract_workflow() |>
finalize_workflow(best_knn)
