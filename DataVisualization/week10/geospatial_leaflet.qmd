---
title: "Geospatial Data Visualization using Leaflet"
author: "Siwachoat Srisuttiyakorn"
date: "2024-11-02"
categories: [data visualization, geospatial, sf, leaflet]
message: false
warning: false
toc: true
number-sections: true
bibliography: reference.bib
---


```{r}
library(sf)
library(tidyverse)
thai_prov_map <- st_read("/Users/choat/Downloads/tha_adm_rtsd_itos_20210121_shp/tha_admbnda_adm1_rtsd_20220121.shp")
```



## Geospatial Maps with `{leaflet}`

`{leaflet}` เป็น library ที่ถูกออกแบบมาเพื่อสร้างทัศนภาพข้อมูลเชิงพื้นที่แบบ interactive บน website โดยใช้ภาษา JavaScript และ HTML ในการสร้างแผนที่ ใน R เราสามารถใช้ `{leaflet}` ร่วมกับ `{sf}` ในบริบทของ Data Science การใช้ leaflet มีประโยชน์มากโดยเฉพาะด้านการนำเสนอหรือสื่อสารข้อมูล

-   นำเสนอผลการวิเคราะห์/สารสนเทศที่อิงกับตำแหน่งเชิงภูมิศาสตร์

-   ทำความเข้าใจ attribute ร่วมกับบริบทเชิงพื้นที่ ซึ่งอาจช่วยให้ผู้ใช้ทำความเข้าใจความสัมพันธ์ระหว่างคุณลักษณะของหน่วยข้อมูลกับพื้นที่เชิงภูมิศาสตร์

-   การสร้างแผนที่ที่สามารถปรับเปลี่ยนได้ตามความต้องการ ช่วยให้ผู้ใช้สามารถสำรวจจข้อมูลด้วยตนเองได้ง่าย และลดความซับซ้อนในการสื่อสารข้อมูล





โครงสร้างของแผนภาพแบบ leaflet ประกอบด้วย layer ของทัศนภาพหลายชั้นซ้อนกันในทำนองเดียวกับ `{ggplot2}`

-   layer แรกกำหนดด้วยฟังก์ชัน `leaflet()` ซึ่งเป็น layer หลักของแผนที่ ทำนองเดียวกับ `ggplot()`

-   `addTiles()` เป็น layer ที่ใช้เพิ่มแผนที่พื้นฐาน ซึ่งสามารถเลือกใช้แผนที่จาก OpenStreetMap, Stamen, Esri หรือ Mapbox ได้

-   การเชื่อมต่อกันระหว่าง layer จะใช้ piping operator `%>%`

พิจารณาผลลัพธ์ที่ได้จาก syntax ด้านล่าง

```{r}
## install.packages("leaflet")
library(leaflet)
leaflet() %>% 
  addTiles()
```

### Map Providers

leaflet สามารถเลือกใช้แผนที่พื้นฐานจากหลายแหล่ง ซึ่งสามารถกำหนดได้ด้วย ้ฟังก์ชัน `addProviderTiles()` โดยระบุชื่อของแหล่งที่ต้องการใช้ ตัวอย่างเช่น

```{r}
leaflet() %>% 
  addProviderTiles(provider = "Stadia.AlidadeSmoothDark")

leaflet() %>%
  addProviderTiles(providers$CyclOSM)

leaflet() %>% 
  addProviderTiles(providers$Esri.WorldImagery)
```

รายการแผนที่พื้นฐานที่สามารถเลือกใช้ได้อาจเลือกดูจาก <https://leaflet-extras.github.io/leaflet-providers/preview/> หรือใช้คำสั่ง

```{r}
leaflet::providers %>% head()
```

### Adding Polygons in leaflet

เราสามารถเติม geometry ของข้อมูลเชิงพื้นที่ใน leaflet ได้โดยใช้ `addPolygons()` ฟังก์ชันนี้จะต้องทำงานร่วมกับ `{sf}`

```{r}
thai_prov_map
```


```{r}
mymap <- leaflet() %>% 
  addTiles() %>% 
  addPolygons(data = thai_prov_map,
              col = "steelblue",
              label = ~ADM1_TH)
mymap
```

### Setting View

เราสามารถกำหนดขอบเขตของแผนที่ได้ โดยใช้ฟังก์ชัน `setView()` ซึ่งระบุพิกัดลองและละติจูดของจุดศูนย์กลางของแผนที่ และระดับการซูมของแผนที่ ดังตัวอย่างต่อไปนี้

```{r  eval = F}

mymap %>% 
  setView(lng = 100, lat = 15, zoom = 4)

```

นอกจากการกำหนดตำแหน่ง เรายังสามารถจำกัดขอบเขตของแผนที่เพื่อควบคุมการซูมเข้าออกได้ด้วยการระบุพิกัดของจุดสองจุดในซ้ายล่างและขวาบนของแผนที่ โดยใช้ `setMaxBounds()` ดังนี้

เราสามารถจัดกระทำส่วนชุดข้อมูลของ `{sf}` ก่อนการนำเสนอใน leaflet ได้เช่น ต้องการนำเสนอเฉพาะในจังหวัดเชียงใหม่

```{r  eval = F}
cmx <- thai_prov_map %>% 
  filter(ADM1_TH == "เชียงใหม่")
centroid <- st_centroid(st_union(cmx))
centroid_coords <- st_coordinates(centroid)

cmx_map <- leaflet() %>% 
  # ซูมไปยังพื้นที่เชียงใหม่
  setView(lng = centroid_coords[1], lat = centroid_coords[2], zoom = 7) %>% 
  setMaxBounds(centroid_coords[1]-0.01, centroid_coords[2]-0.01, 
               centroid_coords[1]+0.01, centroid_coords[2]+0.01) %>% 
  addTiles() %>% 
  addPolygons(
    data = thai_prov_map %>%
                filter(ADM1_TH == "เชียงใหม่"),
    fillColor = "lightgray",
    color = "blue",
    weight = 2,
    opacity = 1,
    fillOpacity = 0.7,
    label = "จังหวัดเชียงใหม่"
  ) %>% 
  leafletOptions(zoomControl = FALSE)

cmx_map 
```

### Adding Markers

เราสามารถเพิ่ม marker บนแผนที่ได้โดยใช้ `addMarkers()`, `addCircle()`, `addCircleMarkers()` หรือ `addPopups()`

```{r  eval = F}
library(leaflet)

## สร้างชุดข้อมูลฝั่ง attribute

example_data <- read_csv("example_data.csv")

aggregate_data <- example_data %>% 
  filter(student_level == "p6") %>% 
  group_by(province, school_lon, school_lat, school_size, hard_to_reach, school_code3) %>% 
  summarise(avg_risk = mean(risk_index_df5)) %>% 
  filter(province == "เชียงใหม่")


# สร้างพาเลตสีสำหรับค่า avg_risk
risk_palette <- colorBin(palette = "plasma", 
                         domain = aggregate_data$avg_risk, 
                         bins = c(0,0.6,0.8,1.0))

# ตั้งค่า zoom ที่ต้องการ (ตัวอย่างใช้ระดับ zoom = 10)
zoom_level <- 7

leaflet() %>% 
  # ตั้งค่า zoom คงที่และระบุตำแหน่งที่ต้องการ
  setView(lng = centroid_coords[1], lat = centroid_coords[2], zoom = zoom_level) %>%
  
  # เพิ่มแผนที่พื้นหลังและปิดการซูมด้วย scroll wheel
  addTiles(options = tileOptions(zoomControl = FALSE)) %>%
    addPolygons(data = thai_prov_map %>%
                filter(ADM1_TH == "เชียงใหม่"),
              col = "steelblue") %>%
  # เพิ่ม Circle Markers
  addCircleMarkers(
    data = aggregate_data,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),  
    fillOpacity = 0.8,
    radius = 3,
    stroke = TRUE,
    opacity = 1,
    popup = ~paste("<b>ระดับชั้นประถมศึกษาปีที่ 6</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2))
  ) %>%
  addLegend(
    "bottomright",
    pal = risk_palette,
    values = aggregate_data$avg_risk,
    title = "Risk Score",
    opacity = 1,
    labFormat = function(type, cuts, p) {
      labels <- c("Low", "Moderate", "High")  # กำหนด labels ที่ต้องการ
    }
  ) %>% 
  addMiniMap(tiles = "OpenStreetMap.Mapnik",
             zoomAnimation = T)
```

### clusterOptions

เราสามารถกำหนดอาร์กิวเมนท์ `clusterOptions = markerClusterOptions()` เพื่อให้ leaflet จัดกลุ่ม marker ที่อยู่ในพื้นที่ใกล้เคียงเข้าด้วยกัน ทำให้การสำรวจทำความเข้าใจแผนที่ได้สะดวกขึ้น

```{r eval = F}

leaflet() %>% 
  # ตั้งค่า zoom คงที่และระบุตำแหน่งที่ต้องการ
  setView(lng = centroid_coords[1], lat = centroid_coords[2], zoom = zoom_level) %>%
  
  # เพิ่มแผนที่พื้นหลังและปิดการซูมด้วย scroll wheel
  addTiles(options = tileOptions(zoomControl = FALSE)) %>%
    addPolygons(data = thai_prov_map %>%
                filter(ADM1_TH == "เชียงใหม่"),
              col = "steelblue") %>%
  # เพิ่ม Circle Markers
  addCircleMarkers(
    data = aggregate_data,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),  
    fillOpacity = 0.8,
    radius = 3,
    stroke = TRUE,
    opacity = 1,
    clusterOptions = markerClusterOptions(),
    popup = ~paste("<b>ระดับชั้นประถมศึกษาปีที่ 6</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2))
  ) %>%
  addLegend(
    "bottomright",
    pal = risk_palette,
    values = aggregate_data$avg_risk,
    title = "Risk Score",
    opacity = 1,
    labFormat = function(type, cuts, p) {
      labels <- c("Low", "Moderate", "High")  # กำหนด labels ที่ต้องการ
    }
  ) %>% 
  addMiniMap(tiles = "OpenStreetMap.Mapnik",
             zoomAnimation = T)
  
```

### Adding LayersControl

หลายครั้งเราอาจมีข้อมูลหลายมิติที่จะต้องแสดงบนแผนที่ การนำเสนอทุกมิติพร้อมกันอาจทำให้เกิดความสับสนหรือทำความเข้าใจสารสนเทศได้ยาก ในกรณีนี้เราสามารถใช้ `addLayersControl()` เพื่อเพิ่มปุ่มควบคุมเพื่อเปิด-ปิด layer ต่าง ๆ ได้

```{r eval = F}
library(leaflet)
library(akima)
library(sf)
library(terra)
library(dplyr)

# 1. สร้าง grid จากข้อมูล school_lon, school_lat, avg_risk
interpolated <- with(aggregate_data, 
                     interp(x = school_lon, y = school_lat, z = avg_risk, 
                            xo = seq(min(school_lon), max(school_lon), length = 100),
                            yo = seq(min(school_lat), max(school_lat), length = 100),
                            duplicate = "mean"
))

# 2. แปลงเป็น raster สำหรับสร้าง contour
r <- rast(interpolated)

# 3. สร้าง contour lines จากข้อมูล raster
contours <- terra::as.contour(r, levels = seq(min(values(r), na.rm = TRUE), max(values(r), na.rm = TRUE), by = 0.1))

# 4. แปลง contour lines เป็น sf สำหรับการแสดงผลใน leaflet
contours_sf <- st_as_sf(contours)

# 5. สร้างเงื่อนไขเพื่อแบ่งกลุ่มตามระดับความเสี่ยง
low_risk <- aggregate_data %>% filter(avg_risk < 0.6)
moderate_risk <- aggregate_data %>% filter(avg_risk >= 0.6 & avg_risk < 0.8)
high_risk <- aggregate_data %>% filter(avg_risk >= 0.8)

```

syntax ข้างต้นทำหน้าที่ สร้างข้อมูล grid ของตำแหน่งโรงเรียน (school_lon, school_lat) และค่าตัวแปร (avg_risk) โดยใช้ฟังก์ชัน interp() จากแพ็กเกจ akima (interpolate เป็นการสร้างข้อมูลใหม่จากข้อมูลที่มีอยู่โดยใช้ข้อมูลที่มีอยู่เป็นตัวแปรอ้างอิง ในลักษณะการเชื่อมต่อจุดข้อมูล)

ผลลัพธ์จากการสร้าง grid ข้างต้นทำให้นำไปใช้ในการสร้าง contour หรือ heatmap บนแผนที่ได้ใน leaflet จาก syntax จะเห็นว่ามีการสร้าง grid ขนาด 100x100 และมีขอบเขตอยู่ภายใต้ข้อมูล lattitude และ longtitude ของโรงเรียนทั้งหมดใน `aggregate_data`

-   `interp()` ทำหน้าที่ประมาณ coordinate บนพื้นผิวแบบ 2D โดยใช้ข้อมูลที่กำหนด

-   `x = school_lon, y = school_lat` กำหนดข้อมูล latitude และ longitude ของโรงเรียนที่ใช้เป็นต้นแบบในการประมาณ grid

-   `z = avg_risk` กำหนดข้อมูลที่จะใช้ประมาณ surface ของ grid



```{r  eval = F}
# 6. สร้างแผนที่ leaflet และเพิ่ม contour lines

leaflet() %>%
  # เพิ่มแผนที่พื้นหลัง
  addTiles(group = "Base Map") %>%
  
  # เพิ่ม Polygon ของจังหวัดเชียงใหม่
  addPolygons(
    data = thai_prov_map %>% filter(ADM1_TH == "เชียงใหม่"),
    color = "black",
    fillOpacity = 0.2,
    weight = 2,
    label = ~ADM1_TH,
    group = "Chiang Mai Boundary"
  ) %>%
  
  # เพิ่ม contour lines
  addPolylines(
    data = contours_sf,
    color = ~risk_palette(level),
    weight = 1.5,
    opacity = 0.8,
    label = ~paste("Risk Level:", round(level, 2)),
    group = "Contour Lines"
  ) %>%
  
  # เพิ่ม Circle Markers สำหรับแต่ละกลุ่มความเสี่ยง
  addCircleMarkers(
    data = low_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: ต่ำ</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "Low Risk School"
  ) %>%
  addCircleMarkers(
    data = moderate_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: ปานกลาง</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "Moderate Risk School"
  ) %>%
  addCircleMarkers(
    data = high_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: สูง</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "High Risk School"
  ) %>%
  
  # เพิ่มตัวควบคุม layers สำหรับ Base Map, Contour Lines, Boundary และความเสี่ยงต่าง ๆ
  addLayersControl(
    baseGroups = c("Base Map"),
    overlayGroups = c("Chiang Mai Boundary", "Contour Lines", "Low Risk School", "Moderate Risk School", "High Risk School"),
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addLegend(
    "bottomright",
    pal = risk_palette,
    values = aggregate_data$avg_risk,
    title = "Risk Score",
    opacity = 1,
    labFormat = function(type, cuts, p) {
      labels <- c("Low", "Moderate", "High")  # กำหนด labels ที่ต้องการ
    }
  ) 
```

```{r eval = F}

risk_palette <- colorBin(palette = c("white","orange","maroon"), domain = aggregate_data$avg_risk, bins = c(0,0.6,0.8,1.0))

low_risk <- aggregate_data %>% filter(avg_risk < 0.6)
moderate_risk <- aggregate_data %>% filter(avg_risk >= 0.6 & avg_risk < 0.8)
high_risk <- aggregate_data %>% filter(avg_risk >= 0.8)



leaflet() %>%
  # เพิ่มแผนที่พื้นหลัง
  addProviderTiles(
    provider = "Stadia.AlidadeSmoothDark",  
    group = "Base Map") %>%
  
  # เพิ่ม Polygon ของจังหวัดเชียงใหม่
  addPolygons(
    data = thai_prov_map %>% filter(ADM1_TH == "เชียงใหม่"),
    color = "white",
    fillOpacity = 0.2,
    weight = 2,
    label = ~ADM1_TH,
    group = "Chiang Mai Boundary"
  ) %>%
  
  # เพิ่ม contour lines
  addPolylines(
    data = contours_sf,
    color = ~risk_palette(level),
    weight = 1.5,
    opacity = 0.8,
    label = ~paste("Risk Level:", round(level, 2)),
    group = "Contour Lines"
  ) %>%
  
  # เพิ่ม Circle Markers สำหรับแต่ละกลุ่มความเสี่ยง
  addCircleMarkers(
    data = low_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: ต่ำ</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "Low Risk School"
  ) %>%
  addCircleMarkers(
    data = moderate_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: ปานกลาง</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "Moderate Risk School"
  ) %>%
  addCircleMarkers(
    data = high_risk,
    lng = ~school_lon,
    lat = ~school_lat,
    color = ~risk_palette(avg_risk),
    opacity = 0.5,
    radius = 3,
    stroke = TRUE,
    popup = ~paste("<b>ระดับความเสี่ยง: สูง</b>", "<br>",
                   "<b>School =</b>", school_code3,
                   "<br>",
                   "<b>ขนาดโรงเรียน</b> =", school_size,
                   "<br>",
                   "<b>ความยุ่งยากในการเข้าถึง</b> =", hard_to_reach,
                   "<br>",
                   "<b>CMER Score</b> =", round(avg_risk, 2)),
    group = "High Risk School"
  ) %>%
  
  # เพิ่มตัวควบคุม layers สำหรับ Base Map, Contour Lines, Boundary และความเสี่ยงต่าง ๆ
  addLayersControl(
    baseGroups = c("Base Map"),
    overlayGroups = c("Chiang Mai Boundary", "Contour Lines", "Low Risk School", "Moderate Risk School", "High Risk School"),
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  addLegend(
    "bottomright",
    pal = risk_palette,
    values = aggregate_data$avg_risk,
    title = "Risk Score",
    opacity = 1,
    labFormat = function(type, cuts, p) {
      labels <- c("Low", "Moderate", "High")  # กำหนด labels ที่ต้องการ
    }
  ) 
```

### กิจกรรม

ลองใช้ข้อมูลใน `example_data.csv` เพื่อออกแบบทัศนภาพข้อมูลเชิงพื้นที่โดยใช้ leaflet เป็นเครื่องมือ ทั้งนี้้ขอให้พิจารณาประเด็นต่อไปนี้ในการออกแบบ

1.  Key Message ของการนำเสนอคืออะไร

2.  เราวางแผนนำเสนอ key message นี้ในแผนภาพอย่างไร

3.  สร้างแผนที่ leaflet ตามแนวคิดข้างต้น
