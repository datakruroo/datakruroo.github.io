{
  "hash": "3a407833be1ac41c2ee125fabe1fcf47",
  "result": {
    "markdown": "# การบ้าน 3: Digit Recognition Problem\n\n## Introduction\n\nขอให้นิสิตใช้ชุดข้อมูล [`train.csv`](datasets/train.csv.zip) และ [`test.csv`](datasets/test.csv.zip) เพื่อพัฒนาโมเดลรู้จำเพื่อจำแนกตัวเลขจากลายมือ (digit recognition) เมื่อดาวน์โหลดข้อมูลมาแล้วนิสิตจะต้องแตก zip ไฟล์ข้อมูลทั้งสองก่อนที่จะวิเคราะห์จริง\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n#unzip(zipfile = \"datasets/train.csv.zip\", files = \"train.csv\")\n#unzip(zipfile = \"datasets/test.csv.zip\", file = \"test.csv\")\n\ntrain <- read.csv(\"train.csv\")\ntest <- read.csv(\"test.csv\")\nhead(train[,1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  label pixel0 pixel1 pixel2 pixel3 pixel4 pixel5 pixel6 pixel7 pixel8\n1     1      0      0      0      0      0      0      0      0      0\n2     0      0      0      0      0      0      0      0      0      0\n3     1      0      0      0      0      0      0      0      0      0\n4     4      0      0      0      0      0      0      0      0      0\n5     0      0      0      0      0      0      0      0      0      0\n6     0      0      0      0      0      0      0      0      0      0\n```\n:::\n:::\n\n\n## สำรวจข้อมูล\n\nลองเรียกชื่อตัวแปรทั้งหมดในชุดข้อมูล `train` ขึ้นมาดู\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(train) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"label\"  \"pixel0\" \"pixel1\" \"pixel2\" \"pixel3\" \"pixel4\"\n```\n:::\n\n```{.r .cell-code}\nnames(train) %>% tail()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pixel778\" \"pixel779\" \"pixel780\" \"pixel781\" \"pixel782\" \"pixel783\"\n```\n:::\n:::\n\n\nชุดข้อมูลทั้งสองชุดประกอบด้วยข้อมูลภาพของตัวเลข 0 - 9 ที่เขียนด้วยลายมือที่มีขนาด 28 x 28 pixels โดยรูปภาพแต่ละรูปถูกแปลงให้อยู่ในรูปของ feature จำนวน 784 ตัว (คอลัมน์) ซึ่งแทน pixels แต่ละจุดบนรูปภาพต้นฉบับ และข้อมูลภายในแต่ละ pixel ถูกแปลงให้เป็นค่าความเข้มของสีดำ ที่มีค่าอยู่ในช่วง 0 - 255 นอกจากนี้ภายในชุดข้อมูลทั้งสองชุดยังมีตัวแปร `label` ที่ใช้ระบุว่าข้อมูลภายในแต่ละแถวของชุดข้อมูลนั้นเป็นภาพของตัวเลขใด\n\n![](images/image-1842286070.png){width=\"262\"}\n\nลองดึงข้อมูลของรูปภาพรูปที่หนึ่ง ซึ่งอยู่ในแถวแรกของชุดข้อมูล `train` ขึ้นมาดู พบว่ามีลักษณะดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot function\nplot_digit <- function(data, index)\n{\ntitle_lab <- data[index,\"label\"]\ndata %>%\n  slice(index) %>%\n  dplyr::select(starts_with(\"pixel\")) %>%\n  pivot_longer(starts_with(\"pixel\")) %>%\n  mutate(x = rep(1:28,28),\n         y = rep(1:28, each = 28)) %>%\n  ggplot(aes(x = x, y = y))+\n  geom_tile(aes(fill = value))+\n  scale_y_reverse()+\n  scale_fill_gradient(low = \"white\", high = \"black\")+\n  theme_light()+\n  theme(text = element_text(family = \"ChulaCharasNew\"),\n        panel.grid = element_blank()\n  )+\n  ggtitle(title_lab)+\n  labs(fill = \"Darkness\")\n}\n# -------\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gridExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n:::\n\n```{.r .cell-code}\np1 <- plot_digit(train, 1)\np2 <- plot_digit(train,10)\np3 <- plot_digit(train,20)\np4 <- plot_digit(train,30)\ngrid.arrange(p1,p2,p3,p4, ncol=2)\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nสุดท้ายลองแจกแจงความถี่ของ `label` ว่ามีตัวเลขอะไรบ้างในชุดข้อมูล\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = train, aes(x = label)) +\n  geom_bar()+\n  scale_x_continuous(breaks=seq(0,9,1))\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Model Training\n\nปัญหาจำแนกตัวเลขจากลายมือนี้จัดอยู่ในกลุ่มปัญหาที่เรียกว่า multi-class classfication ซึ่งเกี่ยวกับการจำแนกข้อมูลที่มีจำนวนหลาย categories อัลกอริทึมที่จะใช้ในตัวอย่างนี้ประกอบด้วย\n\n-   Multinomial logistic regression with regularization\n\n-   Decision Tree\n\n-   Random Forest\n\nรายละเอียดการพัฒนาโมเดลมีดังนี้\n\n### 1. สร้าง recipe object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# แปลงให้ outcom เป็น factor ก่อน\ntrain$label <- factor(train$label)\ntrain <- train %>% drop_na()\n# sampling ข้อมูลบางส่วนมา train model\nset.seed(123)\nsplit <- initial_split(train, prop = 0.2, strata = \"label\")\nsample_train <- training(split)\nsample_test <- testing(split)\n\ntable(sample_train$label)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  0   1   2   3   4   5   6   7   8   9 \n824 980 845 866 816 747 815 890 834 777 \n```\n:::\n\n```{.r .cell-code}\nsample_train %>%\n  ggplot(aes(x=label))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### 2. ทดลอง fit model (no tuning)\n\nกำหนดโมเดลด้วย parsnip package รายละเอียดสามารถศึกษาได้จาก <https://www.tidymodels.org/find/parsnip/> สำหรับ multinomial logistic regression สามารถกำหนดโมเดลได้ดังนี้\n\n#### Multinomial logistic regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart <- Sys.time()\nmultinom_reg <- multinom_reg(penalty = 0.01,\n                             mixture = 1) %>%\n  set_engine(\"glmnet\") %>%\n  set_mode(\"classification\") %>%\n  fit(label ~ . , data= sample_train)\ntime_usage <- Sys.time() - start\ntime_usage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.738852 mins\n```\n:::\n\n```{.r .cell-code}\n#par(mfrow = c(5,2), mar=c(5,5,1,1))\n#multinom_reg %>% extract_fit_engine() %>%plot()\n\npred_multinom_test <- predict(multinom_reg, new_data = sample_test)\n\npred_result <- sample_test %>%\n  bind_cols(pred_multinom_test) %>%\n  select(label, .pred_class)\n\nconfusion_glmnet<-pred_result %>% conf_mat(truth = label,\n                         estimate = .pred_class)\nconfusion_glmnet %>% autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nconfusion_glmnet %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             multiclass     0.864\n 2 kap                  multiclass     0.848\n 3 sens                 macro          0.862\n 4 spec                 macro          0.985\n 5 ppv                  macro          0.863\n 6 npv                  macro          0.985\n 7 mcc                  multiclass     0.848\n 8 j_index              macro          0.846\n 9 bal_accuracy         macro          0.923\n10 detection_prevalence macro          0.1  \n11 precision            macro          0.863\n12 recall               macro          0.862\n13 f_meas               macro          0.862\n```\n:::\n:::\n\n\n#### Decision Trees\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rpart.plot)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: rpart\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'rpart'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dials':\n\n    prune\n```\n:::\n\n```{.r .cell-code}\nstart <- Sys.time()\ndt_fit <- decision_tree(min_n = 900,\n                    tree_depth = 30,\n                    cost_complexity = 0.0001) %>%\n  set_engine(\"rpart\") %>%\n  set_mode(\"classification\") %>%\n  fit(label ~ ., data = sample_train)\ntime_usage <- Sys.time() - start\ntime_usage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 6.364096 secs\n```\n:::\n\n```{.r .cell-code}\ndt_fit %>% extract_fit_engine() %>% rpart.plot(type = 4)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Cannot retrieve the data used to build the model (so cannot determine roundint and is.binary for the variables).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: All boxes will be white (the box.palette argument will be ignored) because\nthe number of classes in the response 10 is greater than length(box.palette) 6.\nTo silence this warning use box.palette=0 or trace=-1.\n```\n:::\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\npred_dt_test <- predict(dt_fit, new_data = sample_test)\n\npred_result_dt <- sample_test %>%\n  bind_cols(pred_dt_test) %>%\n  select(label, .pred_class)\n\nconfusion_dt<-pred_result_dt %>% conf_mat(truth = label,\n                         estimate = .pred_class)\nconfusion_dt %>% autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nconfusion_dt %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             multiclass     0.575\n 2 kap                  multiclass     0.528\n 3 sens                 macro          0.571\n 4 spec                 macro          0.953\n 5 ppv                  macro          0.572\n 6 npv                  macro          0.953\n 7 mcc                  multiclass     0.529\n 8 j_index              macro          0.524\n 9 bal_accuracy         macro          0.762\n10 detection_prevalence macro          0.1  \n11 precision            macro          0.572\n12 recall               macro          0.571\n13 f_meas               macro          0.569\n```\n:::\n:::\n\n\n#### Random Forest\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart <- Sys.time()\nrf_fit <- rand_forest(mtry = 46,\n                      trees = 1000,\n                      min_n = 61) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\") %>%\n  fit(label ~ ., data = sample_train)\ntime_usage <- Sys.time() - start\ntime_usage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 1.218419 mins\n```\n:::\n\n```{.r .cell-code}\nrf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nparsnip model object\n\nRanger result\n\nCall:\n ranger::ranger(x = maybe_data_frame(x), y = y, mtry = min_cols(~46,      x), num.trees = ~1000, min.node.size = min_rows(~61, x),      num.threads = 1, verbose = FALSE, seed = sample.int(10^5,          1), probability = TRUE) \n\nType:                             Probability estimation \nNumber of trees:                  1000 \nSample size:                      8394 \nNumber of independent variables:  784 \nMtry:                             46 \nTarget node size:                 61 \nVariable importance mode:         none \nSplitrule:                        gini \nOOB prediction error (Brier s.):  0.1836287 \n```\n:::\n\n```{.r .cell-code}\npred_rf_test <- predict(rf_fit, new_data = sample_test)\n\npred_result_rf <- sample_test %>%\n  bind_cols(pred_rf_test) %>%\n  select(label, .pred_class)\n\nconfusion_rf<-pred_result_rf %>% conf_mat(truth = label,\n                         estimate = .pred_class)\nconfusion_rf %>% autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nconfusion_rf %>% summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             multiclass     0.933\n 2 kap                  multiclass     0.926\n 3 sens                 macro          0.933\n 4 spec                 macro          0.993\n 5 ppv                  macro          0.933\n 6 npv                  macro          0.993\n 7 mcc                  multiclass     0.926\n 8 j_index              macro          0.925\n 9 bal_accuracy         macro          0.963\n10 detection_prevalence macro          0.1  \n11 precision            macro          0.933\n12 recall               macro          0.933\n13 f_meas               macro          0.933\n```\n:::\n:::\n\n\nจากการทดลองรันโมเดลทำนายเบื้องต้นพบว่า glmnet และ random forest เป็นโมเดลที่มีประสิทธิภาพค่อนข้างดีใกล้เคียงกัน อย่างไรก็ตาม glmnet ใช้เวลาประมวลผลค่อนข้างนานมาก ดังนั้นการ fine tune hyperparameter จะทำกับโมเดล random forest อย่างเดียว รายละเอียดอยู่ในหัวข้อถัดไป\n\n### 3. สร้าง Workflow set\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## create recipe object for workflow\npreproc <- recipe(label ~. , data= sample_train)\n```\n:::\n\n\nกำหนด workflow เพื่อ fine tune hyperparameter ของ random forest จากการวิเคราะห์เบื้องต้นพบว่า hyperparameter ที่ค่อนข้างมีผลต่อประสิทธิภาพการทำนายคือ `mtry` ดังนั้นจึงจะ fine tune เฉพาะ hyperparameter ตัวนี้เพียงตัวเดียว\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## model specification\nrf_model <- rand_forest(mtry = tune(),\n                      trees = 200,\n                      min_n = tune()) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\")\n\nrf_workflow <- workflow() %>%\n  add_recipe(preproc) %>%\n  add_model(rf_model)\n\nrf_workflow\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: rand_forest()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n0 Recipe Steps\n\n── Model ───────────────────────────────────────────────────────────────────────\nRandom Forest Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 200\n  min_n = tune()\n\nComputational engine: ranger \n```\n:::\n:::\n\n\n### 4. Hyperparameters Tuning\n\nนำโมเดลทั้งหมดมา train และปรับแต่งค่า hyperparameter ของโมเดล ดังนี้\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## create 10-folds CV \nboot <- bootstraps(sample_train, times = 25, strata = \"label\")\n#vfold_cv(sample_train, v = 5, repeats = 3, strata= \"label\")\n# create eval metric\neval_metrics <- metric_set(accuracy,roc_auc, sens, spec)\n# create grid\nparams <- parameters(mtry(range = c(5,50)),\n                     min_n(range = c(50,400)))\nmygrid <- grid_max_entropy(params, size = 15)\n\n## tuning with default grid\nlibrary(doMC)\nregisterDoMC(cores = parallel::detectCores())\nstart <- Sys.time()\nall_tuning_results <- rf_workflow %>%\n  tune_grid(resamples = boot,\n               grid = mygrid,\n               metrics = eval_metrics,\n               control = control_grid(save_pred = TRUE,\n                                      verbose = TRUE)\n               )\n# stop parallel\ntime_usage <- Sys.time() - start\ntime_usage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 5.688153 mins\n```\n:::\n:::\n\n\n### 5. วิเคราะห์ hyperparameters\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_tuning_results %>% collect_metrics(summarise = T) %>%\n  filter(.metric == \"sens\") %>%\n  arrange(desc(mean))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 15 × 8\n    mtry min_n .metric .estimator  mean     n  std_err .config              \n   <int> <int> <chr>   <chr>      <dbl> <int>    <dbl> <chr>                \n 1    29    60 sens    macro      0.923    25 0.000791 Preprocessor1_Model14\n 2    10    62 sens    macro      0.920    25 0.000739 Preprocessor1_Model06\n 3    49    93 sens    macro      0.916    25 0.000705 Preprocessor1_Model11\n 4    38   132 sens    macro      0.910    25 0.000816 Preprocessor1_Model07\n 5    23   162 sens    macro      0.906    25 0.000860 Preprocessor1_Model09\n 6     6   126 sens    macro      0.902    25 0.00112  Preprocessor1_Model05\n 7    32   239 sens    macro      0.896    25 0.000769 Preprocessor1_Model02\n 8    46   222 sens    macro      0.896    25 0.00110  Preprocessor1_Model10\n 9    14   233 sens    macro      0.894    25 0.000956 Preprocessor1_Model13\n10     7   195 sens    macro      0.893    25 0.00113  Preprocessor1_Model08\n11    20   306 sens    macro      0.887    25 0.00121  Preprocessor1_Model12\n12    32   366 sens    macro      0.880    25 0.00104  Preprocessor1_Model03\n13    42   367 sens    macro      0.879    25 0.000939 Preprocessor1_Model04\n14    15   393 sens    macro      0.877    25 0.00125  Preprocessor1_Model15\n15     6   328 sens    macro      0.873    25 0.00148  Preprocessor1_Model01\n```\n:::\n\n```{.r .cell-code}\nall_tuning_results %>% autoplot()\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nshow_best(all_tuning_results,3, metric = \"roc_auc\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 8\n   mtry min_n .metric .estimator  mean     n   std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>     <dbl> <chr>                \n1    29    60 roc_auc hand_till  0.995    25 0.0000811 Preprocessor1_Model14\n2    49    93 roc_auc hand_till  0.994    25 0.0000848 Preprocessor1_Model11\n3    10    62 roc_auc hand_till  0.994    25 0.0000882 Preprocessor1_Model06\n```\n:::\n\n```{.r .cell-code}\nshow_best(all_tuning_results,3, metric = \"sens\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 8\n   mtry min_n .metric .estimator  mean     n  std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>    <dbl> <chr>                \n1    29    60 sens    macro      0.923    25 0.000791 Preprocessor1_Model14\n2    10    62 sens    macro      0.920    25 0.000739 Preprocessor1_Model06\n3    49    93 sens    macro      0.916    25 0.000705 Preprocessor1_Model11\n```\n:::\n\n```{.r .cell-code}\nshow_best(all_tuning_results,3, metric = \"spec\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 8\n   mtry min_n .metric .estimator  mean     n   std_err .config              \n  <int> <int> <chr>   <chr>      <dbl> <int>     <dbl> <chr>                \n1    29    60 spec    macro      0.992    25 0.0000889 Preprocessor1_Model14\n2    10    62 spec    macro      0.991    25 0.0000831 Preprocessor1_Model06\n3    49    93 spec    macro      0.991    25 0.0000768 Preprocessor1_Model11\n```\n:::\n:::\n\n\n### 6. Finalized workflow\n\nนำโมเดลที่ดีที่สุดจากข้้างต้นมา fit ใหม่\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmybest_mod <- show_best(all_tuning_results,1, metric = \"sens\")\nset.seed(123)\nsplit <- initial_split(train, prop = 0.7, strata = \"label\")\nsample_train <- training(split)\nsample_test <- testing(split)\n\nrf_model2 <- rand_forest(mtry = tune(),\n                      trees = 1000,\n                      min_n = tune()) %>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"classification\")\n\nrf_workflow2 <- workflow() %>%\n  add_recipe(preproc) %>%\n  add_model(rf_model2)\n\nstart <- Sys.time()\nregisterDoMC(cores = parallel::detectCores())\nrf_fit_final <- rf_workflow2 %>%\n  finalize_workflow(mybest_mod) %>%\n  last_fit(split,\n           metrics = eval_metrics)\ntime_usage <- Sys.time() - start\ntime_usage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 4.626141 mins\n```\n:::\n\n```{.r .cell-code}\nrf_fit_final %>% \n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy multiclass     0.951 Preprocessor1_Model1\n2 sens     macro          0.951 Preprocessor1_Model1\n3 spec     macro          0.995 Preprocessor1_Model1\n4 roc_auc  hand_till      0.998 Preprocessor1_Model1\n```\n:::\n\n```{.r .cell-code}\nrf_fit_final %>%\n  collect_predictions() %>%\n  conf_mat(truth = label,\n           estimate = .pred_class) %>%\n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             multiclass     0.951\n 2 kap                  multiclass     0.946\n 3 sens                 macro          0.951\n 4 spec                 macro          0.995\n 5 ppv                  macro          0.951\n 6 npv                  macro          0.995\n 7 mcc                  multiclass     0.946\n 8 j_index              macro          0.945\n 9 bal_accuracy         macro          0.973\n10 detection_prevalence macro          0.1  \n11 precision            macro          0.951\n12 recall               macro          0.951\n13 f_meas               macro          0.951\n```\n:::\n\n```{.r .cell-code}\n## mosaic plot\nrf_fit_final %>%\n  collect_predictions() %>%\n  conf_mat(truth = label,\n           estimate = .pred_class) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\n## heatmap of confusion matrix\nrf_fit_final %>%\n  collect_predictions() %>%\n  conf_mat(truth = label,\n           estimate = .pred_class) %>%\n  autoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\n### 7. Predict a new dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_val <- rf_fit_final %>%\n  extract_workflow() %>%\n  predict(test[1:6,])\npredict_val <- as.character(predict_val$.pred_class)\np1<-plot_digit(test,1)+\n  ggtitle(predict_val[1])\np2<-plot_digit(test,2)+\n  ggtitle(predict_val[2])\np3<-plot_digit(test,3)+\n  ggtitle(predict_val[3])\np4<-plot_digit(test,4)+\n  ggtitle(predict_val[4])\np5<-plot_digit(test,5)+\n  ggtitle(predict_val[5])\np6<-plot_digit(test,6)+\n  ggtitle(predict_val[6])\ngrid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## 8. Predict new dataset (from raw)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(EBImage)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'EBImage' was built under R version 4.2.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'EBImage'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    transpose\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:parsnip':\n\n    translate\n```\n:::\n\n```{.r .cell-code}\nmyimg <- readImage(\"/Users/siwachoat/Desktop/Screenshot 2566-03-04 at 18.45.19.png\")\nmyimg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImage \n  colorMode    : Color \n  storage.mode : double \n  dim          : 264 264 4 \n  frames.total : 4 \n  frames.render: 1 \n\nimageData(object)[1:5,1:6,1]\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    1    1    1    1    1    1\n[2,]    1    1    1    1    1    1\n[3,]    1    1    1    1    1    1\n[4,]    1    1    1    1    1    1\n[5,]    1    1    1    1    1    1\n```\n:::\n\n```{.r .cell-code}\ncolorMode(myimg) <- Grayscale\nimg_resize <- resize(myimg, w=28, h=28)\ndisplay(img_resize)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOnly the first frame of the image stack is displayed.\nTo display all frames use 'all = TRUE'.\n```\n:::\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nimg_neg <- max(img_resize) - img_resize\ndisplay(img_neg)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nOnly the first frame of the image stack is displayed.\nTo display all frames use 'all = TRUE'.\n```\n:::\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\nimg_neg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nImage \n  colorMode    : Grayscale \n  storage.mode : double \n  dim          : 28 28 4 \n  frames.total : 4 \n  frames.render: 4 \n\nimageData(object)[1:5,1:6,1]\n     [,1] [,2] [,3] [,4] [,5] [,6]\n[1,]    0    0    0    0    0    0\n[2,]    0    0    0    0    0    0\n[3,]    0    0    0    0    0    0\n[4,]    0    0    0    0    0    0\n[5,]    0    0    0    0    0    0\n```\n:::\n\n```{.r .cell-code}\nmyimg <- imageData(img_neg)[,,1]\nmyimg %>% dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 28 28\n```\n:::\n\n```{.r .cell-code}\nvector <- myimg %>% as.numeric()\ntemp <- data.frame(t(vector))\ntemp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 X16 X17 X18 X19 X20 X21\n1  0  0  0  0  0  0  0  0  0   0   0   0   0   0   0   0   0   0   0   0   0\n  X22 X23 X24 X25 X26 X27 X28 X29 X30 X31 X32 X33 X34 X35 X36 X37 X38 X39 X40\n1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n  X41 X42 X43 X44 X45 X46 X47 X48 X49 X50 X51 X52 X53 X54 X55 X56 X57 X58 X59\n1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n  X60 X61 X62 X63 X64 X65 X66 X67 X68 X69 X70 X71 X72 X73 X74 X75 X76 X77 X78\n1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n  X79 X80 X81 X82 X83 X84 X85 X86 X87 X88 X89 X90 X91 X92 X93 X94 X95 X96 X97\n1   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n  X98 X99 X100 X101 X102 X103 X104 X105 X106 X107 X108 X109 X110 X111 X112 X113\n1   0   0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X114 X115 X116 X117 X118 X119 X120 X121 X122 X123 X124 X125 X126 X127 X128\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X129 X130 X131 X132 X133 X134 X135 X136 X137 X138 X139 X140 X141 X142 X143\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X144 X145 X146 X147 X148 X149 X150 X151 X152 X153      X154 X155 X156 X157\n1    0    0    0    0    0    0    0    0    0    0 0.6290516    0    0    0\n  X158 X159 X160 X161 X162 X163 X164 X165 X166 X167 X168 X169 X170 X171 X172\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X173 X174 X175 X176 X177 X178 X179 X180 X181      X182 X183 X184 X185 X186\n1    0    0    0    0    0    0    0    0    0 0.2240896    0    0    0    0\n  X187 X188 X189 X190 X191 X192 X193 X194 X195 X196 X197 X198 X199 X200 X201\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X202 X203 X204 X205 X206 X207 X208      X209 X210 X211 X212 X213 X214 X215\n1    0    0    0    0    0    0    0 0.1215486    0    0    0    0    0    0\n  X216 X217 X218 X219 X220 X221 X222 X223 X224 X225 X226 X227 X228 X229 X230\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X231 X232 X233 X234 X235 X236     X237 X238     X239 X240 X241 X242 X243 X244\n1    0    0    0    0    0    0 0.772549    0 0.772549    0    0    0    0    0\n  X245 X246 X247 X248 X249 X250 X251 X252 X253 X254 X255 X256 X257 X258 X259\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X260 X261 X262 X263 X264       X265 X266     X267 X268 X269 X270 X271 X272\n1    0    0    0    0    0 0.09831933    0 0.772549    0    0    0    0    0\n  X273 X274 X275 X276 X277 X278 X279 X280 X281 X282 X283 X284 X285 X286 X287\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X288 X289 X290 X291      X292 X293 X294      X295 X296 X297 X298 X299 X300\n1    0    0    0    0 0.7669468    0    0 0.6712885    0    0    0    0    0\n  X301 X302 X303 X304 X305 X306 X307 X308 X309 X310 X311 X312 X313 X314 X315\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X316 X317 X318 X319     X320 X321 X322 X323 X324 X325 X326 X327 X328 X329\n1    0    0    0    0 0.647439    0    0    0    0    0    0    0    0    0\n  X330 X331 X332 X333 X334 X335 X336 X337 X338 X339 X340 X341 X342 X343 X344\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X345 X346     X347 X348 X349      X350 X351 X352 X353 X354 X355 X356 X357\n1    0    0 0.772549    0    0 0.7720088    0    0    0    0    0    0    0\n  X358 X359 X360 X361 X362 X363 X364 X365 X366 X367 X368 X369 X370 X371 X372\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X373       X374       X375 X376 X377     X378 X379 X380 X381      X382\n1    0 0.01210484 0.06456583    0    0 0.772549    0    0    0 0.2743697\n        X383 X384 X385 X386 X387 X388 X389 X390 X391 X392 X393 X394 X395 X396\n1 0.01276511    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X397 X398 X399 X400 X401     X402 X403 X404 X405     X406      X407      X408\n1    0    0    0    0    0 0.772549    0    0    0 0.772549 0.1006603 0.6772509\n      X409     X410 X411 X412 X413 X414 X415 X416 X417 X418 X419 X420 X421 X422\n1 0.772549 0.772549    0    0    0    0    0    0    0    0    0    0    0    0\n  X423 X424 X425 X426 X427 X428      X429     X430     X431      X432\n1    0    0    0    0    0    0 0.7635454 0.772549 0.772549 0.3958383\n        X433     X434 X435 X436 X437 X438 X439 X440 X441 X442 X443 X444 X445\n1 0.02260904 0.772549    0    0    0    0    0    0    0    0    0    0    0\n  X446 X447 X448 X449 X450 X451 X452 X453 X454 X455 X456 X457 X458 X459 X460\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X461      X462 X463 X464 X465 X466 X467 X468 X469 X470 X471 X472 X473 X474\n1    0 0.7523009    0    0    0    0    0    0    0    0    0    0    0    0\n  X475 X476 X477 X478 X479 X480 X481 X482 X483 X484 X485 X486 X487 X488 X489\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n      X490 X491 X492 X493 X494 X495 X496 X497 X498 X499 X500 X501 X502 X503\n1 0.579972    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X504 X505 X506 X507 X508 X509 X510 X511 X512 X513 X514 X515 X516 X517\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n       X518 X519 X520 X521 X522 X523 X524 X525 X526 X527 X528 X529 X530 X531\n1 0.4954582    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X532 X533 X534 X535 X536 X537 X538 X539 X540 X541 X542 X543 X544 X545\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n       X546 X547 X548 X549 X550 X551 X552 X553 X554 X555 X556 X557 X558 X559\n1 0.4868747    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X560 X561 X562 X563 X564 X565 X566 X567 X568 X569 X570 X571 X572      X573\n1    0    0    0    0    0    0    0    0    0    0    0    0    0 0.1663866\n       X574 X575 X576 X577 X578 X579 X580 X581 X582 X583 X584 X585 X586 X587\n1 0.3317127    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X588 X589 X590 X591 X592 X593 X594 X595 X596 X597 X598 X599 X600     X601\n1    0    0    0    0    0    0    0    0    0    0    0    0    0 0.772549\n        X602 X603 X604 X605 X606 X607 X608 X609 X610 X611 X612 X613 X614 X615\n1 0.06254502    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X616 X617 X618 X619 X620 X621 X622 X623 X624 X625 X626 X627 X628     X629\n1    0    0    0    0    0    0    0    0    0    0    0    0    0 0.772549\n  X630 X631 X632 X633 X634 X635 X636 X637 X638 X639 X640 X641 X642 X643 X644\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X645 X646 X647 X648 X649 X650 X651 X652 X653 X654 X655 X656 X657 X658 X659\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X660 X661 X662 X663 X664 X665 X666 X667 X668 X669 X670 X671 X672 X673 X674\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X675 X676 X677 X678 X679 X680 X681 X682 X683 X684 X685 X686 X687 X688 X689\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X690 X691 X692 X693 X694 X695 X696 X697 X698 X699 X700 X701 X702 X703 X704\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X705 X706 X707 X708 X709 X710 X711 X712 X713 X714 X715 X716 X717 X718 X719\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X720 X721 X722 X723 X724 X725 X726 X727 X728 X729 X730 X731 X732 X733 X734\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X735 X736 X737 X738 X739 X740 X741 X742 X743 X744 X745 X746 X747 X748 X749\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X750 X751 X752 X753 X754 X755 X756 X757 X758 X759 X760 X761 X762 X763 X764\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X765 X766 X767 X768 X769 X770 X771 X772 X773 X774 X775 X776 X777 X778 X779\n1    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n  X780 X781 X782 X783 X784\n1    0    0    0    0    0\n```\n:::\n\n```{.r .cell-code}\nnames(temp) <- paste0(\"pixel\",0:783)\ntemp <-temp*255\ntemp<-round(temp,0)\n\nplot_digit(temp,1)\n```\n\n::: {.cell-output-display}\n![](hw03_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n```{.r .cell-code}\npredict_val <- rf_fit_final %>%\n  extract_workflow() %>%\n  predict(temp)\n```\n:::\n",
    "supporting": [
      "hw03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}