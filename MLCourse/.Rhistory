group_by(id) %>%
roc_curve(truth = result, estimate = .pred_correct) %>%
autoplot()
lasso_grid %>%
collect_metrics()
dat <- read_excel("/Users/siwachoat/Downloads/การบ้าน Simple Regression (Responses) (1).xlsx",
sheet=2)
names(dat)[5]<-"text"
head(dat)
train_rec <- recipe(result ~ text, data = train) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_predictors())
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท")
new_dat <- tibble(text = new_dat)
new_dat
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric())
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(NULL) %>%
juice()
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train_rec) %>%
juice()
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train_dat) %>%
juice()
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
juice()
recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
bake(new_dat)
new_dat<-recipe(~text, data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
bake(new_dat)
predict(mod, new_data = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-recipe(~., data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
bake(new_dat)
new_dat
head(dat)
split <- initial_split(dat, strata = result)
train <- training(split)
test <- testing(split)
train_rec <- recipe(result ~ ., data = train) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_predictors())
lasso_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(train_rec) %>%
add_model(lasso_spec)
lasso_wf
lambda_grid <- grid_regular(penalty(), levels = 40)
set.seed(123)
folds <- vfold_cv(train, strata = result)
doParallel::registerDoParallel()
set.seed(2020)
lasso_grid <- tune_grid(
lasso_wf,
resamples = folds,
grid = lambda_grid,
control = control_grid(save_pred = T),
metrics = metric_set(roc_auc, sens,spec)
)
show_notes(.Last.tune.result)
dat<-dat%>%select(result, text)
split <- initial_split(dat, strata = result)
train <- training(split)
test <- testing(split)
train_rec <- recipe(result ~ ., data = train) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_predictors())
lasso_spec <- logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lasso_wf <- workflow() %>%
add_recipe(train_rec) %>%
add_model(lasso_spec)
lasso_wf
lambda_grid <- grid_regular(penalty(), levels = 40)
set.seed(123)
folds <- vfold_cv(train, strata = result)
doParallel::registerDoParallel()
set.seed(2020)
lasso_grid <- tune_grid(
lasso_wf,
resamples = folds,
grid = lambda_grid,
control = control_grid(save_pred = T),
metrics = metric_set(roc_auc, sens,spec)
)
lasso_grid %>%
collect_metrics()
lasso_grid %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = .metric)) +
geom_line(size = 1.5, show.legend = FALSE) +
facet_wrap(~.metric) +
scale_x_log10()
final_lasso <- finalize_workflow(lasso_wf, best_auc)
final_lasso
final_lasso %>%
last_fit(split) %>%
extract_fit_engine() %>%
vip(family="ChulaCharasNew")+
theme(text=element_text(family="ChulaCharasNew"))
final_lasso %>%
last_fit(split) %>%
extract_fit_engine() %>%
vi(lambda = best_auc$penalty) %>%
group_by(Sign) %>%
top_n(5, wt = abs(Importance)) %>%
ungroup() %>%
mutate(
Importance = abs(Importance),
Variable = str_remove(Variable, "tfidf_text_"),
Variable = fct_reorder(Variable, Importance)
) %>%
ggplot(aes(x = Importance, y = Variable, fill = Sign)) +
geom_col(show.legend = FALSE) +
facet_wrap(~Sign, scales = "free_y") +
labs(y = NULL)+
theme(text=element_text(family="ChulaCharasNew"))
mod <- final_lasso %>%
last_fit(split)
mod %>% collect_predictions() %>%
roc_curve(truth = result, estimate = .pred_correct) %>%
autoplot()
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
train_rec
train_dat<- train_rec %>% prep(train) %>%
juice()
train_dat
train_rec <- recipe(result ~ ., data = train) %>%
step_tokenize() %>%
step_stopwords() %>%
step_tokenfilter( max_tokens = 180) %>%
step_tfidf() %>%
step_normalize(all_predictors())
train_rec
train_rec <- recipe(result ~ ., data = train) %>%
step_tokenize(all_string_predictors()) %>%
step_stopwords(all_string_predictors()) %>%
step_tokenfilter(all_string_predictors(), max_tokens = 180) %>%
step_tfidf(all_string_predictors()) %>%
step_normalize(all_predictors())
train_dat<- train_rec %>% prep(train) %>%
juice()
train_rec <- recipe(result ~ ., data = train) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_predictors())
new_dat <- tibble(text = new_dat)
new_dat<-recipe(~., data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
bake(new_dat)
new_dat
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท")
new_dat <- tibble(text = new_dat)
new_dat<-recipe(~., data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(train) %>%
bake(new_dat)
new_dat
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat %>% glimpse()
train_dat %>% glimpse()
new_dat<-recipe(~., data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(new_dat) %>%
bake(new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท")
new_dat <- tibble(text = new_dat)
new_dat<-recipe(~, data= new_dat) %>%
new_dat<-recipe(~., data= new_dat) %>%
step_tokenize(text) %>%
step_stopwords(text) %>%
step_tokenfilter(text, max_tokens = 180) %>%
step_tfidf(text) %>%
step_normalize(all_numeric()) %>%
prep(new_dat) %>%
bake(new_dat)
new_dat
glimpse(new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท")
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี")
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้านักเรียนมีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิ่ม 9449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 32449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
lasso_grid %>%
collect_metrics()
lasso_grid %>%
collect_metrics() %>%
ggplot(aes(penalty, mean, color = .metric)) +
geom_line(size = 1.5, show.legend = FALSE) +
facet_wrap(~.metric) +
scale_x_log10()
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"โดเรมอนโตขึ้นสัก 1 ปี ก็จะมีเงินเพิ่มขึ้น 9000 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"โดเรมอนโตขึ้นสัก 1 ปี ก็จะมีเงินเพิ่มขึ้น 9000 บาท",
"ครูที่ไม่มีประสบการณ์ทำงานจะมีเงินเดือน 9000 บาท")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"โดเรมอนโตขึ้นสัก 1 ปี ก็จะมีเงินเพิ่มขึ้น 9000 บาท",
"ครูที่ไม่มีประสบการณ์ทำงานจะมีเงินเดือน 9000 บาท",
"เลือกอีป้อมเป็นนายกกันเถอะ")
new_dat <- tibble(text = new_dat)
mod %>%
extract_workflow() %>%
predict(new_data= new_dat)
new_dat<-c("หากครูมีประสบการณ์เพิ่มขึ้นอีก 1 ปี จะมีเงินเดือนเพิ่มขึ้นโดยเฉลี่ย 9450 บาท",
"สมการถดถอยคือ y = mx+c",
"ครูจะมีเงินเดือนเพิ่ม 9450 บาท เมื่อมีประสบการณ์เพิ่มขึ้น 1 ปี",
"ถ้าอาจารย์มีประสบการณ์เพิ่ม1 ปี จะมีเงินเดือนเพิ่ม 9449 บาท",
"ประสบการณ์ที่มากกขึ้น 1 ปี จะทำให้ครูมีเงินเดือนเพิม 9449 บาท",
"โดเรมอนโตขึ้นสัก 1 ปี ก็จะมีเงินเพิ่มขึ้น 9000 บาท",
"ครูที่ไม่มีประสบการณ์ทำงานจะมีเงินเดือน 9000 บาท",
"เลือกอีป้อมเป็นนายกกันเถอะ")
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
#  group_by(id, word) %>%
count(word, sentiment, sort = TRUE) %>%
ggplot(aes(x=n, y=word, fill=sentiment))+
geom_col()+
facet_wrap(~sentiment)+
theme(text=element_text(family="ChulaCharasNew"))
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
#  group_by(id, word) %>%
count(word, sentiment, sort = TRUE) %>%
ggplot(aes(x=n, y=word, fill=sentiment))+
geom_col()+
facet_wrap(~sentiment)+
theme(text=element_text(family="ChulaCharasNew"))
source_python("stopword.py")
length(stopword())
head(stopword(),10)
tail(stopword(),10)
tokenized_dat<-tokenized_dat %>%
filter(!word %in% stopword())
tokenized_dat %>% dim()
sentiment_dat <- tokenized_dat %>%
inner_join(lexicon, by="word")
sentiment_dat
library(ggplot2)
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
group_by(id) %>%
summarise(sentiment_score = sum(sentiment_score)) %>%
ggplot(aes(x=sentiment_score))+
geom_histogram(bins=10, col="white")
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
#  group_by(id, word) %>%
count(word, sentiment, sort = TRUE) %>%
ggplot(aes(x=n, y=word, fill=sentiment))+
geom_col()+
facet_wrap(~sentiment)+
theme(text=element_text(family="ChulaCharasNew"))
new_dat <- tibble(text = new_dat)
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
group_by(id, text, section) %>%
summarises(sentiment_score = sum(sentiment_score))
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
group_by(id, text, section) %>%
summarise(sentiment_score = sum(sentiment_score))
sentiment_dat %>%
mutate(sentiment_score = ifelse(sentiment=="pos",1,-1)) %>%
group_by(id, section,text ) %>%
summarise(sentiment_score = sum(sentiment_score))
dat <- read.csv("https://raw.githubusercontent.com/PyThaiNLP/thai-sentiment-analysis-dataset/master/review_shopping.csv",
header=F,
sep = "\t")
dat$id <- 1:dim(dat)[1]
head(dat)
glimpse(dat, width=60)
neg<- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/neg.txt", header = F, col.names = "word")
pos <- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/pos.txt", header = F, col.names = "word")
neg$sentiment <- "neg"
pos$sentiment <- "pos"
lexicon <- neg %>% bind_rows(pos)
head(lexicon)
dim(lexicon)
lexicon <- distinct(lexicon)
dim(lexicon)
library(reticulate)
# Import pythainlp library
pythainlp <- import("pythainlp")
# Define a custom tokenization function for textrecipes
tokenize_thai <- function(text) {
tokens <- lapply(text, pythainlp$word_tokenize, engine="newmm")
tokens_list <- lapply(tokens, function(x) {
paste(x, collapse = " ")})
tokens_list <- unlist(tokens_list)
return(tokens_list)
}
## tokenized via mutate function
temp<-dat %>%
mutate(token = tokenize_thai(text))
dat <- read.csv("https://raw.githubusercontent.com/PyThaiNLP/thai-sentiment-analysis-dataset/master/review_shopping.csv",
header=F, col.names = c("text","sentiment"),
sep = "\t")
dat$id <- 1:dim(dat)[1]
head(dat)
glimpse(dat, width=60)
neg<- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/neg.txt", header = F, col.names = "word")
pos <- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/pos.txt", header = F, col.names = "word")
neg$sentiment <- "neg"
pos$sentiment <- "pos"
lexicon <- neg %>% bind_rows(pos)
head(lexicon)
dim(lexicon)
lexicon <- distinct(lexicon)
dim(lexicon)
neg<- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/neg.txt", header = F, col.names = "word")
pos <- read.csv("https://raw.githubusercontent.com/PyThaiNLP/lexicon-thai/master/%E0%B8%82%E0%B9%89%E0%B8%AD%E0%B8%84%E0%B8%A7%E0%B8%B2%E0%B8%A1/pos.txt", header = F, col.names = "word")
neg$sentiment <- "neg"
pos$sentiment <- "pos"
lexicon <- neg %>% bind_rows(pos)
head(lexicon)
dim(lexicon)
lexicon <- distinct(lexicon)
dim(lexicon)
library(reticulate)
# Import pythainlp library
pythainlp <- import("pythainlp")
# Define a custom tokenization function for textrecipes
tokenize_thai <- function(text) {
tokens <- lapply(text, pythainlp$word_tokenize, engine="newmm")
tokens_list <- lapply(tokens, function(x) {
paste(x, collapse = " ")})
tokens_list <- unlist(tokens_list)
return(tokens_list)
}
## tokenized via mutate function
temp<-dat %>%
mutate(token = tokenize_thai(text))
head(temp)
tokenized_dat <- temp %>%
unnest_tokens(input = token, token = "words",
output = word)
tokenized_dat
reticulate::repl_python()
