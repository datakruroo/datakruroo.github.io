billboard <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/billboard.csv")
## spotify feature data
audio_features <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-14/audio_features.csv")
max_weeks <-
billboard %>%
group_by(song_id) %>%
summarise(weeks_on_chart = max(weeks_on_chart), .groups = "drop")
#glimpse(audio_features)
song_joined <- audio_features %>%
drop_na() %>%
inner_join(max_weeks)
?drop_na
library(tidyr)
max_weeks <-
billboard %>%
group_by(song_id) %>%
summarise(weeks_on_chart = max(weeks_on_chart), .groups = "drop")
#glimpse(audio_features)
song_joined <- audio_features %>%
drop_na() %>%
inner_join(max_weeks)
split <- song_joined %>%
mutate(weeks_on_chart = log(weeks_on_chart)) %>%
initial_split()
library(tidymodels)
library(tidymodels)
split <- song_joined %>%
mutate(weeks_on_chart = log(weeks_on_chart)) %>%
initial_split()
train <- training(split)
test <- testing(split)
preproc <- recipe(weeks_on_chart ~. , data=train) %>%
step_select(danceability:weeks_on_chart) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_numeric_predictors(), num_comp = 5)
library(plsmod)
preproc <- recipe(weeks_on_chart ~. , data=train) %>%
step_select(danceability:weeks_on_chart) %>%
step_normalize(all_numeric_predictors())
#BiocManager::install("mixOmics")
pls_reg <- pls(predictor_prop = tune(),
num_comp = tune()) %>%
set_engine("mixOmics") %>%
set_mode("regression")
## create workflow
pls_workflow <- workflow() %>%
add_recipe(preproc) %>%
add_model(pls_reg)
pls_workflow
## tune grid
library(doMC)
registerDoMC(cores = parallel::detectCores())
start <- Sys.time()
boot <- bootstraps(train, times =25)
pls_workflow %>%
tune_grid(resamples = boot,
grid = 20,
control = control_grid(save_pred = TRUE,
verbose = TRUE))
time_usage <- Sys.time() - start
time_usage
pls_workflow %>%
collect_metrics(summarise= T)
tune_result_pls <- pls_workflow %>%
tune_grid(resamples = boot,
grid = 20,
control = control_grid(save_pred = TRUE,
verbose = TRUE))
tune_result_pls %>%
collect_metrics(summarise= T)
tune_result_pls %>% autoplot()
tune_result_pls %>%
collect_metrics(summarise= T)
dat <- read.csv("PCR_PLS.csv")
head(dat)
dat <- dat %>% select(-X)
library(dplyr)
library(tidyr)
dat <- dat %>% select(-X)
dat <- dat[,-1]
head(dat)
pca_dat <- dat %>% select(starts_with("X"))
pca_dat <- dat %>% dplyr::select(starts_with("X"))
library(corrr)
pca_dat  %>%
correlate() %>%
rearrange() %>%
network_plot(colours = c("orange", "white", "midnightblue"))
pca_dat <- dat %>% dplyr::select(starts_with("X"))
pca_dat <- scale(pca_dat, center =TRUE, scale = TRUE)
summary(pca_dat)
summary(pca_dat[,1:5])
summary(pca_dat[,1:3])
output.pca <- PCA(pca_dat, graph = F)
library(FactoMineR)
library(factoextra)
output.pca <- PCA(pca_dat, graph = F)
output.pca
eig.val <- get_eigenvalue(output.pca)
fviz_eig(output.pca, addlabels = T)
fviz_pca_var(output.pca)
fviz_contrib(output.pca, choice = "var")
eig.val
?fiv_eig()
?fviz_eig()
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue")
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line")
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line",
limits = c(1,20))
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line",
xlim = c(1,20))
eig.val
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line")
eig.val
gapminder
library(gapminder)
library(gapminder)
gapminder
dat <- gapminder %>% dplyr::select(lifeExp) %>%
spread(key = "year", value = "lifeExp")
dat <- gapminder %>% dplyr::select(- pop, -gdpPercap) %>%
spread(key = "year", value = "lifeExp")
head(dat)
pca_dat <- dat %>% dplyr::select(starts_with("1") | starts_with("2"))
pca_dat
rownames(pca_dat)
rownames(pca_dat)<-dat$country
pca_dat
pca_dat <- data.frame(pca_dat)
rownames(pca_dat)<-dat$country
head(pca_dat)
library(FactoMineR)
library(factoextra)
output.pca <- PCA(pca_dat, graph = F)
pca_dat <- scale(pca_dat, center =T, scale =T)
output.pca <- PCA(pca_dat, graph = F)
output.pca
eig.val <- get_eigenvalue(output.pca)
eig.val
dat <- gapminder %>% dplyr::select(- lifeExp, -gdpPercap) %>%
spread(key = "year", value = "lifeExp")
head(dat)
library(gapminder)
dat <- gapminder %>% dplyr::select(- lifeExp, -gdpPercap) %>%
spread(key = "year", value = "lifeExp")
gapminder
dat <- gapminder %>% dplyr::select(-lifeExp, -gdpPercap) %>%
spread(key = "year", value = "lifeExp")
dat <- gapminder %>% dplyr::select(-lifeExp, -pop) %>%
spread(key = "year", value = "gdpPercap")
head(dat)
pca_dat <- dat %>% dplyr::select(starts_with("1") | starts_with("2"))
pca_dat <- data.frame(pca_dat)
rownames(pca_dat)<-dat$country
pca_dat <- scale(pca_dat, center =T, scale =T)
library(FactoMineR)
library(factoextra)
output.pca <- PCA(pca_dat, graph = F)
output.pca
eig.val <- get_eigenvalue(output.pca)
eig.val
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line")
fviz_pca_var(output.pca)
fviz_contrib(output.pca, choice = "var")
output.pca$var$coord
?mtcars
mpg
?mpg
glimpse(mpg)
dat <- mpg %>% dplyr::select(displ, cyl, cty, hwy)
head(dat)
dat<-data.frame(dat)
rownames(dat)<-mpg$manufacturer
dat<-data.frame(dat)
rownames(dat)<-mpg$manufacturer
rowname(dat)<-mpg$manufacturer
rownames(dat)
mpg$manufacturer
dat <- mpg %>% dplyr::select(displ, cyl, cty, hwy)
dat<-data.frame(dat)
rownames(dat)<-mpg$manufacturer
head(dat)
pca_dat <- scale(dat, center =T, scale =T)
output.pca <- PCA(pca_dat, graph = F)
output.pca
output.pca$var$coord
dat <- read.csv("basket.csv")
dat<-data.frame(dat)
head(dat)
dat <- read.csv("basket.csv")
head(dat)
dat<-dat[,-c(1,2)]
head(dat)
pca_dat <- scale(dat, center =T, scale =T)
library(FactoMineR)
library(factoextra)
output.pca <- PCA(pca_dat, graph = F)
output.pca
output.pca$var$coord
eig.val <- get_eigenvalue(output.pca)
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line")
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line",
ylim=c(0,3))
fviz_pca_var(output.pca)
?fviz_pca_var()
fviz_pca_var(output.pca, family="ChulaCharasNew")
fviz_pca_var(output.pca, family="ChulaCharasNew", fontsize= 8)
eig.val
output.pca$var$coord %>% class()
output.pca$var$coord %>% data.frame()
output.pca$var$coord %>% data.frame() %>%
gather(starts_with("Dim"), key="comp",value="loading")
output.pca
dim(pca_dat)
output.pca$var$coord %>% data.frame() %>%
mutate(item = 1:41)
names(pca_dat)
pca_dat
names(dat)
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat))
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading")
ggplot(aes(x = comp, y = item, fill = loading)) %>%
geom_tile()
ggplot(aes(x = comp, y = item, fill = loading)) +
geom_tile()
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = item, fill = loading)) +
geom_tile()
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
output.pca
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
output.pca
output.pca$var$coord
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
?PCA
output.pca <- PCA(pca_dat, graph = F, ncp = 4)
output.pca
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
eig.val <- get_eigenvalue(output.pca)
eig.val
output.pca <- PCA(pca_dat, graph = F, ncp = 10)
output.pca
output.pca$var$coord %>% data.frame() %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = reorder(item, loading), fill = loading)) +
geom_tile()
%>% data.frame() %>%
output.pca$var$coord
output.pca$var$coord %>% data.frame() %>%
arrange(desc(Dim.1, Dim.2, Dim.3, Dim.4))
output.pca$var$coord %>% data.frame()
output.pca$var$coord %>% data.frame() %>%
arrange(desc(Dim.1))
output.pca$var$coord %>% data.frame() %>%
arrange(desc(Dim.1, Dim.2))
output.pca$var$coord %>% data.frame() %>%
arrange(desc(pick(starts_with("Dim"))))
output.pca$var$coord %>% data.frame() %>%
arrange(desc(pick(starts_with("Dim")))) %>%
mutate(item = names(dat)) %>%
gather(starts_with("Dim"), key="comp",value="loading") %>%
ggplot(aes(x = comp, y = item, fill = loading)) +
geom_tile()
output.pca$var$coord %>% data.frame() %>%
arrange(desc(pick(starts_with("Dim"))))
eig.val <- get_eigenvalue(output.pca)
eig.val
eig.val <- get_eigenvalue(output.pca)
output.pca
output.pca$var$coord %>% data.frame() %>%
arrange(desc(pick(starts_with("Dim"))))
eig.val <- get_eigenvalue(output.pca)
eig.val
fviz_eig(output.pca, addlabels = T, choice = "eigenvalue", geom = "line",
ylim=c(0,3))
fviz_contrib(output.pca, choice = "var")
corr_matrix <- cor(pca_dat)
ggcorrplot(corr_matrix)
library(corrr)
corr_matrix <- cor(pca_dat)
ggcorrplot(corr_matrix)
library(ggcorrplot)
corr_matrix <- cor(pca_dat)
ggcorrplot(corr_matrix)
output.pca <- princomp(corr_matrix)
?princomp
output.pca <- princomp(pca_dat)
summary(output.pca)
summary(output.pca) %>% t()
summary(output.pca)
output.pca %>%objects()
output.pca$loadings
fviz_eig(output.pca, addlabels = TRUE)
fviz_pca_var(output.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
fviz_pca_var(output.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
fviz_pca_var(output.pca, col.var = "cos2",
gradient.cols = c("black", "orange", "green"),
repel = TRUE)
output.pca$loadings
?fviz_pca_var
fviz_pca_var(output.pca)
dat <- read.csv("PCR_PLS.csv")
head(dat)
dat <- dat[,-1]
head(dat)
dim(dat)
split<-initial_split(dat, prop = 0.7)
train <- training(split)
test <- testing(split)
split
library(tidymodels)
crop1<-cropImage(imageData(logo_label)[,,1], new_width = 28,
new_height = 28)
rf_fit_final %>%
extract_workflow()
library(EBImage)
myimg <- readImage("/Users/siwachoat/Desktop/Screenshot 2566-03-04 at 18.45.19.png")
myimg
display(myimg)
colorMode(myimg) <- Grayscale
myimg
?resize
img_resize <- resize(myimg, w=28, h=28)
img_resize
display(img_resize)
img_resize
display(img_resize)
img_neg <- max(img_resize) - img_resize
display(img_neg)
img_neg
myimg <- imageData(img_neg)
myimg
myimg <- imageData(img_neg)[,,1]
myimg
head(train[1:5,1:5])
train <- read.csv("train.csv")
head(train[,1:10])
myimg %>% class()
myimg %>% dim()
vector <- myimg %>% as.numeric()
vector
temp <- data.frame(t(vector))
temp
temp<-data.frame(vector)
temp
temp <- data.frame(t(vector))
temp
head(train[1:5,1:5])
paste("pixel",0:783,sep=" ")
paste("pixel",0:783,sep="")
paste0("pixel",0:783)
names(temp) <- paste0("pixel",0:783)
temp
summary(vector)
summary(train[1,])
summary(train[,1:4])
summary(train[,200:210])
temp*255
temp <- temp*255
temp<-round(temp,0)
plot_digit <- function(data, index)
{
title_lab <- data[index,"label"]
data %>%
slice(index) %>%
select(starts_with("pixel")) %>%
pivot_longer(starts_with("pixel")) %>%
mutate(x = rep(1:28,28),
y = rep(1:28, each = 28)) %>%
ggplot(aes(x = x, y = y))+
geom_tile(aes(fill = value))+
scale_y_reverse()+
scale_fill_gradient(low = "white", high = "black")+
theme_light()+
theme(text = element_text(family = "ChulaCharasNew"),
panel.grid = element_blank()
)+
ggtitle(title_lab)+
labs(fill = "Darkness")
}
class(temp)
plot_digit(temp,1)
#plot function
plot_digit <- function(data, index)
{
title_lab <- data[index,"label"]
data %>%
slice(index) %>%
dplyr::select(starts_with("pixel")) %>%
pivot_longer(starts_with("pixel")) %>%
mutate(x = rep(1:28,28),
y = rep(1:28, each = 28)) %>%
ggplot(aes(x = x, y = y))+
geom_tile(aes(fill = value))+
scale_y_reverse()+
scale_fill_gradient(low = "white", high = "black")+
theme_light()+
theme(text = element_text(family = "ChulaCharasNew"),
panel.grid = element_blank()
)+
ggtitle(title_lab)+
labs(fill = "Darkness")
}
plot_digit(temp,1)
dat <- read.csv("basket.csv")
head(dat)
dat<-dat[,-c(1,2)]
head(dat)
glimpse(dat)
glimpse(dat, width=80)
glimpse(dat, width=60)
pca_dat <- scale(dat, center =T, scale =T)
summary(pca_dat)
ggcorrplot(corr_matrix)+
theme(text=element_text(family="ChulaCharasNew", size=8))
ggcorrplot(corr_matrix)+
theme(text=element_text(family="ChulaCharasNew", size=6))
ggcorrplot(corr_matrix)+
theme(text=element_text(family="ChulaCharasNew", size=6))
ggcorrplot(corr_matrix)+
theme(text=element_text(family="ChulaCharasNew", size=6))
library(FactoMineR)
library(factoextra)
output.pca <- princomp(pca_dat)
summary(output.pca)
summary(output.pca)
1.5^2
output.pca %>%objects()
output.pca$loadings
fviz_eig(output.pca, addlabels = TRUE)
fviz_pca_var(output.pca)
dat <- read.csv("PCR_PLS.csv")
head(dat)
dat <- dat[,-1]
head(dat)
dim(dat)
cor(dat)
library(tidymodels)
split<-initial_split(dat, prop = 0.7)
split
train <- training(split)
test <- testing(split)
head(dat)
?pls
800*55
800*55
60*55
60*55*12
800*55*12
528000/10
predict_val <- rf_fit_final %>%
extract_workflow() %>%
predict(temp)
import_img<-function(path)
{
myimg <- readImage(path)
#myimg
colorMode(myimg) <- Grayscale
img_resize <- resize(myimg, w=28, h=28)
#display(img_resize)
img_neg <- max(img_resize) - img_resize
#display(img_neg)
#img_neg
myimg <- imageData(img_neg)[,,1]
#myimg %>% dim()
vector <- myimg %>% as.numeric()
temp <- data.frame(t(vector))
names(temp) <- paste0("pixel",0:783)
temp <-temp*255
temp<-round(temp,0)
return(temp)
}
temp<-import_img("Screenshot 2566-03-04 at 18.45.19")
temp<-import_img("Screenshot 2566-03-04 at 18.45.19.png")
temp<-import_img("images/Screenshot 2566-03-04 at 18.45.19.png")
temp
temp<-import_img("images/Screenshot 2566-03-04 at 10.58.21.png")
temp<-rbind(temp,import_img("images/Screenshot 2566-03-04 at 18.45.19.png") )
temp
class(temp)
temp[,1:3]
